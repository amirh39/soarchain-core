// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/runner_did_document.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RunnerDidDocument struct {
	Id                  string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PubKey              string                     `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Keys                *Keys                      `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	VerificationMethods []*VerificationMethod      `protobuf:"bytes,4,rep,name=verificationMethods,json=verificationMethod,proto3" json:"verificationMethods,omitempty"`
	Authentications     []VerificationRelationship `protobuf:"bytes,5,rep,name=authentications,json=authentication,proto3,customtype=VerificationRelationship" json:"authentications,omitempty"`
	Services            []*Service                 `protobuf:"bytes,6,rep,name=services,json=service,proto3" json:"services,omitempty"`
	StakedAmount        string                     `protobuf:"bytes,7,opt,name=stakedAmount,proto3" json:"stakedAmount,omitempty"`
	IpAddress           string                     `protobuf:"bytes,8,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Created             string                     `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	Updated             string                     `protobuf:"bytes,10,opt,name=updated,proto3" json:"updated,omitempty"`
	Address             string                     `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *RunnerDidDocument) Reset()         { *m = RunnerDidDocument{} }
func (m *RunnerDidDocument) String() string { return proto.CompactTextString(m) }
func (*RunnerDidDocument) ProtoMessage()    {}
func (*RunnerDidDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08b6879df6e1705, []int{0}
}
func (m *RunnerDidDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerDidDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerDidDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerDidDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDidDocument.Merge(m, src)
}
func (m *RunnerDidDocument) XXX_Size() int {
	return m.Size()
}
func (m *RunnerDidDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDidDocument.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDidDocument proto.InternalMessageInfo

func (m *RunnerDidDocument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RunnerDidDocument) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *RunnerDidDocument) GetKeys() *Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RunnerDidDocument) GetVerificationMethods() []*VerificationMethod {
	if m != nil {
		return m.VerificationMethods
	}
	return nil
}

func (m *RunnerDidDocument) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *RunnerDidDocument) GetStakedAmount() string {
	if m != nil {
		return m.StakedAmount
	}
	return ""
}

func (m *RunnerDidDocument) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *RunnerDidDocument) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *RunnerDidDocument) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *RunnerDidDocument) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// DidDocumentWithSeq defines a message for Did Document with a sequence number for preventing replay attacks.
type RunnerDidDocumentWithSeq struct {
	Document *RunnerDidDocument `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Sequence uint64             `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *RunnerDidDocumentWithSeq) Reset()         { *m = RunnerDidDocumentWithSeq{} }
func (m *RunnerDidDocumentWithSeq) String() string { return proto.CompactTextString(m) }
func (*RunnerDidDocumentWithSeq) ProtoMessage()    {}
func (*RunnerDidDocumentWithSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08b6879df6e1705, []int{1}
}
func (m *RunnerDidDocumentWithSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerDidDocumentWithSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerDidDocumentWithSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerDidDocumentWithSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDidDocumentWithSeq.Merge(m, src)
}
func (m *RunnerDidDocumentWithSeq) XXX_Size() int {
	return m.Size()
}
func (m *RunnerDidDocumentWithSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDidDocumentWithSeq.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDidDocumentWithSeq proto.InternalMessageInfo

func (m *RunnerDidDocumentWithSeq) GetDocument() *RunnerDidDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *RunnerDidDocumentWithSeq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// DataWithSeq defines a message for data with a sequence number for preventing replay attacks.
type RunnerDataWithSeq struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *RunnerDataWithSeq) Reset()         { *m = RunnerDataWithSeq{} }
func (m *RunnerDataWithSeq) String() string { return proto.CompactTextString(m) }
func (*RunnerDataWithSeq) ProtoMessage()    {}
func (*RunnerDataWithSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08b6879df6e1705, []int{2}
}
func (m *RunnerDataWithSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerDataWithSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerDataWithSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerDataWithSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDataWithSeq.Merge(m, src)
}
func (m *RunnerDataWithSeq) XXX_Size() int {
	return m.Size()
}
func (m *RunnerDataWithSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDataWithSeq.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDataWithSeq proto.InternalMessageInfo

func (m *RunnerDataWithSeq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RunnerDataWithSeq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*RunnerDidDocument)(nil), "soarchain.did.RunnerDidDocument")
	proto.RegisterType((*RunnerDidDocumentWithSeq)(nil), "soarchain.did.RunnerDidDocumentWithSeq")
	proto.RegisterType((*RunnerDataWithSeq)(nil), "soarchain.did.RunnerDataWithSeq")
}

func init() { proto.RegisterFile("did/runner_did_document.proto", fileDescriptor_f08b6879df6e1705) }

var fileDescriptor_f08b6879df6e1705 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x24, 0xe4, 0xcf, 0xa6, 0x14, 0xb1, 0x85, 0x6a, 0x15, 0x15, 0x13, 0x72, 0x69,
	0x4e, 0xb1, 0x08, 0x57, 0x2e, 0x2d, 0xbd, 0x55, 0x5c, 0xb6, 0x12, 0x48, 0x5c, 0xaa, 0xad, 0x67,
	0xa8, 0x57, 0x6d, 0x77, 0x5d, 0xef, 0xba, 0x22, 0x6f, 0xc1, 0x63, 0x71, 0xec, 0x11, 0x71, 0x40,
	0x28, 0x39, 0xf2, 0x12, 0xc8, 0x63, 0x27, 0x28, 0x31, 0xf4, 0xe6, 0x99, 0xdf, 0x37, 0xdf, 0xac,
	0x77, 0x3f, 0xf6, 0x02, 0x34, 0x44, 0x59, 0x6e, 0x0c, 0x66, 0xe7, 0xa0, 0xe1, 0x1c, 0x6c, 0x9c,
	0xdf, 0xa0, 0xf1, 0xd3, 0x34, 0xb3, 0xde, 0xf2, 0xc7, 0xce, 0xaa, 0x2c, 0x4e, 0x94, 0x36, 0x53,
	0xd0, 0x30, 0x7c, 0x76, 0x69, 0x2f, 0x2d, 0x91, 0xa8, 0xf8, 0x2a, 0x45, 0x43, 0xf2, 0x88, 0xaf,
	0x35, 0x1a, 0xff, 0x0f, 0x8f, 0xf1, 0xef, 0x16, 0x7b, 0x2a, 0x69, 0xc3, 0x89, 0x86, 0x93, 0x8a,
	0xf1, 0x5d, 0xd6, 0xd4, 0x20, 0x82, 0x51, 0x30, 0xe9, 0xcb, 0xa6, 0x06, 0xbe, 0xcf, 0x3a, 0x69,
	0x7e, 0x71, 0x8a, 0x73, 0xd1, 0xa4, 0x5e, 0x55, 0xf1, 0x43, 0xd6, 0xbe, 0xc2, 0xb9, 0x13, 0xad,
	0x51, 0x30, 0x19, 0xcc, 0xf6, 0xa6, 0x1b, 0x07, 0x9a, 0x9e, 0xe2, 0xdc, 0x49, 0x12, 0x70, 0xc9,
	0xf6, 0xee, 0x30, 0xd3, 0x9f, 0x75, 0xac, 0xbc, 0xb6, 0xe6, 0x3d, 0xfa, 0xc4, 0x82, 0x13, 0xed,
	0x51, 0x6b, 0x32, 0x98, 0xbd, 0xda, 0x9a, 0xfb, 0x50, 0x53, 0x4a, 0x5e, 0x9f, 0xe6, 0x86, 0x3d,
	0x51, 0xb9, 0x4f, 0xd0, 0xf8, 0xaa, 0xef, 0xc4, 0x23, 0xf2, 0x3b, 0x7c, 0xc0, 0x4f, 0xe2, 0x75,
	0xa9, 0x4d, 0x74, 0x7a, 0x7c, 0xf0, 0xe3, 0xe7, 0x4b, 0xf1, 0x3f, 0x2a, 0x77, 0x37, 0xdd, 0xf9,
	0x6b, 0xd6, 0x73, 0x98, 0xdd, 0xe9, 0x18, 0x9d, 0xe8, 0xd0, 0xa2, 0xfd, 0xad, 0x45, 0x67, 0x25,
	0x96, 0xdd, 0x4a, 0xc7, 0xc7, 0x6c, 0xc7, 0x79, 0x75, 0x85, 0x70, 0x74, 0x63, 0x73, 0xe3, 0x45,
	0x97, 0x6e, 0x6f, 0xa3, 0xc7, 0x0f, 0x58, 0x5f, 0xa7, 0x47, 0x00, 0x19, 0x3a, 0x27, 0x7a, 0x24,
	0xf8, 0xdb, 0xe0, 0x82, 0x75, 0xe3, 0x0c, 0x95, 0x47, 0x10, 0x7d, 0x62, 0xab, 0xb2, 0x20, 0x79,
	0x0a, 0x44, 0x58, 0x49, 0xaa, 0xb2, 0x20, 0xaa, 0xf2, 0x1b, 0x94, 0xa4, 0x2a, 0xc7, 0x9e, 0x89,
	0xda, 0x63, 0x7f, 0xd4, 0x3e, 0x39, 0xc3, 0x5b, 0xfe, 0x96, 0xf5, 0x56, 0xd9, 0xa0, 0x97, 0x1f,
	0xcc, 0x46, 0x5b, 0xbf, 0x57, 0x1b, 0x95, 0xeb, 0x09, 0x3e, 0x2c, 0x2e, 0xe7, 0x36, 0x47, 0x13,
	0x23, 0x65, 0xa4, 0x2d, 0xd7, 0xf5, 0xf8, 0xdd, 0x3a, 0x62, 0xca, 0xab, 0xd5, 0x3a, 0xce, 0xda,
	0xa0, 0xbc, 0xa2, 0x55, 0x3b, 0x92, 0xbe, 0x1f, 0x32, 0x39, 0x8e, 0xbe, 0x2d, 0xc2, 0xe0, 0x7e,
	0x11, 0x06, 0xbf, 0x16, 0x61, 0xf0, 0x75, 0x19, 0x36, 0xee, 0x97, 0x61, 0xe3, 0xfb, 0x32, 0x6c,
	0x7c, 0x7a, 0xbe, 0x3e, 0x65, 0xf4, 0x25, 0x2a, 0xd2, 0xee, 0xe7, 0x29, 0xba, 0x8b, 0x0e, 0x05,
	0xfc, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xd8, 0xe8, 0x0e, 0x45, 0x03, 0x00, 0x00,
}

func (m *RunnerDidDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerDidDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerDidDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Updated) > 0 {
		i -= len(m.Updated)
		copy(dAtA[i:], m.Updated)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.Updated)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StakedAmount) > 0 {
		i -= len(m.StakedAmount)
		copy(dAtA[i:], m.StakedAmount)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.StakedAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRunnerDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Authentications) > 0 {
		for iNdEx := len(m.Authentications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Authentications[iNdEx].Size()
				i -= size
				if _, err := m.Authentications[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintRunnerDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.VerificationMethods) > 0 {
		for iNdEx := len(m.VerificationMethods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerificationMethods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRunnerDidDocument(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRunnerDidDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunnerDidDocumentWithSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerDidDocumentWithSeq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerDidDocumentWithSeq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRunnerDidDocument(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunnerDataWithSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerDataWithSeq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerDataWithSeq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRunnerDidDocument(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRunnerDidDocument(dAtA []byte, offset int, v uint64) int {
	offset -= sovRunnerDidDocument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RunnerDidDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	if len(m.VerificationMethods) > 0 {
		for _, e := range m.VerificationMethods {
			l = e.Size()
			n += 1 + l + sovRunnerDidDocument(uint64(l))
		}
	}
	if len(m.Authentications) > 0 {
		for _, e := range m.Authentications {
			l = e.Size()
			n += 1 + l + sovRunnerDidDocument(uint64(l))
		}
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovRunnerDidDocument(uint64(l))
		}
	}
	l = len(m.StakedAmount)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	l = len(m.Updated)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	return n
}

func (m *RunnerDidDocumentWithSeq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovRunnerDidDocument(uint64(m.Sequence))
	}
	return n
}

func (m *RunnerDataWithSeq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRunnerDidDocument(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovRunnerDidDocument(uint64(m.Sequence))
	}
	return n
}

func sovRunnerDidDocument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRunnerDidDocument(x uint64) (n int) {
	return sovRunnerDidDocument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RunnerDidDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunnerDidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerDidDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerDidDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &Keys{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethods = append(m.VerificationMethods, &VerificationMethod{})
			if err := m.VerificationMethods[len(m.VerificationMethods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentications = append(m.Authentications, VerificationRelationship{})
			if err := m.Authentications[len(m.Authentications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRunnerDidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerDidDocumentWithSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunnerDidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerDidDocumentWithSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerDidDocumentWithSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &RunnerDidDocument{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRunnerDidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerDataWithSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunnerDidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerDataWithSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerDataWithSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRunnerDidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunnerDidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRunnerDidDocument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRunnerDidDocument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRunnerDidDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRunnerDidDocument
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRunnerDidDocument
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRunnerDidDocument
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRunnerDidDocument        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRunnerDidDocument          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRunnerDidDocument = fmt.Errorf("proto: unexpected end of group")
)
