// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poa/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetClientRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetClientRequest) Reset()         { *m = QueryGetClientRequest{} }
func (m *QueryGetClientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientRequest) ProtoMessage()    {}
func (*QueryGetClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{2}
}
func (m *QueryGetClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientRequest.Merge(m, src)
}
func (m *QueryGetClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientRequest proto.InternalMessageInfo

func (m *QueryGetClientRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetClientResponse struct {
	Client Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client"`
}

func (m *QueryGetClientResponse) Reset()         { *m = QueryGetClientResponse{} }
func (m *QueryGetClientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientResponse) ProtoMessage()    {}
func (*QueryGetClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{3}
}
func (m *QueryGetClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientResponse.Merge(m, src)
}
func (m *QueryGetClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientResponse proto.InternalMessageInfo

func (m *QueryGetClientResponse) GetClient() Client {
	if m != nil {
		return m.Client
	}
	return Client{}
}

type QueryAllClientRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientRequest) Reset()         { *m = QueryAllClientRequest{} }
func (m *QueryAllClientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientRequest) ProtoMessage()    {}
func (*QueryAllClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{4}
}
func (m *QueryAllClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientRequest.Merge(m, src)
}
func (m *QueryAllClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientRequest proto.InternalMessageInfo

func (m *QueryAllClientRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClientResponse struct {
	Client     []Client            `protobuf:"bytes,1,rep,name=client,proto3" json:"client"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientResponse) Reset()         { *m = QueryAllClientResponse{} }
func (m *QueryAllClientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientResponse) ProtoMessage()    {}
func (*QueryAllClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{5}
}
func (m *QueryAllClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientResponse.Merge(m, src)
}
func (m *QueryAllClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientResponse proto.InternalMessageInfo

func (m *QueryAllClientResponse) GetClient() []Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *QueryAllClientResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChallengerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetChallengerRequest) Reset()         { *m = QueryGetChallengerRequest{} }
func (m *QueryGetChallengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerRequest) ProtoMessage()    {}
func (*QueryGetChallengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{6}
}
func (m *QueryGetChallengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerRequest.Merge(m, src)
}
func (m *QueryGetChallengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerRequest proto.InternalMessageInfo

func (m *QueryGetChallengerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetChallengerResponse struct {
	Challenger Challenger `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger"`
}

func (m *QueryGetChallengerResponse) Reset()         { *m = QueryGetChallengerResponse{} }
func (m *QueryGetChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerResponse) ProtoMessage()    {}
func (*QueryGetChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{7}
}
func (m *QueryGetChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerResponse.Merge(m, src)
}
func (m *QueryGetChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerResponse proto.InternalMessageInfo

func (m *QueryGetChallengerResponse) GetChallenger() Challenger {
	if m != nil {
		return m.Challenger
	}
	return Challenger{}
}

type QueryAllChallengerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChallengerRequest) Reset()         { *m = QueryAllChallengerRequest{} }
func (m *QueryAllChallengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChallengerRequest) ProtoMessage()    {}
func (*QueryAllChallengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{8}
}
func (m *QueryAllChallengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChallengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChallengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChallengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChallengerRequest.Merge(m, src)
}
func (m *QueryAllChallengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChallengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChallengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChallengerRequest proto.InternalMessageInfo

func (m *QueryAllChallengerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChallengerResponse struct {
	Challenger []Challenger        `protobuf:"bytes,1,rep,name=challenger,proto3" json:"challenger"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChallengerResponse) Reset()         { *m = QueryAllChallengerResponse{} }
func (m *QueryAllChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChallengerResponse) ProtoMessage()    {}
func (*QueryAllChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{9}
}
func (m *QueryAllChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChallengerResponse.Merge(m, src)
}
func (m *QueryAllChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChallengerResponse proto.InternalMessageInfo

func (m *QueryAllChallengerResponse) GetChallenger() []Challenger {
	if m != nil {
		return m.Challenger
	}
	return nil
}

func (m *QueryAllChallengerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRunnerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRunnerRequest) Reset()         { *m = QueryGetRunnerRequest{} }
func (m *QueryGetRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerRequest) ProtoMessage()    {}
func (*QueryGetRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{10}
}
func (m *QueryGetRunnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerRequest.Merge(m, src)
}
func (m *QueryGetRunnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerRequest proto.InternalMessageInfo

func (m *QueryGetRunnerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetRunnerResponse struct {
	Runner Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner"`
}

func (m *QueryGetRunnerResponse) Reset()         { *m = QueryGetRunnerResponse{} }
func (m *QueryGetRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerResponse) ProtoMessage()    {}
func (*QueryGetRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{11}
}
func (m *QueryGetRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerResponse.Merge(m, src)
}
func (m *QueryGetRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerResponse proto.InternalMessageInfo

func (m *QueryGetRunnerResponse) GetRunner() Runner {
	if m != nil {
		return m.Runner
	}
	return Runner{}
}

type QueryAllRunnerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRunnerRequest) Reset()         { *m = QueryAllRunnerRequest{} }
func (m *QueryAllRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRunnerRequest) ProtoMessage()    {}
func (*QueryAllRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{12}
}
func (m *QueryAllRunnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRunnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRunnerRequest.Merge(m, src)
}
func (m *QueryAllRunnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRunnerRequest proto.InternalMessageInfo

func (m *QueryAllRunnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRunnerResponse struct {
	Runner     []Runner            `protobuf:"bytes,1,rep,name=runner,proto3" json:"runner"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRunnerResponse) Reset()         { *m = QueryAllRunnerResponse{} }
func (m *QueryAllRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRunnerResponse) ProtoMessage()    {}
func (*QueryAllRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{13}
}
func (m *QueryAllRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRunnerResponse.Merge(m, src)
}
func (m *QueryAllRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRunnerResponse proto.InternalMessageInfo

func (m *QueryAllRunnerResponse) GetRunner() []Runner {
	if m != nil {
		return m.Runner
	}
	return nil
}

func (m *QueryAllRunnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGuardRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGuardRequest) Reset()         { *m = QueryGetGuardRequest{} }
func (m *QueryGetGuardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardRequest) ProtoMessage()    {}
func (*QueryGetGuardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{14}
}
func (m *QueryGetGuardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardRequest.Merge(m, src)
}
func (m *QueryGetGuardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardRequest proto.InternalMessageInfo

func (m *QueryGetGuardRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetGuardResponse struct {
	Guard Guard `protobuf:"bytes,1,opt,name=guard,proto3" json:"guard"`
}

func (m *QueryGetGuardResponse) Reset()         { *m = QueryGetGuardResponse{} }
func (m *QueryGetGuardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardResponse) ProtoMessage()    {}
func (*QueryGetGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{15}
}
func (m *QueryGetGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardResponse.Merge(m, src)
}
func (m *QueryGetGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardResponse proto.InternalMessageInfo

func (m *QueryGetGuardResponse) GetGuard() Guard {
	if m != nil {
		return m.Guard
	}
	return Guard{}
}

type QueryAllGuardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardRequest) Reset()         { *m = QueryAllGuardRequest{} }
func (m *QueryAllGuardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardRequest) ProtoMessage()    {}
func (*QueryAllGuardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{16}
}
func (m *QueryAllGuardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardRequest.Merge(m, src)
}
func (m *QueryAllGuardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardRequest proto.InternalMessageInfo

func (m *QueryAllGuardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGuardResponse struct {
	Guard      []Guard             `protobuf:"bytes,1,rep,name=guard,proto3" json:"guard"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardResponse) Reset()         { *m = QueryAllGuardResponse{} }
func (m *QueryAllGuardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardResponse) ProtoMessage()    {}
func (*QueryAllGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{17}
}
func (m *QueryAllGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardResponse.Merge(m, src)
}
func (m *QueryAllGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardResponse proto.InternalMessageInfo

func (m *QueryAllGuardResponse) GetGuard() []Guard {
	if m != nil {
		return m.Guard
	}
	return nil
}

func (m *QueryAllGuardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetClientByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetClientByAddressRequest) Reset()         { *m = QueryGetClientByAddressRequest{} }
func (m *QueryGetClientByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientByAddressRequest) ProtoMessage()    {}
func (*QueryGetClientByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{18}
}
func (m *QueryGetClientByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientByAddressRequest.Merge(m, src)
}
func (m *QueryGetClientByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientByAddressRequest proto.InternalMessageInfo

func (m *QueryGetClientByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetClientByAddressResponse struct {
	Client *Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *QueryGetClientByAddressResponse) Reset()         { *m = QueryGetClientByAddressResponse{} }
func (m *QueryGetClientByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientByAddressResponse) ProtoMessage()    {}
func (*QueryGetClientByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{19}
}
func (m *QueryGetClientByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientByAddressResponse.Merge(m, src)
}
func (m *QueryGetClientByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientByAddressResponse proto.InternalMessageInfo

func (m *QueryGetClientByAddressResponse) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type QueryGetChallengerByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetChallengerByAddressRequest) Reset()         { *m = QueryGetChallengerByAddressRequest{} }
func (m *QueryGetChallengerByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerByAddressRequest) ProtoMessage()    {}
func (*QueryGetChallengerByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{20}
}
func (m *QueryGetChallengerByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerByAddressRequest.Merge(m, src)
}
func (m *QueryGetChallengerByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerByAddressRequest proto.InternalMessageInfo

func (m *QueryGetChallengerByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetChallengerByAddressResponse struct {
	Challenger *Challenger `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty"`
}

func (m *QueryGetChallengerByAddressResponse) Reset()         { *m = QueryGetChallengerByAddressResponse{} }
func (m *QueryGetChallengerByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerByAddressResponse) ProtoMessage()    {}
func (*QueryGetChallengerByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{21}
}
func (m *QueryGetChallengerByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerByAddressResponse.Merge(m, src)
}
func (m *QueryGetChallengerByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerByAddressResponse proto.InternalMessageInfo

func (m *QueryGetChallengerByAddressResponse) GetChallenger() *Challenger {
	if m != nil {
		return m.Challenger
	}
	return nil
}

type QueryGetVrfDataRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetVrfDataRequest) Reset()         { *m = QueryGetVrfDataRequest{} }
func (m *QueryGetVrfDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVrfDataRequest) ProtoMessage()    {}
func (*QueryGetVrfDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{22}
}
func (m *QueryGetVrfDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVrfDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVrfDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVrfDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVrfDataRequest.Merge(m, src)
}
func (m *QueryGetVrfDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVrfDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVrfDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVrfDataRequest proto.InternalMessageInfo

func (m *QueryGetVrfDataRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetVrfDataResponse struct {
	VrfData VrfData `protobuf:"bytes,1,opt,name=vrfData,proto3" json:"vrfData"`
}

func (m *QueryGetVrfDataResponse) Reset()         { *m = QueryGetVrfDataResponse{} }
func (m *QueryGetVrfDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVrfDataResponse) ProtoMessage()    {}
func (*QueryGetVrfDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{23}
}
func (m *QueryGetVrfDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVrfDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVrfDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVrfDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVrfDataResponse.Merge(m, src)
}
func (m *QueryGetVrfDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVrfDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVrfDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVrfDataResponse proto.InternalMessageInfo

func (m *QueryGetVrfDataResponse) GetVrfData() VrfData {
	if m != nil {
		return m.VrfData
	}
	return VrfData{}
}

type QueryAllVrfDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVrfDataRequest) Reset()         { *m = QueryAllVrfDataRequest{} }
func (m *QueryAllVrfDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVrfDataRequest) ProtoMessage()    {}
func (*QueryAllVrfDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{24}
}
func (m *QueryAllVrfDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVrfDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVrfDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVrfDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVrfDataRequest.Merge(m, src)
}
func (m *QueryAllVrfDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVrfDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVrfDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVrfDataRequest proto.InternalMessageInfo

func (m *QueryAllVrfDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVrfDataResponse struct {
	VrfData    []VrfData           `protobuf:"bytes,1,rep,name=vrfData,proto3" json:"vrfData"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVrfDataResponse) Reset()         { *m = QueryAllVrfDataResponse{} }
func (m *QueryAllVrfDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVrfDataResponse) ProtoMessage()    {}
func (*QueryAllVrfDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{25}
}
func (m *QueryAllVrfDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVrfDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVrfDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVrfDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVrfDataResponse.Merge(m, src)
}
func (m *QueryAllVrfDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVrfDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVrfDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVrfDataResponse proto.InternalMessageInfo

func (m *QueryAllVrfDataResponse) GetVrfData() []VrfData {
	if m != nil {
		return m.VrfData
	}
	return nil
}

func (m *QueryAllVrfDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVrfUserRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetVrfUserRequest) Reset()         { *m = QueryGetVrfUserRequest{} }
func (m *QueryGetVrfUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVrfUserRequest) ProtoMessage()    {}
func (*QueryGetVrfUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{26}
}
func (m *QueryGetVrfUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVrfUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVrfUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVrfUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVrfUserRequest.Merge(m, src)
}
func (m *QueryGetVrfUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVrfUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVrfUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVrfUserRequest proto.InternalMessageInfo

func (m *QueryGetVrfUserRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetVrfUserResponse struct {
	VrfUser VrfUser `protobuf:"bytes,1,opt,name=vrfUser,proto3" json:"vrfUser"`
}

func (m *QueryGetVrfUserResponse) Reset()         { *m = QueryGetVrfUserResponse{} }
func (m *QueryGetVrfUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVrfUserResponse) ProtoMessage()    {}
func (*QueryGetVrfUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{27}
}
func (m *QueryGetVrfUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVrfUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVrfUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVrfUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVrfUserResponse.Merge(m, src)
}
func (m *QueryGetVrfUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVrfUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVrfUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVrfUserResponse proto.InternalMessageInfo

func (m *QueryGetVrfUserResponse) GetVrfUser() VrfUser {
	if m != nil {
		return m.VrfUser
	}
	return VrfUser{}
}

type QueryAllVrfUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVrfUserRequest) Reset()         { *m = QueryAllVrfUserRequest{} }
func (m *QueryAllVrfUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVrfUserRequest) ProtoMessage()    {}
func (*QueryAllVrfUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{28}
}
func (m *QueryAllVrfUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVrfUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVrfUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVrfUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVrfUserRequest.Merge(m, src)
}
func (m *QueryAllVrfUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVrfUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVrfUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVrfUserRequest proto.InternalMessageInfo

func (m *QueryAllVrfUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVrfUserResponse struct {
	VrfUser    []VrfUser           `protobuf:"bytes,1,rep,name=vrfUser,proto3" json:"vrfUser"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVrfUserResponse) Reset()         { *m = QueryAllVrfUserResponse{} }
func (m *QueryAllVrfUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVrfUserResponse) ProtoMessage()    {}
func (*QueryAllVrfUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{29}
}
func (m *QueryAllVrfUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVrfUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVrfUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVrfUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVrfUserResponse.Merge(m, src)
}
func (m *QueryAllVrfUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVrfUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVrfUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVrfUserResponse proto.InternalMessageInfo

func (m *QueryAllVrfUserResponse) GetVrfUser() []VrfUser {
	if m != nil {
		return m.VrfUser
	}
	return nil
}

func (m *QueryAllVrfUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVerifyRandomNumberRequest struct {
	Pubkey  string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Vrv     string `protobuf:"bytes,3,opt,name=vrv,proto3" json:"vrv,omitempty"`
	Proof   string `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryVerifyRandomNumberRequest) Reset()         { *m = QueryVerifyRandomNumberRequest{} }
func (m *QueryVerifyRandomNumberRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyRandomNumberRequest) ProtoMessage()    {}
func (*QueryVerifyRandomNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{30}
}
func (m *QueryVerifyRandomNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyRandomNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyRandomNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyRandomNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyRandomNumberRequest.Merge(m, src)
}
func (m *QueryVerifyRandomNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyRandomNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyRandomNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyRandomNumberRequest proto.InternalMessageInfo

func (m *QueryVerifyRandomNumberRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *QueryVerifyRandomNumberRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *QueryVerifyRandomNumberRequest) GetVrv() string {
	if m != nil {
		return m.Vrv
	}
	return ""
}

func (m *QueryVerifyRandomNumberRequest) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type QueryVerifyRandomNumberResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryVerifyRandomNumberResponse) Reset()         { *m = QueryVerifyRandomNumberResponse{} }
func (m *QueryVerifyRandomNumberResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyRandomNumberResponse) ProtoMessage()    {}
func (*QueryVerifyRandomNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{31}
}
func (m *QueryVerifyRandomNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyRandomNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyRandomNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyRandomNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyRandomNumberResponse.Merge(m, src)
}
func (m *QueryVerifyRandomNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyRandomNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyRandomNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyRandomNumberResponse proto.InternalMessageInfo

func (m *QueryVerifyRandomNumberResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type QueryIsChallengeableRequest struct {
	ClientAddr string `protobuf:"bytes,1,opt,name=clientAddr,proto3" json:"clientAddr,omitempty"`
}

func (m *QueryIsChallengeableRequest) Reset()         { *m = QueryIsChallengeableRequest{} }
func (m *QueryIsChallengeableRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsChallengeableRequest) ProtoMessage()    {}
func (*QueryIsChallengeableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{32}
}
func (m *QueryIsChallengeableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsChallengeableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsChallengeableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsChallengeableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsChallengeableRequest.Merge(m, src)
}
func (m *QueryIsChallengeableRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsChallengeableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsChallengeableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsChallengeableRequest proto.InternalMessageInfo

func (m *QueryIsChallengeableRequest) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

type QueryIsChallengeableResponse struct {
	ResultBool            string `protobuf:"bytes,1,opt,name=resultBool,proto3" json:"resultBool,omitempty"`
	ChallengeabilityScore string `protobuf:"bytes,2,opt,name=challengeabilityScore,proto3" json:"challengeabilityScore,omitempty"`
}

func (m *QueryIsChallengeableResponse) Reset()         { *m = QueryIsChallengeableResponse{} }
func (m *QueryIsChallengeableResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsChallengeableResponse) ProtoMessage()    {}
func (*QueryIsChallengeableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{33}
}
func (m *QueryIsChallengeableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsChallengeableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsChallengeableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsChallengeableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsChallengeableResponse.Merge(m, src)
}
func (m *QueryIsChallengeableResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsChallengeableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsChallengeableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsChallengeableResponse proto.InternalMessageInfo

func (m *QueryIsChallengeableResponse) GetResultBool() string {
	if m != nil {
		return m.ResultBool
	}
	return ""
}

func (m *QueryIsChallengeableResponse) GetChallengeabilityScore() string {
	if m != nil {
		return m.ChallengeabilityScore
	}
	return ""
}

type QueryGetEpochDataRequest struct {
}

func (m *QueryGetEpochDataRequest) Reset()         { *m = QueryGetEpochDataRequest{} }
func (m *QueryGetEpochDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochDataRequest) ProtoMessage()    {}
func (*QueryGetEpochDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{34}
}
func (m *QueryGetEpochDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochDataRequest.Merge(m, src)
}
func (m *QueryGetEpochDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochDataRequest proto.InternalMessageInfo

type QueryGetEpochDataResponse struct {
	EpochData EpochData `protobuf:"bytes,1,opt,name=EpochData,proto3" json:"EpochData"`
}

func (m *QueryGetEpochDataResponse) Reset()         { *m = QueryGetEpochDataResponse{} }
func (m *QueryGetEpochDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochDataResponse) ProtoMessage()    {}
func (*QueryGetEpochDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{35}
}
func (m *QueryGetEpochDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochDataResponse.Merge(m, src)
}
func (m *QueryGetEpochDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochDataResponse proto.InternalMessageInfo

func (m *QueryGetEpochDataResponse) GetEpochData() EpochData {
	if m != nil {
		return m.EpochData
	}
	return EpochData{}
}

type QueryGetMotusWalletRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetMotusWalletRequest) Reset()         { *m = QueryGetMotusWalletRequest{} }
func (m *QueryGetMotusWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMotusWalletRequest) ProtoMessage()    {}
func (*QueryGetMotusWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{36}
}
func (m *QueryGetMotusWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMotusWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMotusWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMotusWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMotusWalletRequest.Merge(m, src)
}
func (m *QueryGetMotusWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMotusWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMotusWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMotusWalletRequest proto.InternalMessageInfo

func (m *QueryGetMotusWalletRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetMotusWalletResponse struct {
	MotusWallet MotusWallet `protobuf:"bytes,1,opt,name=motusWallet,proto3" json:"motusWallet"`
}

func (m *QueryGetMotusWalletResponse) Reset()         { *m = QueryGetMotusWalletResponse{} }
func (m *QueryGetMotusWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMotusWalletResponse) ProtoMessage()    {}
func (*QueryGetMotusWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{37}
}
func (m *QueryGetMotusWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMotusWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMotusWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMotusWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMotusWalletResponse.Merge(m, src)
}
func (m *QueryGetMotusWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMotusWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMotusWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMotusWalletResponse proto.InternalMessageInfo

func (m *QueryGetMotusWalletResponse) GetMotusWallet() MotusWallet {
	if m != nil {
		return m.MotusWallet
	}
	return MotusWallet{}
}

type QueryAllMotusWalletRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMotusWalletRequest) Reset()         { *m = QueryAllMotusWalletRequest{} }
func (m *QueryAllMotusWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMotusWalletRequest) ProtoMessage()    {}
func (*QueryAllMotusWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{38}
}
func (m *QueryAllMotusWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMotusWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMotusWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMotusWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMotusWalletRequest.Merge(m, src)
}
func (m *QueryAllMotusWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMotusWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMotusWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMotusWalletRequest proto.InternalMessageInfo

func (m *QueryAllMotusWalletRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMotusWalletResponse struct {
	MotusWallet []MotusWallet       `protobuf:"bytes,1,rep,name=motusWallet,proto3" json:"motusWallet"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMotusWalletResponse) Reset()         { *m = QueryAllMotusWalletResponse{} }
func (m *QueryAllMotusWalletResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMotusWalletResponse) ProtoMessage()    {}
func (*QueryAllMotusWalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{39}
}
func (m *QueryAllMotusWalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMotusWalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMotusWalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMotusWalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMotusWalletResponse.Merge(m, src)
}
func (m *QueryAllMotusWalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMotusWalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMotusWalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMotusWalletResponse proto.InternalMessageInfo

func (m *QueryAllMotusWalletResponse) GetMotusWallet() []MotusWallet {
	if m != nil {
		return m.MotusWallet
	}
	return nil
}

func (m *QueryAllMotusWalletResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMasterKeyRequest struct {
}

func (m *QueryGetMasterKeyRequest) Reset()         { *m = QueryGetMasterKeyRequest{} }
func (m *QueryGetMasterKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMasterKeyRequest) ProtoMessage()    {}
func (*QueryGetMasterKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{40}
}
func (m *QueryGetMasterKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMasterKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMasterKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMasterKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMasterKeyRequest.Merge(m, src)
}
func (m *QueryGetMasterKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMasterKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMasterKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMasterKeyRequest proto.InternalMessageInfo

type QueryGetMasterKeyResponse struct {
	MasterKey MasterKey `protobuf:"bytes,1,opt,name=MasterKey,proto3" json:"MasterKey"`
}

func (m *QueryGetMasterKeyResponse) Reset()         { *m = QueryGetMasterKeyResponse{} }
func (m *QueryGetMasterKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMasterKeyResponse) ProtoMessage()    {}
func (*QueryGetMasterKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{41}
}
func (m *QueryGetMasterKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMasterKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMasterKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMasterKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMasterKeyResponse.Merge(m, src)
}
func (m *QueryGetMasterKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMasterKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMasterKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMasterKeyResponse proto.InternalMessageInfo

func (m *QueryGetMasterKeyResponse) GetMasterKey() MasterKey {
	if m != nil {
		return m.MasterKey
	}
	return MasterKey{}
}

type QueryGetFactoryKeysRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFactoryKeysRequest) Reset()         { *m = QueryGetFactoryKeysRequest{} }
func (m *QueryGetFactoryKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFactoryKeysRequest) ProtoMessage()    {}
func (*QueryGetFactoryKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{42}
}
func (m *QueryGetFactoryKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFactoryKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFactoryKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFactoryKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFactoryKeysRequest.Merge(m, src)
}
func (m *QueryGetFactoryKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFactoryKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFactoryKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFactoryKeysRequest proto.InternalMessageInfo

func (m *QueryGetFactoryKeysRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFactoryKeysResponse struct {
	FactoryKeys FactoryKeys `protobuf:"bytes,1,opt,name=FactoryKeys,proto3" json:"FactoryKeys"`
}

func (m *QueryGetFactoryKeysResponse) Reset()         { *m = QueryGetFactoryKeysResponse{} }
func (m *QueryGetFactoryKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFactoryKeysResponse) ProtoMessage()    {}
func (*QueryGetFactoryKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{43}
}
func (m *QueryGetFactoryKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFactoryKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFactoryKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFactoryKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFactoryKeysResponse.Merge(m, src)
}
func (m *QueryGetFactoryKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFactoryKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFactoryKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFactoryKeysResponse proto.InternalMessageInfo

func (m *QueryGetFactoryKeysResponse) GetFactoryKeys() FactoryKeys {
	if m != nil {
		return m.FactoryKeys
	}
	return FactoryKeys{}
}

type QueryAllFactoryKeysRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFactoryKeysRequest) Reset()         { *m = QueryAllFactoryKeysRequest{} }
func (m *QueryAllFactoryKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFactoryKeysRequest) ProtoMessage()    {}
func (*QueryAllFactoryKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{44}
}
func (m *QueryAllFactoryKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFactoryKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFactoryKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFactoryKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFactoryKeysRequest.Merge(m, src)
}
func (m *QueryAllFactoryKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFactoryKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFactoryKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFactoryKeysRequest proto.InternalMessageInfo

func (m *QueryAllFactoryKeysRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFactoryKeysResponse struct {
	FactoryKeys []FactoryKeys       `protobuf:"bytes,1,rep,name=FactoryKeys,proto3" json:"FactoryKeys"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFactoryKeysResponse) Reset()         { *m = QueryAllFactoryKeysResponse{} }
func (m *QueryAllFactoryKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFactoryKeysResponse) ProtoMessage()    {}
func (*QueryAllFactoryKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{45}
}
func (m *QueryAllFactoryKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFactoryKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFactoryKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFactoryKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFactoryKeysResponse.Merge(m, src)
}
func (m *QueryAllFactoryKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFactoryKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFactoryKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFactoryKeysResponse proto.InternalMessageInfo

func (m *QueryAllFactoryKeysResponse) GetFactoryKeys() []FactoryKeys {
	if m != nil {
		return m.FactoryKeys
	}
	return nil
}

func (m *QueryAllFactoryKeysResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRunnerByIpRequest struct {
	IpAddress string `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (m *QueryGetRunnerByIpRequest) Reset()         { *m = QueryGetRunnerByIpRequest{} }
func (m *QueryGetRunnerByIpRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerByIpRequest) ProtoMessage()    {}
func (*QueryGetRunnerByIpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{46}
}
func (m *QueryGetRunnerByIpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerByIpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerByIpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerByIpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerByIpRequest.Merge(m, src)
}
func (m *QueryGetRunnerByIpRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerByIpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerByIpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerByIpRequest proto.InternalMessageInfo

func (m *QueryGetRunnerByIpRequest) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

type QueryGetRunnerByIpResponse struct {
	Runner *Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner,omitempty"`
}

func (m *QueryGetRunnerByIpResponse) Reset()         { *m = QueryGetRunnerByIpResponse{} }
func (m *QueryGetRunnerByIpResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerByIpResponse) ProtoMessage()    {}
func (*QueryGetRunnerByIpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{47}
}
func (m *QueryGetRunnerByIpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerByIpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerByIpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerByIpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerByIpResponse.Merge(m, src)
}
func (m *QueryGetRunnerByIpResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerByIpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerByIpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerByIpResponse proto.InternalMessageInfo

func (m *QueryGetRunnerByIpResponse) GetRunner() *Runner {
	if m != nil {
		return m.Runner
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "soarchain.poa.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "soarchain.poa.QueryParamsResponse")
	proto.RegisterType((*QueryGetClientRequest)(nil), "soarchain.poa.QueryGetClientRequest")
	proto.RegisterType((*QueryGetClientResponse)(nil), "soarchain.poa.QueryGetClientResponse")
	proto.RegisterType((*QueryAllClientRequest)(nil), "soarchain.poa.QueryAllClientRequest")
	proto.RegisterType((*QueryAllClientResponse)(nil), "soarchain.poa.QueryAllClientResponse")
	proto.RegisterType((*QueryGetChallengerRequest)(nil), "soarchain.poa.QueryGetChallengerRequest")
	proto.RegisterType((*QueryGetChallengerResponse)(nil), "soarchain.poa.QueryGetChallengerResponse")
	proto.RegisterType((*QueryAllChallengerRequest)(nil), "soarchain.poa.QueryAllChallengerRequest")
	proto.RegisterType((*QueryAllChallengerResponse)(nil), "soarchain.poa.QueryAllChallengerResponse")
	proto.RegisterType((*QueryGetRunnerRequest)(nil), "soarchain.poa.QueryGetRunnerRequest")
	proto.RegisterType((*QueryGetRunnerResponse)(nil), "soarchain.poa.QueryGetRunnerResponse")
	proto.RegisterType((*QueryAllRunnerRequest)(nil), "soarchain.poa.QueryAllRunnerRequest")
	proto.RegisterType((*QueryAllRunnerResponse)(nil), "soarchain.poa.QueryAllRunnerResponse")
	proto.RegisterType((*QueryGetGuardRequest)(nil), "soarchain.poa.QueryGetGuardRequest")
	proto.RegisterType((*QueryGetGuardResponse)(nil), "soarchain.poa.QueryGetGuardResponse")
	proto.RegisterType((*QueryAllGuardRequest)(nil), "soarchain.poa.QueryAllGuardRequest")
	proto.RegisterType((*QueryAllGuardResponse)(nil), "soarchain.poa.QueryAllGuardResponse")
	proto.RegisterType((*QueryGetClientByAddressRequest)(nil), "soarchain.poa.QueryGetClientByAddressRequest")
	proto.RegisterType((*QueryGetClientByAddressResponse)(nil), "soarchain.poa.QueryGetClientByAddressResponse")
	proto.RegisterType((*QueryGetChallengerByAddressRequest)(nil), "soarchain.poa.QueryGetChallengerByAddressRequest")
	proto.RegisterType((*QueryGetChallengerByAddressResponse)(nil), "soarchain.poa.QueryGetChallengerByAddressResponse")
	proto.RegisterType((*QueryGetVrfDataRequest)(nil), "soarchain.poa.QueryGetVrfDataRequest")
	proto.RegisterType((*QueryGetVrfDataResponse)(nil), "soarchain.poa.QueryGetVrfDataResponse")
	proto.RegisterType((*QueryAllVrfDataRequest)(nil), "soarchain.poa.QueryAllVrfDataRequest")
	proto.RegisterType((*QueryAllVrfDataResponse)(nil), "soarchain.poa.QueryAllVrfDataResponse")
	proto.RegisterType((*QueryGetVrfUserRequest)(nil), "soarchain.poa.QueryGetVrfUserRequest")
	proto.RegisterType((*QueryGetVrfUserResponse)(nil), "soarchain.poa.QueryGetVrfUserResponse")
	proto.RegisterType((*QueryAllVrfUserRequest)(nil), "soarchain.poa.QueryAllVrfUserRequest")
	proto.RegisterType((*QueryAllVrfUserResponse)(nil), "soarchain.poa.QueryAllVrfUserResponse")
	proto.RegisterType((*QueryVerifyRandomNumberRequest)(nil), "soarchain.poa.QueryVerifyRandomNumberRequest")
	proto.RegisterType((*QueryVerifyRandomNumberResponse)(nil), "soarchain.poa.QueryVerifyRandomNumberResponse")
	proto.RegisterType((*QueryIsChallengeableRequest)(nil), "soarchain.poa.QueryIsChallengeableRequest")
	proto.RegisterType((*QueryIsChallengeableResponse)(nil), "soarchain.poa.QueryIsChallengeableResponse")
	proto.RegisterType((*QueryGetEpochDataRequest)(nil), "soarchain.poa.QueryGetEpochDataRequest")
	proto.RegisterType((*QueryGetEpochDataResponse)(nil), "soarchain.poa.QueryGetEpochDataResponse")
	proto.RegisterType((*QueryGetMotusWalletRequest)(nil), "soarchain.poa.QueryGetMotusWalletRequest")
	proto.RegisterType((*QueryGetMotusWalletResponse)(nil), "soarchain.poa.QueryGetMotusWalletResponse")
	proto.RegisterType((*QueryAllMotusWalletRequest)(nil), "soarchain.poa.QueryAllMotusWalletRequest")
	proto.RegisterType((*QueryAllMotusWalletResponse)(nil), "soarchain.poa.QueryAllMotusWalletResponse")
	proto.RegisterType((*QueryGetMasterKeyRequest)(nil), "soarchain.poa.QueryGetMasterKeyRequest")
	proto.RegisterType((*QueryGetMasterKeyResponse)(nil), "soarchain.poa.QueryGetMasterKeyResponse")
	proto.RegisterType((*QueryGetFactoryKeysRequest)(nil), "soarchain.poa.QueryGetFactoryKeysRequest")
	proto.RegisterType((*QueryGetFactoryKeysResponse)(nil), "soarchain.poa.QueryGetFactoryKeysResponse")
	proto.RegisterType((*QueryAllFactoryKeysRequest)(nil), "soarchain.poa.QueryAllFactoryKeysRequest")
	proto.RegisterType((*QueryAllFactoryKeysResponse)(nil), "soarchain.poa.QueryAllFactoryKeysResponse")
	proto.RegisterType((*QueryGetRunnerByIpRequest)(nil), "soarchain.poa.QueryGetRunnerByIpRequest")
	proto.RegisterType((*QueryGetRunnerByIpResponse)(nil), "soarchain.poa.QueryGetRunnerByIpResponse")
}

func init() { proto.RegisterFile("poa/query.proto", fileDescriptor_9a9dd27e9dc4e2f4) }

var fileDescriptor_9a9dd27e9dc4e2f4 = []byte{
	// 1804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x6f, 0xd4, 0x46,
	0x1b, 0x8f, 0xb3, 0x24, 0x90, 0x41, 0x7c, 0x68, 0xde, 0x24, 0x24, 0x26, 0x6c, 0xc8, 0x84, 0x8f,
	0xf0, 0x91, 0x35, 0x09, 0x08, 0x09, 0xf4, 0xbe, 0x6f, 0x95, 0x94, 0x82, 0x28, 0xa5, 0x82, 0xad,
	0x4a, 0xd5, 0x4a, 0xed, 0xe2, 0xec, 0x3a, 0x8b, 0xc5, 0xee, 0xda, 0xd8, 0xde, 0xc0, 0x76, 0xd9,
	0x43, 0x7b, 0xe9, 0x05, 0x55, 0xfd, 0x90, 0x2a, 0xb5, 0xa7, 0x9e, 0x7a, 0x28, 0x7f, 0x42, 0x4f,
	0xbd, 0x71, 0x44, 0xea, 0xa5, 0xa7, 0xaa, 0x82, 0xfe, 0x21, 0x95, 0x67, 0x1e, 0x7b, 0xc6, 0x63,
	0x8f, 0xd7, 0x91, 0x96, 0xdb, 0xfa, 0xf1, 0xf3, 0xcc, 0xf3, 0x7b, 0xbe, 0xc6, 0xf3, 0x9b, 0x45,
	0x87, 0x5c, 0xc7, 0x34, 0x1e, 0x75, 0x2d, 0xaf, 0x57, 0x71, 0x3d, 0x27, 0x70, 0xf0, 0x01, 0xdf,
	0x31, 0xbd, 0xfa, 0x03, 0xd3, 0xee, 0x54, 0x5c, 0xc7, 0xd4, 0xa7, 0x9b, 0x4e, 0xd3, 0xa1, 0x6f,
	0x8c, 0xf0, 0x17, 0x53, 0xd2, 0x17, 0x9a, 0x8e, 0xd3, 0x6c, 0x59, 0x86, 0xe9, 0xda, 0x86, 0xd9,
	0xe9, 0x38, 0x81, 0x19, 0xd8, 0x4e, 0xc7, 0x87, 0xb7, 0x67, 0xeb, 0x8e, 0xdf, 0x76, 0x7c, 0x63,
	0xcb, 0xf4, 0x2d, 0xb6, 0xb6, 0xb1, 0xb3, 0xb6, 0x65, 0x05, 0xe6, 0x9a, 0xe1, 0x9a, 0x4d, 0xbb,
	0x43, 0x95, 0x41, 0xf7, 0x70, 0xe8, 0xdf, 0x35, 0x3d, 0xb3, 0x1d, 0x59, 0x53, 0x44, 0xcd, 0xae,
	0xe9, 0x35, 0x40, 0x80, 0x43, 0xc1, 0x8e, 0xb7, 0x5d, 0x6b, 0x98, 0x81, 0x29, 0xcb, 0xba, 0xbe,
	0xe5, 0x81, 0x6c, 0x3a, 0x94, 0x59, 0xae, 0x53, 0x7f, 0x20, 0x6a, 0xce, 0x86, 0xd2, 0xb6, 0x13,
	0x74, 0xfd, 0xda, 0x63, 0xb3, 0xd5, 0xb2, 0x02, 0x51, 0xbb, 0x6d, 0xfa, 0x81, 0xe5, 0xd5, 0x1e,
	0x5a, 0x3d, 0x51, 0x7b, 0xdb, 0xac, 0x07, 0x8e, 0xd7, 0x0b, 0xc5, 0xbe, 0x08, 0xd3, 0xeb, 0x76,
	0x3a, 0xb1, 0x37, 0x2a, 0xa9, 0xb7, 0x6c, 0xab, 0x93, 0x58, 0xb1, 0xfe, 0x20, 0x74, 0xd2, 0x69,
	0x46, 0x7a, 0x64, 0x1a, 0xe1, 0xbb, 0x61, 0x0a, 0xee, 0xd0, 0x18, 0xab, 0xd6, 0xa3, 0xae, 0xe5,
	0x07, 0xe4, 0x5d, 0xf4, 0x9f, 0x84, 0xd4, 0x77, 0x9d, 0x8e, 0x6f, 0xe1, 0x8b, 0x68, 0x92, 0xe5,
	0x62, 0x4e, 0x3b, 0xae, 0xad, 0xec, 0x5f, 0x9f, 0xa9, 0x24, 0xaa, 0x51, 0x61, 0xea, 0x9b, 0x7b,
	0x5e, 0xfc, 0xb5, 0x38, 0x56, 0x05, 0x55, 0xb2, 0x8a, 0x66, 0xe8, 0x5a, 0x37, 0xac, 0xe0, 0x6d,
	0x8a, 0x07, 0x9c, 0xe0, 0x69, 0x34, 0x61, 0x77, 0x1a, 0xd6, 0x13, 0xba, 0xd8, 0x54, 0x95, 0x3d,
	0x90, 0xdb, 0x68, 0x56, 0x56, 0xe7, 0xde, 0x59, 0x40, 0x0a, 0xef, 0x4c, 0x3d, 0xf2, 0xce, 0x54,
	0x49, 0x0d, 0xbc, 0x6f, 0xb4, 0x5a, 0x49, 0xef, 0xd7, 0x11, 0xe2, 0xd5, 0x86, 0x15, 0x4f, 0x55,
	0x58, 0x6b, 0x54, 0xc2, 0xd6, 0xa8, 0xb0, 0xb6, 0x83, 0xd6, 0xa8, 0xdc, 0x31, 0x9b, 0x16, 0xd8,
	0x56, 0x05, 0x4b, 0xf2, 0x83, 0x06, 0x80, 0x05, 0x0f, 0x19, 0x80, 0x4b, 0x05, 0x01, 0xe3, 0x1b,
	0x09, 0x5c, 0xe3, 0x14, 0xd7, 0xe9, 0xa1, 0xb8, 0x98, 0xc7, 0x04, 0xb0, 0x35, 0x34, 0x1f, 0x27,
	0x32, 0xae, 0x7a, 0x7e, 0xee, 0x3f, 0x45, 0x7a, 0x96, 0x09, 0x84, 0xf3, 0x16, 0x42, 0xbc, 0x7d,
	0x20, 0x63, 0xf3, 0x72, 0x48, 0xb1, 0x02, 0x84, 0x25, 0x98, 0x90, 0x3a, 0x20, 0x0a, 0x33, 0x95,
	0x42, 0x34, 0xaa, 0x7a, 0xfc, 0xa2, 0x41, 0x10, 0x92, 0x17, 0x45, 0x10, 0xa5, 0x5d, 0x06, 0x31,
	0xba, 0xfa, 0x08, 0x73, 0x51, 0xa5, 0x93, 0x5b, 0x78, 0x2e, 0x22, 0x75, 0xde, 0x66, 0x6c, 0xf4,
	0x15, 0x73, 0xc1, 0xd4, 0xa3, 0x36, 0x63, 0xaa, 0xe2, 0x5c, 0x24, 0xbd, 0xbf, 0x89, 0xb9, 0xc8,
	0x01, 0x5c, 0x2a, 0x08, 0x78, 0x74, 0x79, 0x3f, 0x8f, 0xa6, 0xa3, 0x44, 0xde, 0x08, 0xb7, 0xf1,
	0xfc, 0xb4, 0xdf, 0xe4, 0x55, 0x02, 0x6d, 0x08, 0xe2, 0x02, 0x9a, 0xa0, 0x5f, 0x01, 0x48, 0xd1,
	0xb4, 0x14, 0x03, 0x55, 0x86, 0x10, 0x98, 0x22, 0xf9, 0x0c, 0x1c, 0x6f, 0xb4, 0x5a, 0x09, 0xc7,
	0xa3, 0xca, 0xf8, 0x77, 0x1a, 0xaf, 0xa9, 0x12, 0x6b, 0xa9, 0x10, 0xd6, 0xd1, 0x65, 0xfb, 0x2a,
	0x2a, 0x27, 0xb7, 0xf3, 0xcd, 0xde, 0x46, 0xa3, 0xe1, 0x59, 0x7e, 0xf4, 0xad, 0xc1, 0x73, 0x68,
	0xaf, 0xc9, 0x24, 0x90, 0xf9, 0xe8, 0x91, 0xdc, 0x41, 0x8b, 0x4a, 0x5b, 0x88, 0x6c, 0xb5, 0xd0,
	0x37, 0x21, 0xfe, 0x1a, 0xfc, 0x1f, 0x91, 0xf4, 0x06, 0xb7, 0x0b, 0x44, 0xf7, 0xd1, 0x72, 0xae,
	0x3d, 0xa0, 0xba, 0xb2, 0xab, 0x9d, 0x32, 0xb1, 0x47, 0x56, 0xf8, 0x98, 0xdf, 0xf3, 0xb6, 0xaf,
	0x99, 0x81, 0x99, 0xdf, 0x9f, 0x77, 0xd1, 0x91, 0x94, 0x3e, 0xa0, 0xb8, 0x8c, 0xf6, 0xee, 0x30,
	0x11, 0x40, 0x98, 0x95, 0x20, 0x80, 0x01, 0x54, 0x3e, 0x52, 0x26, 0xf7, 0xf9, 0xe0, 0x4a, 0x10,
	0x46, 0xd5, 0xa9, 0x3f, 0x69, 0x80, 0x5a, 0x74, 0x91, 0x85, 0xba, 0x54, 0x18, 0xf5, 0xe8, 0x3a,
	0x36, 0x59, 0x81, 0x0f, 0xfd, 0x61, 0x1b, 0x73, 0xb2, 0x02, 0x4c, 0x3f, 0x11, 0x4b, 0x28, 0x52,
	0x57, 0x20, 0x7c, 0x2b, 0xc4, 0x12, 0x3e, 0x4a, 0x15, 0x10, 0x21, 0xbc, 0xa1, 0x0a, 0xa8, 0x51,
	0x97, 0x0a, 0xa3, 0x1e, 0x5d, 0x05, 0x3e, 0x87, 0x3d, 0xe3, 0x9e, 0xe5, 0xd9, 0xdb, 0xbd, 0xaa,
	0xd9, 0x69, 0x38, 0xed, 0xf7, 0xbb, 0xed, 0x2d, 0x9e, 0x86, 0x59, 0x34, 0xe9, 0x76, 0xb7, 0x1e,
	0x5a, 0x3d, 0x28, 0x05, 0x3c, 0x85, 0x93, 0xdb, 0xb6, 0x7c, 0xdf, 0x6c, 0x5a, 0xd4, 0xff, 0x54,
	0x35, 0x7a, 0xc4, 0x87, 0x51, 0x69, 0xc7, 0xdb, 0x99, 0x2b, 0x51, 0x69, 0xf8, 0x33, 0xac, 0xa6,
	0xeb, 0x39, 0xce, 0xf6, 0xdc, 0x1e, 0x56, 0x4d, 0xfa, 0x40, 0xae, 0xc0, 0x9e, 0x93, 0xe5, 0x1b,
	0xf2, 0x33, 0x8b, 0x26, 0x3d, 0xcb, 0xef, 0xb6, 0xd8, 0x9e, 0xb3, 0xaf, 0x0a, 0x4f, 0xe4, 0x7f,
	0xe8, 0x28, 0x35, 0xbd, 0xe9, 0xc7, 0xb3, 0x6d, 0x6e, 0xb5, 0xa2, 0xf4, 0xe3, 0x32, 0x42, 0x6c,
	0x17, 0x0a, 0x77, 0x0b, 0xc0, 0x2d, 0x48, 0x48, 0x80, 0x16, 0xb2, 0xcd, 0xc1, 0x6d, 0x19, 0x21,
	0xe6, 0x68, 0xd3, 0x71, 0x5a, 0x91, 0x3d, 0x97, 0xe0, 0x4b, 0x68, 0xa6, 0xce, 0x0d, 0xed, 0x96,
	0x1d, 0xf4, 0x3e, 0xa8, 0x3b, 0x5e, 0x94, 0x89, 0xec, 0x97, 0x44, 0x47, 0x73, 0x51, 0xf7, 0xbe,
	0x13, 0x72, 0x13, 0x61, 0xdc, 0xc9, 0xc7, 0xfc, 0x04, 0x29, 0xbc, 0x03, 0x38, 0xff, 0x45, 0x53,
	0xb1, 0x10, 0x1a, 0x71, 0x4e, 0xea, 0x93, 0xf8, 0x3d, 0x74, 0x0a, 0x37, 0x20, 0xeb, 0xfc, 0xa4,
	0x79, 0x3b, 0x24, 0x3f, 0x1f, 0x51, 0xee, 0x93, 0x3f, 0x68, 0x26, 0xe4, 0x57, 0xb6, 0x01, 0x40,
	0x9b, 0x68, 0x7f, 0x9b, 0x8b, 0x01, 0x92, 0x2e, 0x41, 0x12, 0x0c, 0x01, 0x94, 0x68, 0x44, 0x1a,
	0xfc, 0xec, 0x98, 0x01, 0x6b, 0x54, 0xc3, 0xf7, 0xab, 0x06, 0x91, 0xc8, 0x6e, 0x54, 0x91, 0x94,
	0x76, 0x1d, 0xc9, 0xe8, 0x86, 0x51, 0x68, 0x90, 0xdb, 0x94, 0x8e, 0xde, 0xb2, 0x7a, 0x19, 0x0d,
	0x22, 0xbc, 0xe3, 0x0d, 0x12, 0x0b, 0x15, 0x0d, 0x12, 0xbf, 0x8f, 0x1a, 0x24, 0x16, 0x90, 0xf3,
	0xbc, 0x41, 0xae, 0x33, 0xbe, 0x7b, 0xcb, 0xea, 0xc5, 0x5f, 0xe8, 0x83, 0x68, 0xdc, 0x66, 0x27,
	0xaf, 0x3d, 0xd5, 0x71, 0xbb, 0x21, 0xb6, 0x46, 0x42, 0x9b, 0x27, 0x54, 0x10, 0x2b, 0x5a, 0x43,
	0xd0, 0x88, 0x12, 0x2a, 0x88, 0xc4, 0xd6, 0xc8, 0x00, 0xf4, 0x26, 0x5a, 0xa3, 0x50, 0x24, 0xa5,
	0x5d, 0x47, 0x32, 0xba, 0xd6, 0xb8, 0xc2, 0xcb, 0x0f, 0x47, 0xf6, 0xde, 0x4d, 0x37, 0xca, 0xc8,
	0x02, 0x9a, 0xb2, 0xdd, 0x8d, 0xc4, 0x31, 0x8a, 0x0b, 0xc8, 0x2d, 0x5e, 0x5e, 0xd1, 0x94, 0x9f,
	0xea, 0x0a, 0x30, 0x9a, 0x88, 0x1a, 0xac, 0x3f, 0xd7, 0xd1, 0x04, 0x5d, 0x0d, 0x77, 0xd0, 0x24,
	0xbb, 0x83, 0xc0, 0x4b, 0x92, 0x49, 0xfa, 0x92, 0x43, 0x27, 0x79, 0x2a, 0x0c, 0x09, 0x39, 0xf6,
	0xe5, 0x1f, 0xff, 0x7c, 0x3f, 0x7e, 0x04, 0xcf, 0x18, 0xb1, 0xae, 0xc1, 0xaf, 0x84, 0xf0, 0x53,
	0x34, 0xc9, 0x4e, 0x98, 0xf8, 0x44, 0xd6, 0x62, 0xf2, 0x95, 0x87, 0x7e, 0x72, 0x88, 0x16, 0x78,
	0x3d, 0x49, 0xbd, 0x2e, 0xe2, 0x63, 0x92, 0x57, 0xf6, 0xb5, 0x30, 0xfa, 0x74, 0x3f, 0x1c, 0xe0,
	0xc7, 0x68, 0x8a, 0x19, 0x6e, 0xb4, 0x5a, 0xd9, 0x00, 0xe4, 0x5b, 0x8f, 0x6c, 0x00, 0xa9, 0x9b,
	0x0b, 0x65, 0xd8, 0x70, 0x47, 0xf1, 0x4c, 0x43, 0x88, 0x9f, 0x5f, 0xf1, 0x8a, 0x2a, 0x2a, 0x99,
	0xe4, 0xeb, 0x67, 0x0a, 0x68, 0x02, 0x84, 0x33, 0x14, 0xc2, 0x32, 0x5e, 0x92, 0x21, 0xc4, 0xaa,
	0x71, 0x1e, 0xbe, 0xd2, 0xd0, 0x01, 0xbe, 0x42, 0x98, 0x8c, 0x15, 0x55, 0x98, 0xc5, 0x10, 0x65,
	0x5e, 0x1d, 0x90, 0x25, 0x8a, 0xe8, 0x28, 0x9e, 0x57, 0x22, 0x0a, 0xfb, 0x81, 0xf5, 0xa6, 0xb2,
	0x1f, 0x12, 0x64, 0x5b, 0xd9, 0x0f, 0x49, 0xc2, 0xac, 0xec, 0x07, 0xd6, 0xff, 0x62, 0x3f, 0x30,
	0xc3, 0xbc, 0x7e, 0x28, 0x00, 0x20, 0xc5, 0xd8, 0x95, 0xfd, 0x00, 0xdc, 0xfc, 0x09, 0x9a, 0xa0,
	0x1c, 0x12, 0x2f, 0x2b, 0xe2, 0x11, 0xf9, 0xae, 0x7e, 0x22, 0x5f, 0x09, 0x5c, 0x9e, 0xa0, 0x2e,
	0xcb, 0x78, 0x41, 0x72, 0x49, 0xf9, 0x69, 0x1c, 0xb2, 0x8f, 0xf6, 0x51, 0xb3, 0x30, 0xe2, 0x65,
	0x45, 0x2c, 0xc3, 0x9d, 0xcb, 0x84, 0x99, 0x2c, 0x50, 0xe7, 0xb3, 0x78, 0x3a, 0xcb, 0x39, 0x7e,
	0xae, 0x21, 0x9c, 0xe6, 0xa4, 0x78, 0x35, 0x77, 0xb8, 0x65, 0x96, 0xa9, 0x57, 0x8a, 0xaa, 0x03,
	0xa6, 0xcb, 0x14, 0xd3, 0x05, 0x5c, 0x91, 0x31, 0x59, 0x41, 0x8d, 0xcd, 0x65, 0x6d, 0xab, 0x57,
	0x03, 0xa6, 0x6a, 0xf4, 0xe1, 0xc7, 0x00, 0xff, 0xa6, 0xa1, 0xd9, 0x6c, 0xbe, 0x8a, 0xd7, 0x86,
	0x8e, 0x63, 0x0a, 0xf5, 0xfa, 0x6e, 0x4c, 0x00, 0xf9, 0x55, 0x8a, 0xfc, 0x12, 0x5e, 0xcf, 0x42,
	0x1e, 0xdb, 0x65, 0xa3, 0xff, 0x42, 0x43, 0x7b, 0x81, 0xf1, 0x61, 0xd5, 0xb4, 0x24, 0x59, 0xaa,
	0x7e, 0x6a, 0x98, 0x1a, 0xc0, 0x3a, 0x4d, 0x61, 0x2d, 0xe1, 0x45, 0x09, 0x56, 0x74, 0x97, 0x1f,
	0x37, 0xd9, 0x53, 0x84, 0xc0, 0x36, 0x6c, 0x33, 0xd5, 0xc8, 0x14, 0x41, 0x91, 0xe6, 0xbb, 0x64,
	0x91, 0xa2, 0x98, 0xc7, 0x47, 0x14, 0x28, 0xa2, 0x0c, 0x50, 0x8a, 0x95, 0x93, 0x01, 0x81, 0x25,
	0xe6, 0x65, 0x40, 0x64, 0x7a, 0xb9, 0x19, 0xe8, 0xfa, 0xc2, 0xce, 0xc2, 0x32, 0x10, 0xda, 0x0e,
	0xc9, 0xc0, 0x50, 0x14, 0x69, 0xbe, 0x99, 0x9b, 0x81, 0x10, 0x05, 0xfe, 0x5d, 0x43, 0x38, 0xcd,
	0xc7, 0xb2, 0xe7, 0x4d, 0xc9, 0x19, 0xb3, 0xe7, 0x4d, 0x4d, 0xf3, 0xc8, 0x7b, 0x14, 0xd6, 0x75,
	0x7c, 0x4d, 0x86, 0x45, 0x4d, 0x6a, 0x1e, 0xb5, 0xa9, 0x75, 0xa8, 0x91, 0xd1, 0x67, 0x04, 0x74,
	0x60, 0xf4, 0x81, 0x70, 0x0e, 0x8c, 0xfe, 0x8e, 0xb7, 0x33, 0x30, 0xfa, 0x94, 0x56, 0x0e, 0xf0,
	0xcf, 0x1a, 0x3a, 0x24, 0x31, 0x3b, 0x7c, 0x36, 0x0b, 0x51, 0x36, 0x7b, 0xd4, 0xcf, 0x15, 0xd2,
	0x05, 0xe8, 0x97, 0x28, 0xf4, 0x0a, 0x3e, 0x2f, 0x41, 0xb7, 0xfd, 0x5a, 0x5d, 0x34, 0x30, 0xfa,
	0x9c, 0x7f, 0xd2, 0x51, 0xe3, 0x0c, 0x0d, 0x9f, 0x56, 0xf4, 0x90, 0xcc, 0x12, 0xf5, 0x95, 0xe1,
	0x8a, 0x43, 0x3e, 0xa0, 0xfc, 0x4f, 0x31, 0xfc, 0xad, 0x86, 0xf6, 0x0b, 0xcc, 0x06, 0xab, 0x0e,
	0x0c, 0x69, 0x76, 0xa6, 0x9f, 0x2d, 0xa2, 0x0a, 0x48, 0xce, 0x51, 0x24, 0x27, 0xf1, 0xb2, 0x84,
	0x44, 0xfc, 0x23, 0x2e, 0x6e, 0xfe, 0x67, 0x1a, 0x3a, 0x28, 0x2c, 0x12, 0x4e, 0x80, 0xea, 0xd4,
	0x50, 0x14, 0x56, 0x36, 0xf1, 0x23, 0xcb, 0x14, 0xd6, 0x31, 0x7c, 0x34, 0x07, 0x16, 0x2d, 0x53,
	0xcc, 0x93, 0x94, 0x65, 0x92, 0xb9, 0x9a, 0xb2, 0x4c, 0x29, 0xe2, 0xa6, 0x2c, 0x13, 0xff, 0x37,
	0x12, 0x7f, 0xad, 0x25, 0x78, 0x88, 0xb2, 0x4c, 0x69, 0xa6, 0xa4, 0x2c, 0x53, 0x06, 0xdb, 0x21,
	0x2b, 0x14, 0x09, 0xc1, 0xc7, 0x25, 0x24, 0xe2, 0x3f, 0xa0, 0x46, 0xdf, 0x6e, 0xb0, 0x1a, 0x09,
	0x2b, 0xe4, 0xd5, 0xa8, 0x28, 0xa6, 0x6c, 0x06, 0xa6, 0xac, 0x91, 0x88, 0x09, 0xff, 0xa8, 0xa1,
	0x03, 0x09, 0x6a, 0xa3, 0x3c, 0x23, 0xa7, 0x88, 0x93, 0xf2, 0x8c, 0x9c, 0xe6, 0x49, 0xe4, 0x22,
	0xc5, 0xb2, 0x8a, 0xcf, 0x65, 0x7c, 0x58, 0xd9, 0xd1, 0x2c, 0xfc, 0xa8, 0xda, 0xae, 0xd1, 0x8f,
	0x99, 0xd7, 0x60, 0xd3, 0x78, 0xf1, 0xaa, 0xac, 0xbd, 0x7c, 0x55, 0xd6, 0xfe, 0x7e, 0x55, 0xd6,
	0xbe, 0x79, 0x5d, 0x1e, 0x7b, 0xf9, 0xba, 0x3c, 0xf6, 0xe7, 0xeb, 0xf2, 0xd8, 0x27, 0x33, 0x7c,
	0x95, 0x27, 0x74, 0x9d, 0xa0, 0xe7, 0x5a, 0xfe, 0xd6, 0x24, 0xfd, 0xa7, 0xf8, 0xe2, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0xa9, 0x10, 0x94, 0x8c, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Client by index.
	Client(ctx context.Context, in *QueryGetClientRequest, opts ...grpc.CallOption) (*QueryGetClientResponse, error)
	// Queries a list of Client items.
	ClientAll(ctx context.Context, in *QueryAllClientRequest, opts ...grpc.CallOption) (*QueryAllClientResponse, error)
	// Queries a Challenger by index.
	Challenger(ctx context.Context, in *QueryGetChallengerRequest, opts ...grpc.CallOption) (*QueryGetChallengerResponse, error)
	// Queries a list of Challenger items.
	ChallengerAll(ctx context.Context, in *QueryAllChallengerRequest, opts ...grpc.CallOption) (*QueryAllChallengerResponse, error)
	// Queries a Runner by index.
	Runner(ctx context.Context, in *QueryGetRunnerRequest, opts ...grpc.CallOption) (*QueryGetRunnerResponse, error)
	// Queries a list of Runner items.
	RunnerAll(ctx context.Context, in *QueryAllRunnerRequest, opts ...grpc.CallOption) (*QueryAllRunnerResponse, error)
	// Queries a Guard by index.
	Guard(ctx context.Context, in *QueryGetGuardRequest, opts ...grpc.CallOption) (*QueryGetGuardResponse, error)
	// Queries a list of Guard items.
	GuardAll(ctx context.Context, in *QueryAllGuardRequest, opts ...grpc.CallOption) (*QueryAllGuardResponse, error)
	// Queries a list of GetClientByAddress items.
	GetClientByAddress(ctx context.Context, in *QueryGetClientByAddressRequest, opts ...grpc.CallOption) (*QueryGetClientByAddressResponse, error)
	// Queries a list of GetChallengerByAddress items.
	GetChallengerByAddress(ctx context.Context, in *QueryGetChallengerByAddressRequest, opts ...grpc.CallOption) (*QueryGetChallengerByAddressResponse, error)
	// Queries a VrfData by index.
	VrfData(ctx context.Context, in *QueryGetVrfDataRequest, opts ...grpc.CallOption) (*QueryGetVrfDataResponse, error)
	// Queries a list of VrfData items.
	VrfDataAll(ctx context.Context, in *QueryAllVrfDataRequest, opts ...grpc.CallOption) (*QueryAllVrfDataResponse, error)
	// Queries a VrfUser by index.
	VrfUser(ctx context.Context, in *QueryGetVrfUserRequest, opts ...grpc.CallOption) (*QueryGetVrfUserResponse, error)
	// Queries a list of VrfUser items.
	VrfUserAll(ctx context.Context, in *QueryAllVrfUserRequest, opts ...grpc.CallOption) (*QueryAllVrfUserResponse, error)
	// Queries a list of VerifyRandomNumber items.
	VerifyRandomNumber(ctx context.Context, in *QueryVerifyRandomNumberRequest, opts ...grpc.CallOption) (*QueryVerifyRandomNumberResponse, error)
	// Queries a list of IsChallengeable items.
	IsChallengeable(ctx context.Context, in *QueryIsChallengeableRequest, opts ...grpc.CallOption) (*QueryIsChallengeableResponse, error)
	// Queries a EpochData by index.
	EpochData(ctx context.Context, in *QueryGetEpochDataRequest, opts ...grpc.CallOption) (*QueryGetEpochDataResponse, error)
	// Queries a MotusWallet by index.
	MotusWallet(ctx context.Context, in *QueryGetMotusWalletRequest, opts ...grpc.CallOption) (*QueryGetMotusWalletResponse, error)
	// Queries a list of MotusWallet items.
	MotusWalletAll(ctx context.Context, in *QueryAllMotusWalletRequest, opts ...grpc.CallOption) (*QueryAllMotusWalletResponse, error)
	// Queries a MasterKey by index.
	MasterKey(ctx context.Context, in *QueryGetMasterKeyRequest, opts ...grpc.CallOption) (*QueryGetMasterKeyResponse, error)
	// Queries a FactoryKeys by id.
	FactoryKeys(ctx context.Context, in *QueryGetFactoryKeysRequest, opts ...grpc.CallOption) (*QueryGetFactoryKeysResponse, error)
	// Queries a list of FactoryKeys items.
	FactoryKeysAll(ctx context.Context, in *QueryAllFactoryKeysRequest, opts ...grpc.CallOption) (*QueryAllFactoryKeysResponse, error)
	// Queries a list of GetRunnerByIp items.
	GetRunnerByIp(ctx context.Context, in *QueryGetRunnerByIpRequest, opts ...grpc.CallOption) (*QueryGetRunnerByIpResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Client(ctx context.Context, in *QueryGetClientRequest, opts ...grpc.CallOption) (*QueryGetClientResponse, error) {
	out := new(QueryGetClientResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClientAll(ctx context.Context, in *QueryAllClientRequest, opts ...grpc.CallOption) (*QueryAllClientResponse, error) {
	out := new(QueryAllClientResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/ClientAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Challenger(ctx context.Context, in *QueryGetChallengerRequest, opts ...grpc.CallOption) (*QueryGetChallengerResponse, error) {
	out := new(QueryGetChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Challenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChallengerAll(ctx context.Context, in *QueryAllChallengerRequest, opts ...grpc.CallOption) (*QueryAllChallengerResponse, error) {
	out := new(QueryAllChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/ChallengerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Runner(ctx context.Context, in *QueryGetRunnerRequest, opts ...grpc.CallOption) (*QueryGetRunnerResponse, error) {
	out := new(QueryGetRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Runner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RunnerAll(ctx context.Context, in *QueryAllRunnerRequest, opts ...grpc.CallOption) (*QueryAllRunnerResponse, error) {
	out := new(QueryAllRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/RunnerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Guard(ctx context.Context, in *QueryGetGuardRequest, opts ...grpc.CallOption) (*QueryGetGuardResponse, error) {
	out := new(QueryGetGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Guard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardAll(ctx context.Context, in *QueryAllGuardRequest, opts ...grpc.CallOption) (*QueryAllGuardResponse, error) {
	out := new(QueryAllGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GuardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetClientByAddress(ctx context.Context, in *QueryGetClientByAddressRequest, opts ...grpc.CallOption) (*QueryGetClientByAddressResponse, error) {
	out := new(QueryGetClientByAddressResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetClientByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChallengerByAddress(ctx context.Context, in *QueryGetChallengerByAddressRequest, opts ...grpc.CallOption) (*QueryGetChallengerByAddressResponse, error) {
	out := new(QueryGetChallengerByAddressResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetChallengerByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VrfData(ctx context.Context, in *QueryGetVrfDataRequest, opts ...grpc.CallOption) (*QueryGetVrfDataResponse, error) {
	out := new(QueryGetVrfDataResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/VrfData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VrfDataAll(ctx context.Context, in *QueryAllVrfDataRequest, opts ...grpc.CallOption) (*QueryAllVrfDataResponse, error) {
	out := new(QueryAllVrfDataResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/VrfDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VrfUser(ctx context.Context, in *QueryGetVrfUserRequest, opts ...grpc.CallOption) (*QueryGetVrfUserResponse, error) {
	out := new(QueryGetVrfUserResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/VrfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VrfUserAll(ctx context.Context, in *QueryAllVrfUserRequest, opts ...grpc.CallOption) (*QueryAllVrfUserResponse, error) {
	out := new(QueryAllVrfUserResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/VrfUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyRandomNumber(ctx context.Context, in *QueryVerifyRandomNumberRequest, opts ...grpc.CallOption) (*QueryVerifyRandomNumberResponse, error) {
	out := new(QueryVerifyRandomNumberResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/VerifyRandomNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsChallengeable(ctx context.Context, in *QueryIsChallengeableRequest, opts ...grpc.CallOption) (*QueryIsChallengeableResponse, error) {
	out := new(QueryIsChallengeableResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/IsChallengeable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochData(ctx context.Context, in *QueryGetEpochDataRequest, opts ...grpc.CallOption) (*QueryGetEpochDataResponse, error) {
	out := new(QueryGetEpochDataResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/EpochData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MotusWallet(ctx context.Context, in *QueryGetMotusWalletRequest, opts ...grpc.CallOption) (*QueryGetMotusWalletResponse, error) {
	out := new(QueryGetMotusWalletResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/MotusWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MotusWalletAll(ctx context.Context, in *QueryAllMotusWalletRequest, opts ...grpc.CallOption) (*QueryAllMotusWalletResponse, error) {
	out := new(QueryAllMotusWalletResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/MotusWalletAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MasterKey(ctx context.Context, in *QueryGetMasterKeyRequest, opts ...grpc.CallOption) (*QueryGetMasterKeyResponse, error) {
	out := new(QueryGetMasterKeyResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/MasterKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FactoryKeys(ctx context.Context, in *QueryGetFactoryKeysRequest, opts ...grpc.CallOption) (*QueryGetFactoryKeysResponse, error) {
	out := new(QueryGetFactoryKeysResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/FactoryKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FactoryKeysAll(ctx context.Context, in *QueryAllFactoryKeysRequest, opts ...grpc.CallOption) (*QueryAllFactoryKeysResponse, error) {
	out := new(QueryAllFactoryKeysResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/FactoryKeysAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRunnerByIp(ctx context.Context, in *QueryGetRunnerByIpRequest, opts ...grpc.CallOption) (*QueryGetRunnerByIpResponse, error) {
	out := new(QueryGetRunnerByIpResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetRunnerByIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Client by index.
	Client(context.Context, *QueryGetClientRequest) (*QueryGetClientResponse, error)
	// Queries a list of Client items.
	ClientAll(context.Context, *QueryAllClientRequest) (*QueryAllClientResponse, error)
	// Queries a Challenger by index.
	Challenger(context.Context, *QueryGetChallengerRequest) (*QueryGetChallengerResponse, error)
	// Queries a list of Challenger items.
	ChallengerAll(context.Context, *QueryAllChallengerRequest) (*QueryAllChallengerResponse, error)
	// Queries a Runner by index.
	Runner(context.Context, *QueryGetRunnerRequest) (*QueryGetRunnerResponse, error)
	// Queries a list of Runner items.
	RunnerAll(context.Context, *QueryAllRunnerRequest) (*QueryAllRunnerResponse, error)
	// Queries a Guard by index.
	Guard(context.Context, *QueryGetGuardRequest) (*QueryGetGuardResponse, error)
	// Queries a list of Guard items.
	GuardAll(context.Context, *QueryAllGuardRequest) (*QueryAllGuardResponse, error)
	// Queries a list of GetClientByAddress items.
	GetClientByAddress(context.Context, *QueryGetClientByAddressRequest) (*QueryGetClientByAddressResponse, error)
	// Queries a list of GetChallengerByAddress items.
	GetChallengerByAddress(context.Context, *QueryGetChallengerByAddressRequest) (*QueryGetChallengerByAddressResponse, error)
	// Queries a VrfData by index.
	VrfData(context.Context, *QueryGetVrfDataRequest) (*QueryGetVrfDataResponse, error)
	// Queries a list of VrfData items.
	VrfDataAll(context.Context, *QueryAllVrfDataRequest) (*QueryAllVrfDataResponse, error)
	// Queries a VrfUser by index.
	VrfUser(context.Context, *QueryGetVrfUserRequest) (*QueryGetVrfUserResponse, error)
	// Queries a list of VrfUser items.
	VrfUserAll(context.Context, *QueryAllVrfUserRequest) (*QueryAllVrfUserResponse, error)
	// Queries a list of VerifyRandomNumber items.
	VerifyRandomNumber(context.Context, *QueryVerifyRandomNumberRequest) (*QueryVerifyRandomNumberResponse, error)
	// Queries a list of IsChallengeable items.
	IsChallengeable(context.Context, *QueryIsChallengeableRequest) (*QueryIsChallengeableResponse, error)
	// Queries a EpochData by index.
	EpochData(context.Context, *QueryGetEpochDataRequest) (*QueryGetEpochDataResponse, error)
	// Queries a MotusWallet by index.
	MotusWallet(context.Context, *QueryGetMotusWalletRequest) (*QueryGetMotusWalletResponse, error)
	// Queries a list of MotusWallet items.
	MotusWalletAll(context.Context, *QueryAllMotusWalletRequest) (*QueryAllMotusWalletResponse, error)
	// Queries a MasterKey by index.
	MasterKey(context.Context, *QueryGetMasterKeyRequest) (*QueryGetMasterKeyResponse, error)
	// Queries a FactoryKeys by id.
	FactoryKeys(context.Context, *QueryGetFactoryKeysRequest) (*QueryGetFactoryKeysResponse, error)
	// Queries a list of FactoryKeys items.
	FactoryKeysAll(context.Context, *QueryAllFactoryKeysRequest) (*QueryAllFactoryKeysResponse, error)
	// Queries a list of GetRunnerByIp items.
	GetRunnerByIp(context.Context, *QueryGetRunnerByIpRequest) (*QueryGetRunnerByIpResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Client(ctx context.Context, req *QueryGetClientRequest) (*QueryGetClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client not implemented")
}
func (*UnimplementedQueryServer) ClientAll(ctx context.Context, req *QueryAllClientRequest) (*QueryAllClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAll not implemented")
}
func (*UnimplementedQueryServer) Challenger(ctx context.Context, req *QueryGetChallengerRequest) (*QueryGetChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenger not implemented")
}
func (*UnimplementedQueryServer) ChallengerAll(ctx context.Context, req *QueryAllChallengerRequest) (*QueryAllChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengerAll not implemented")
}
func (*UnimplementedQueryServer) Runner(ctx context.Context, req *QueryGetRunnerRequest) (*QueryGetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Runner not implemented")
}
func (*UnimplementedQueryServer) RunnerAll(ctx context.Context, req *QueryAllRunnerRequest) (*QueryAllRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerAll not implemented")
}
func (*UnimplementedQueryServer) Guard(ctx context.Context, req *QueryGetGuardRequest) (*QueryGetGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guard not implemented")
}
func (*UnimplementedQueryServer) GuardAll(ctx context.Context, req *QueryAllGuardRequest) (*QueryAllGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardAll not implemented")
}
func (*UnimplementedQueryServer) GetClientByAddress(ctx context.Context, req *QueryGetClientByAddressRequest) (*QueryGetClientByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientByAddress not implemented")
}
func (*UnimplementedQueryServer) GetChallengerByAddress(ctx context.Context, req *QueryGetChallengerByAddressRequest) (*QueryGetChallengerByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengerByAddress not implemented")
}
func (*UnimplementedQueryServer) VrfData(ctx context.Context, req *QueryGetVrfDataRequest) (*QueryGetVrfDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VrfData not implemented")
}
func (*UnimplementedQueryServer) VrfDataAll(ctx context.Context, req *QueryAllVrfDataRequest) (*QueryAllVrfDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VrfDataAll not implemented")
}
func (*UnimplementedQueryServer) VrfUser(ctx context.Context, req *QueryGetVrfUserRequest) (*QueryGetVrfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VrfUser not implemented")
}
func (*UnimplementedQueryServer) VrfUserAll(ctx context.Context, req *QueryAllVrfUserRequest) (*QueryAllVrfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VrfUserAll not implemented")
}
func (*UnimplementedQueryServer) VerifyRandomNumber(ctx context.Context, req *QueryVerifyRandomNumberRequest) (*QueryVerifyRandomNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRandomNumber not implemented")
}
func (*UnimplementedQueryServer) IsChallengeable(ctx context.Context, req *QueryIsChallengeableRequest) (*QueryIsChallengeableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsChallengeable not implemented")
}
func (*UnimplementedQueryServer) EpochData(ctx context.Context, req *QueryGetEpochDataRequest) (*QueryGetEpochDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochData not implemented")
}
func (*UnimplementedQueryServer) MotusWallet(ctx context.Context, req *QueryGetMotusWalletRequest) (*QueryGetMotusWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MotusWallet not implemented")
}
func (*UnimplementedQueryServer) MotusWalletAll(ctx context.Context, req *QueryAllMotusWalletRequest) (*QueryAllMotusWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MotusWalletAll not implemented")
}
func (*UnimplementedQueryServer) MasterKey(ctx context.Context, req *QueryGetMasterKeyRequest) (*QueryGetMasterKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterKey not implemented")
}
func (*UnimplementedQueryServer) FactoryKeys(ctx context.Context, req *QueryGetFactoryKeysRequest) (*QueryGetFactoryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FactoryKeys not implemented")
}
func (*UnimplementedQueryServer) FactoryKeysAll(ctx context.Context, req *QueryAllFactoryKeysRequest) (*QueryAllFactoryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FactoryKeysAll not implemented")
}
func (*UnimplementedQueryServer) GetRunnerByIp(ctx context.Context, req *QueryGetRunnerByIpRequest) (*QueryGetRunnerByIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunnerByIp not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Client(ctx, req.(*QueryGetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClientAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClientAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/ClientAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClientAll(ctx, req.(*QueryAllClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Challenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChallengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Challenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Challenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Challenger(ctx, req.(*QueryGetChallengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChallengerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChallengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChallengerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/ChallengerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChallengerAll(ctx, req.(*QueryAllChallengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Runner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Runner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Runner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Runner(ctx, req.(*QueryGetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RunnerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RunnerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/RunnerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RunnerAll(ctx, req.(*QueryAllRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Guard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Guard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Guard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Guard(ctx, req.(*QueryGetGuardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GuardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardAll(ctx, req.(*QueryAllGuardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetClientByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClientByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetClientByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetClientByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetClientByAddress(ctx, req.(*QueryGetClientByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChallengerByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChallengerByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChallengerByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetChallengerByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChallengerByAddress(ctx, req.(*QueryGetChallengerByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VrfData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVrfDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VrfData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/VrfData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VrfData(ctx, req.(*QueryGetVrfDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VrfDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVrfDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VrfDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/VrfDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VrfDataAll(ctx, req.(*QueryAllVrfDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VrfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVrfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VrfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/VrfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VrfUser(ctx, req.(*QueryGetVrfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VrfUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVrfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VrfUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/VrfUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VrfUserAll(ctx, req.(*QueryAllVrfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyRandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyRandomNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyRandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/VerifyRandomNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyRandomNumber(ctx, req.(*QueryVerifyRandomNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsChallengeable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsChallengeableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsChallengeable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/IsChallengeable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsChallengeable(ctx, req.(*QueryIsChallengeableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/EpochData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochData(ctx, req.(*QueryGetEpochDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MotusWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMotusWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MotusWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/MotusWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MotusWallet(ctx, req.(*QueryGetMotusWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MotusWalletAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMotusWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MotusWalletAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/MotusWalletAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MotusWalletAll(ctx, req.(*QueryAllMotusWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MasterKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMasterKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MasterKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/MasterKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MasterKey(ctx, req.(*QueryGetMasterKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FactoryKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFactoryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FactoryKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/FactoryKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FactoryKeys(ctx, req.(*QueryGetFactoryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FactoryKeysAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFactoryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FactoryKeysAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/FactoryKeysAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FactoryKeysAll(ctx, req.(*QueryAllFactoryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRunnerByIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRunnerByIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRunnerByIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetRunnerByIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRunnerByIp(ctx, req.(*QueryGetRunnerByIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soarchain.poa.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Client",
			Handler:    _Query_Client_Handler,
		},
		{
			MethodName: "ClientAll",
			Handler:    _Query_ClientAll_Handler,
		},
		{
			MethodName: "Challenger",
			Handler:    _Query_Challenger_Handler,
		},
		{
			MethodName: "ChallengerAll",
			Handler:    _Query_ChallengerAll_Handler,
		},
		{
			MethodName: "Runner",
			Handler:    _Query_Runner_Handler,
		},
		{
			MethodName: "RunnerAll",
			Handler:    _Query_RunnerAll_Handler,
		},
		{
			MethodName: "Guard",
			Handler:    _Query_Guard_Handler,
		},
		{
			MethodName: "GuardAll",
			Handler:    _Query_GuardAll_Handler,
		},
		{
			MethodName: "GetClientByAddress",
			Handler:    _Query_GetClientByAddress_Handler,
		},
		{
			MethodName: "GetChallengerByAddress",
			Handler:    _Query_GetChallengerByAddress_Handler,
		},
		{
			MethodName: "VrfData",
			Handler:    _Query_VrfData_Handler,
		},
		{
			MethodName: "VrfDataAll",
			Handler:    _Query_VrfDataAll_Handler,
		},
		{
			MethodName: "VrfUser",
			Handler:    _Query_VrfUser_Handler,
		},
		{
			MethodName: "VrfUserAll",
			Handler:    _Query_VrfUserAll_Handler,
		},
		{
			MethodName: "VerifyRandomNumber",
			Handler:    _Query_VerifyRandomNumber_Handler,
		},
		{
			MethodName: "IsChallengeable",
			Handler:    _Query_IsChallengeable_Handler,
		},
		{
			MethodName: "EpochData",
			Handler:    _Query_EpochData_Handler,
		},
		{
			MethodName: "MotusWallet",
			Handler:    _Query_MotusWallet_Handler,
		},
		{
			MethodName: "MotusWalletAll",
			Handler:    _Query_MotusWalletAll_Handler,
		},
		{
			MethodName: "MasterKey",
			Handler:    _Query_MasterKey_Handler,
		},
		{
			MethodName: "FactoryKeys",
			Handler:    _Query_FactoryKeys_Handler,
		},
		{
			MethodName: "FactoryKeysAll",
			Handler:    _Query_FactoryKeysAll_Handler,
		},
		{
			MethodName: "GetRunnerByIp",
			Handler:    _Query_GetRunnerByIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poa/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Client) > 0 {
		for iNdEx := len(m.Client) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Client[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Challenger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChallengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChallengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChallengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Challenger) > 0 {
		for iNdEx := len(m.Challenger) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenger[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Runner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRunnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRunnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRunnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Runner) > 0 {
		for iNdEx := len(m.Runner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Guard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Guard) > 0 {
		for iNdEx := len(m.Guard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenger != nil {
		{
			size, err := m.Challenger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVrfDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVrfDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVrfDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVrfDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVrfDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVrfDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VrfData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVrfDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVrfDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVrfDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVrfDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVrfDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVrfDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VrfData) > 0 {
		for iNdEx := len(m.VrfData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VrfData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVrfUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVrfUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVrfUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVrfUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVrfUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVrfUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VrfUser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVrfUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVrfUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVrfUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVrfUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVrfUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVrfUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VrfUser) > 0 {
		for iNdEx := len(m.VrfUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VrfUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyRandomNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyRandomNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyRandomNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vrv) > 0 {
		i -= len(m.Vrv)
		copy(dAtA[i:], m.Vrv)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Vrv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyRandomNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyRandomNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyRandomNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsChallengeableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsChallengeableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsChallengeableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientAddr) > 0 {
		i -= len(m.ClientAddr)
		copy(dAtA[i:], m.ClientAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClientAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsChallengeableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsChallengeableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsChallengeableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeabilityScore) > 0 {
		i -= len(m.ChallengeabilityScore)
		copy(dAtA[i:], m.ChallengeabilityScore)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChallengeabilityScore)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResultBool) > 0 {
		i -= len(m.ResultBool)
		copy(dAtA[i:], m.ResultBool)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ResultBool)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMotusWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMotusWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMotusWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMotusWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMotusWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMotusWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MotusWallet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMotusWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMotusWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMotusWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMotusWalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMotusWalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMotusWalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MotusWallet) > 0 {
		for iNdEx := len(m.MotusWallet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MotusWallet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMasterKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMasterKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMasterKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMasterKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMasterKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMasterKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MasterKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFactoryKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFactoryKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFactoryKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFactoryKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFactoryKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFactoryKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FactoryKeys.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFactoryKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFactoryKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFactoryKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFactoryKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFactoryKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFactoryKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FactoryKeys) > 0 {
		for iNdEx := len(m.FactoryKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FactoryKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerByIpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerByIpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerByIpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerByIpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerByIpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerByIpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Runner != nil {
		{
			size, err := m.Runner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Client) > 0 {
		for _, e := range m.Client {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Challenger.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChallengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenger) > 0 {
		for _, e := range m.Challenger {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Runner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRunnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Runner) > 0 {
		for _, e := range m.Runner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Guard.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGuardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Guard) > 0 {
		for _, e := range m.Guard {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenger != nil {
		l = m.Challenger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVrfDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVrfDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VrfData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVrfDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVrfDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VrfData) > 0 {
		for _, e := range m.VrfData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVrfUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVrfUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VrfUser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVrfUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVrfUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VrfUser) > 0 {
		for _, e := range m.VrfUser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyRandomNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Vrv)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyRandomNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *QueryIsChallengeableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsChallengeableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResultBool)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChallengeabilityScore)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMotusWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMotusWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MotusWallet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMotusWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMotusWalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MotusWallet) > 0 {
		for _, e := range m.MotusWallet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMasterKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMasterKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MasterKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFactoryKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFactoryKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FactoryKeys.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFactoryKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFactoryKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FactoryKeys) > 0 {
		for _, e := range m.FactoryKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerByIpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerByIpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Runner != nil {
		l = m.Runner.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client, Client{})
			if err := m.Client[len(m.Client)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Challenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChallengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChallengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChallengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = append(m.Challenger, Challenger{})
			if err := m.Challenger[len(m.Challenger)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Runner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRunnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRunnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRunnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runner = append(m.Runner, Runner{})
			if err := m.Runner[len(m.Runner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Guard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guard = append(m.Guard, Guard{})
			if err := m.Guard[len(m.Guard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenger == nil {
				m.Challenger = &Challenger{}
			}
			if err := m.Challenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVrfDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVrfDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVrfDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVrfDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVrfDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVrfDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VrfData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVrfDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVrfDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVrfDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVrfDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVrfDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVrfDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfData = append(m.VrfData, VrfData{})
			if err := m.VrfData[len(m.VrfData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVrfUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVrfUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVrfUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVrfUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVrfUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVrfUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VrfUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVrfUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVrfUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVrfUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVrfUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVrfUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVrfUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfUser = append(m.VrfUser, VrfUser{})
			if err := m.VrfUser[len(m.VrfUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyRandomNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyRandomNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyRandomNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vrv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyRandomNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyRandomNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyRandomNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsChallengeableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsChallengeableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsChallengeableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsChallengeableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsChallengeableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsChallengeableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultBool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultBool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeabilityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeabilityScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMotusWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMotusWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMotusWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMotusWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMotusWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMotusWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotusWallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MotusWallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMotusWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMotusWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMotusWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMotusWalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMotusWalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMotusWalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotusWallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MotusWallet = append(m.MotusWallet, MotusWallet{})
			if err := m.MotusWallet[len(m.MotusWallet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMasterKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMasterKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMasterKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMasterKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMasterKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMasterKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MasterKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFactoryKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFactoryKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFactoryKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFactoryKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFactoryKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFactoryKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FactoryKeys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFactoryKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFactoryKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFactoryKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFactoryKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFactoryKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFactoryKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoryKeys = append(m.FactoryKeys, FactoryKeys{})
			if err := m.FactoryKeys[len(m.FactoryKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerByIpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerByIpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerByIpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerByIpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerByIpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerByIpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Runner == nil {
				m.Runner = &Runner{}
			}
			if err := m.Runner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
