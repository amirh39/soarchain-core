// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poa/client.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Client struct {
	PubKey             string `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	Address            string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Score              string `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	RewardMultiplier   string `protobuf:"bytes,5,opt,name=rewardMultiplier,proto3" json:"rewardMultiplier,omitempty"`
	NetEarnings        string `protobuf:"bytes,6,opt,name=netEarnings,proto3" json:"netEarnings,omitempty"`
	LastTimeChallenged string `protobuf:"bytes,7,opt,name=lastTimeChallenged,proto3" json:"lastTimeChallenged,omitempty"`
	CoolDownTolerance  string `protobuf:"bytes,8,opt,name=coolDownTolerance,proto3" json:"coolDownTolerance,omitempty"`
	Type               string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bff2e29c8841df5, []int{0}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *Client) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Client) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *Client) GetRewardMultiplier() string {
	if m != nil {
		return m.RewardMultiplier
	}
	return ""
}

func (m *Client) GetNetEarnings() string {
	if m != nil {
		return m.NetEarnings
	}
	return ""
}

func (m *Client) GetLastTimeChallenged() string {
	if m != nil {
		return m.LastTimeChallenged
	}
	return ""
}

func (m *Client) GetCoolDownTolerance() string {
	if m != nil {
		return m.CoolDownTolerance
	}
	return ""
}

func (m *Client) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*Client)(nil), "soarchain.poa.Client")
}

func init() { proto.RegisterFile("poa/client.proto", fileDescriptor_5bff2e29c8841df5) }

var fileDescriptor_5bff2e29c8841df5 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4a, 0x03, 0x41,
	0x14, 0x85, 0xb3, 0x21, 0xd9, 0x98, 0x11, 0x21, 0x5e, 0x54, 0xa6, 0x1a, 0x82, 0x95, 0x88, 0xec,
	0x16, 0xbe, 0x81, 0xd1, 0x4a, 0x04, 0x91, 0x54, 0x76, 0x93, 0xdd, 0x4b, 0x32, 0x30, 0xce, 0x1d,
	0x66, 0x26, 0xc4, 0xbc, 0x45, 0x1e, 0xcb, 0x32, 0xa5, 0xa5, 0xec, 0xbe, 0x88, 0xe4, 0xfa, 0x83,
	0x10, 0xbb, 0x73, 0xce, 0xf7, 0x55, 0x47, 0x8c, 0x3c, 0xe9, 0xb2, 0xb2, 0x06, 0x5d, 0x2a, 0x7c,
	0xa0, 0x44, 0x70, 0x14, 0x49, 0x87, 0x6a, 0xa1, 0x8d, 0x2b, 0x3c, 0xe9, 0xf3, 0x4d, 0x57, 0xe4,
	0x13, 0xe6, 0x70, 0x26, 0xf2, 0xc7, 0xe5, 0xec, 0x1e, 0xd7, 0x32, 0x1b, 0x67, 0x17, 0xc3, 0xa7,
	0xef, 0x06, 0x52, 0x0c, 0x74, 0x5d, 0x07, 0x8c, 0x51, 0x76, 0x19, 0xfc, 0x54, 0x38, 0x11, 0xfd,
	0x58, 0x51, 0x40, 0xd9, 0xe3, 0xfd, 0xab, 0xc0, 0xa5, 0x18, 0x05, 0x5c, 0xe9, 0x50, 0x3f, 0x2c,
	0x6d, 0x32, 0xde, 0x1a, 0x0c, 0xb2, 0xcf, 0xc2, 0xde, 0x0e, 0x63, 0x71, 0xe8, 0x30, 0xdd, 0xe9,
	0xe0, 0x8c, 0x9b, 0x47, 0x99, 0xb3, 0xf6, 0x77, 0x82, 0x42, 0x80, 0xd5, 0x31, 0x4d, 0xcd, 0x0b,
	0x4e, 0x16, 0xda, 0x5a, 0x74, 0x73, 0xac, 0xe5, 0x80, 0xc5, 0x7f, 0x08, 0x5c, 0x89, 0xe3, 0x8a,
	0xc8, 0xde, 0xd2, 0xca, 0x4d, 0xc9, 0x62, 0xd0, 0xae, 0x42, 0x79, 0xc0, 0xfa, 0x3e, 0x00, 0x10,
	0xbd, 0xb4, 0xf6, 0x28, 0x87, 0x2c, 0x70, 0xbe, 0x29, 0xdf, 0x1a, 0x95, 0x6d, 0x1b, 0x95, 0x7d,
	0x34, 0x2a, 0xdb, 0xb4, 0xaa, 0xb3, 0x6d, 0x55, 0xe7, 0xbd, 0x55, 0x9d, 0xe7, 0xd3, 0xdf, 0xef,
	0xca, 0xd7, 0x72, 0xf7, 0xec, 0xce, 0x8f, 0xb3, 0x9c, 0x9f, 0xbd, 0xfe, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0x73, 0xe7, 0xa1, 0x98, 0x6d, 0x01, 0x00, 0x00,
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Client) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CoolDownTolerance) > 0 {
		i -= len(m.CoolDownTolerance)
		copy(dAtA[i:], m.CoolDownTolerance)
		i = encodeVarintClient(dAtA, i, uint64(len(m.CoolDownTolerance)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastTimeChallenged) > 0 {
		i -= len(m.LastTimeChallenged)
		copy(dAtA[i:], m.LastTimeChallenged)
		i = encodeVarintClient(dAtA, i, uint64(len(m.LastTimeChallenged)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NetEarnings) > 0 {
		i -= len(m.NetEarnings)
		copy(dAtA[i:], m.NetEarnings)
		i = encodeVarintClient(dAtA, i, uint64(len(m.NetEarnings)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RewardMultiplier) > 0 {
		i -= len(m.RewardMultiplier)
		copy(dAtA[i:], m.RewardMultiplier)
		i = encodeVarintClient(dAtA, i, uint64(len(m.RewardMultiplier)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintClient(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintClient(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	offset -= sovClient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.RewardMultiplier)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.NetEarnings)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.LastTimeChallenged)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.CoolDownTolerance)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func sovClient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardMultiplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetEarnings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetEarnings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimeChallenged", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastTimeChallenged = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolDownTolerance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoolDownTolerance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClient = fmt.Errorf("proto: unexpected end of group")
)
