// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: epoch/random_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RandomData struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RandomNumber string `protobuf:"bytes,2,opt,name=randomNumber,proto3" json:"randomNumber,omitempty"`
	EpochNumber  string `protobuf:"bytes,3,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
}

func (m *RandomData) Reset()         { *m = RandomData{} }
func (m *RandomData) String() string { return proto.CompactTextString(m) }
func (*RandomData) ProtoMessage()    {}
func (*RandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4d85a1e57dd11e4, []int{0}
}
func (m *RandomData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandomData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandomData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandomData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomData.Merge(m, src)
}
func (m *RandomData) XXX_Size() int {
	return m.Size()
}
func (m *RandomData) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomData.DiscardUnknown(m)
}

var xxx_messageInfo_RandomData proto.InternalMessageInfo

func (m *RandomData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RandomData) GetRandomNumber() string {
	if m != nil {
		return m.RandomNumber
	}
	return ""
}

func (m *RandomData) GetEpochNumber() string {
	if m != nil {
		return m.EpochNumber
	}
	return ""
}

func init() {
	proto.RegisterType((*RandomData)(nil), "soarchain.epoch.RandomData")
}

func init() { proto.RegisterFile("epoch/random_data.proto", fileDescriptor_a4d85a1e57dd11e4) }

var fileDescriptor_a4d85a1e57dd11e4 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2d, 0xc8, 0x4f,
	0xce, 0xd0, 0x2f, 0x4a, 0xcc, 0x4b, 0xc9, 0xcf, 0x8d, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2f, 0xce, 0x4f, 0x2c, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x03,
	0x2b, 0x51, 0x4a, 0xe2, 0xe2, 0x0a, 0x02, 0xab, 0x72, 0x49, 0x2c, 0x49, 0x14, 0xe2, 0xe3, 0x62,
	0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x11, 0x52, 0xe2, 0xe2,
	0x81, 0x98, 0xe1, 0x57, 0x9a, 0x9b, 0x94, 0x5a, 0x24, 0xc1, 0x04, 0x96, 0x41, 0x11, 0x13, 0x52,
	0xe0, 0xe2, 0x06, 0x1b, 0x05, 0x55, 0xc2, 0x0c, 0x56, 0x82, 0x2c, 0xe4, 0x64, 0x78, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1,
	0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xe2, 0x70, 0xe7, 0xe8, 0x57, 0xe8, 0x43, 0xdc,
	0x5c, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x76, 0xae, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x88, 0xa2, 0xd3, 0xaf, 0xc9, 0x00, 0x00, 0x00,
}

func (m *RandomData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RandomData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochNumber) > 0 {
		i -= len(m.EpochNumber)
		copy(dAtA[i:], m.EpochNumber)
		i = encodeVarintRandomData(dAtA, i, uint64(len(m.EpochNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RandomNumber) > 0 {
		i -= len(m.RandomNumber)
		copy(dAtA[i:], m.RandomNumber)
		i = encodeVarintRandomData(dAtA, i, uint64(len(m.RandomNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRandomData(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRandomData(dAtA []byte, offset int, v uint64) int {
	offset -= sovRandomData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RandomData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRandomData(uint64(l))
	}
	l = len(m.RandomNumber)
	if l > 0 {
		n += 1 + l + sovRandomData(uint64(l))
	}
	l = len(m.EpochNumber)
	if l > 0 {
		n += 1 + l + sovRandomData(uint64(l))
	}
	return n
}

func sovRandomData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRandomData(x uint64) (n int) {
	return sovRandomData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RandomData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandomData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandomData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandomData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandomData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandomData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRandomData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRandomData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRandomData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRandomData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandomData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRandomData = fmt.Errorf("proto: unexpected end of group")
)
