// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: epoch/epoch_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochData struct {
	TotalEpochs               uint64 `protobuf:"varint,1,opt,name=totalEpochs,proto3" json:"totalEpochs,omitempty"`
	EpochV2VRX                string `protobuf:"bytes,2,opt,name=epochV2VRX,proto3" json:"epochV2VRX,omitempty"`
	EpochV2VBX                string `protobuf:"bytes,3,opt,name=epochV2VBX,proto3" json:"epochV2VBX,omitempty"`
	EpochV2NBX                string `protobuf:"bytes,4,opt,name=epochV2NBX,proto3" json:"epochV2NBX,omitempty"`
	EpochRunner               string `protobuf:"bytes,5,opt,name=epochRunner,proto3" json:"epochRunner,omitempty"`
	EpochChallenger           string `protobuf:"bytes,6,opt,name=epochChallenger,proto3" json:"epochChallenger,omitempty"`
	V2VRXTotalChallenges      uint64 `protobuf:"varint,7,opt,name=v2vRXTotalChallenges,proto3" json:"v2vRXTotalChallenges,omitempty"`
	V2VBXTotalChallenges      uint64 `protobuf:"varint,8,opt,name=v2vBXTotalChallenges,proto3" json:"v2vBXTotalChallenges,omitempty"`
	V2NBXTotalChallenges      uint64 `protobuf:"varint,9,opt,name=v2nBXTotalChallenges,proto3" json:"v2nBXTotalChallenges,omitempty"`
	RunnerTotalChallenges     uint64 `protobuf:"varint,10,opt,name=runnerTotalChallenges,proto3" json:"runnerTotalChallenges,omitempty"`
	ChallengerTotalChallenges uint64 `protobuf:"varint,11,opt,name=challengerTotalChallenges,proto3" json:"challengerTotalChallenges,omitempty"`
}

func (m *EpochData) Reset()         { *m = EpochData{} }
func (m *EpochData) String() string { return proto.CompactTextString(m) }
func (*EpochData) ProtoMessage()    {}
func (*EpochData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1e39962d742c95, []int{0}
}
func (m *EpochData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochData.Merge(m, src)
}
func (m *EpochData) XXX_Size() int {
	return m.Size()
}
func (m *EpochData) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochData.DiscardUnknown(m)
}

var xxx_messageInfo_EpochData proto.InternalMessageInfo

func (m *EpochData) GetTotalEpochs() uint64 {
	if m != nil {
		return m.TotalEpochs
	}
	return 0
}

func (m *EpochData) GetEpochV2VRX() string {
	if m != nil {
		return m.EpochV2VRX
	}
	return ""
}

func (m *EpochData) GetEpochV2VBX() string {
	if m != nil {
		return m.EpochV2VBX
	}
	return ""
}

func (m *EpochData) GetEpochV2NBX() string {
	if m != nil {
		return m.EpochV2NBX
	}
	return ""
}

func (m *EpochData) GetEpochRunner() string {
	if m != nil {
		return m.EpochRunner
	}
	return ""
}

func (m *EpochData) GetEpochChallenger() string {
	if m != nil {
		return m.EpochChallenger
	}
	return ""
}

func (m *EpochData) GetV2VRXTotalChallenges() uint64 {
	if m != nil {
		return m.V2VRXTotalChallenges
	}
	return 0
}

func (m *EpochData) GetV2VBXTotalChallenges() uint64 {
	if m != nil {
		return m.V2VBXTotalChallenges
	}
	return 0
}

func (m *EpochData) GetV2NBXTotalChallenges() uint64 {
	if m != nil {
		return m.V2NBXTotalChallenges
	}
	return 0
}

func (m *EpochData) GetRunnerTotalChallenges() uint64 {
	if m != nil {
		return m.RunnerTotalChallenges
	}
	return 0
}

func (m *EpochData) GetChallengerTotalChallenges() uint64 {
	if m != nil {
		return m.ChallengerTotalChallenges
	}
	return 0
}

func init() {
	proto.RegisterType((*EpochData)(nil), "soarchain.epoch.EpochData")
}

func init() { proto.RegisterFile("epoch/epoch_data.proto", fileDescriptor_fd1e39962d742c95) }

var fileDescriptor_fd1e39962d742c95 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x2d, 0xc8, 0x4f,
	0xce, 0xd0, 0x07, 0x93, 0xf1, 0x29, 0x89, 0x25, 0x89, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xfc, 0xc5, 0xf9, 0x89, 0x45, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x7a, 0x60, 0x39, 0xa5, 0x97, 0xcc,
	0x5c, 0x9c, 0xae, 0x20, 0x96, 0x4b, 0x62, 0x49, 0xa2, 0x90, 0x02, 0x17, 0x77, 0x49, 0x7e, 0x49,
	0x62, 0x0e, 0x58, 0xa4, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0x25, 0x08, 0x59, 0x48, 0x48, 0x8e,
	0x8b, 0x0b, 0xac, 0x31, 0xcc, 0x28, 0x2c, 0x28, 0x42, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08,
	0x49, 0x04, 0x59, 0xde, 0x29, 0x42, 0x82, 0x19, 0x55, 0xde, 0x09, 0x59, 0xde, 0xcf, 0x29, 0x42,
	0x82, 0x05, 0x45, 0xde, 0xcf, 0x29, 0x02, 0xe4, 0x02, 0x30, 0x2f, 0xa8, 0x34, 0x2f, 0x2f, 0xb5,
	0x48, 0x82, 0x15, 0xac, 0x00, 0x59, 0x48, 0x48, 0x83, 0x8b, 0x1f, 0xcc, 0x75, 0xce, 0x48, 0xcc,
	0xc9, 0x49, 0xcd, 0x4b, 0x4f, 0x2d, 0x92, 0x60, 0x03, 0xab, 0x42, 0x17, 0x16, 0x32, 0xe2, 0x12,
	0x29, 0x33, 0x2a, 0x0b, 0x8a, 0x08, 0x01, 0xb9, 0x1f, 0x2e, 0x5e, 0x2c, 0xc1, 0x0e, 0xf6, 0x16,
	0x56, 0x39, 0xa8, 0x1e, 0x27, 0x0c, 0x3d, 0x1c, 0x70, 0x3d, 0x4e, 0xd8, 0xf5, 0xe4, 0x61, 0xea,
	0xe1, 0x84, 0xe9, 0xc1, 0x94, 0x13, 0x32, 0xe1, 0x12, 0x2d, 0x02, 0xfb, 0x07, 0x5d, 0x13, 0x17,
	0x58, 0x13, 0x76, 0x49, 0x21, 0x1b, 0x2e, 0xc9, 0x64, 0xb8, 0xff, 0xd0, 0x75, 0x72, 0x83, 0x75,
	0xe2, 0x56, 0xe0, 0x64, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xe2,
	0xf0, 0x64, 0xa1, 0x5f, 0x01, 0x49, 0x34, 0xfa, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0,
	0x64, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x1f, 0x4d, 0x55, 0x50, 0x02, 0x00, 0x00,
}

func (m *EpochData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengerTotalChallenges != 0 {
		i = encodeVarintEpochData(dAtA, i, uint64(m.ChallengerTotalChallenges))
		i--
		dAtA[i] = 0x58
	}
	if m.RunnerTotalChallenges != 0 {
		i = encodeVarintEpochData(dAtA, i, uint64(m.RunnerTotalChallenges))
		i--
		dAtA[i] = 0x50
	}
	if m.V2NBXTotalChallenges != 0 {
		i = encodeVarintEpochData(dAtA, i, uint64(m.V2NBXTotalChallenges))
		i--
		dAtA[i] = 0x48
	}
	if m.V2VBXTotalChallenges != 0 {
		i = encodeVarintEpochData(dAtA, i, uint64(m.V2VBXTotalChallenges))
		i--
		dAtA[i] = 0x40
	}
	if m.V2VRXTotalChallenges != 0 {
		i = encodeVarintEpochData(dAtA, i, uint64(m.V2VRXTotalChallenges))
		i--
		dAtA[i] = 0x38
	}
	if len(m.EpochChallenger) > 0 {
		i -= len(m.EpochChallenger)
		copy(dAtA[i:], m.EpochChallenger)
		i = encodeVarintEpochData(dAtA, i, uint64(len(m.EpochChallenger)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EpochRunner) > 0 {
		i -= len(m.EpochRunner)
		copy(dAtA[i:], m.EpochRunner)
		i = encodeVarintEpochData(dAtA, i, uint64(len(m.EpochRunner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EpochV2NBX) > 0 {
		i -= len(m.EpochV2NBX)
		copy(dAtA[i:], m.EpochV2NBX)
		i = encodeVarintEpochData(dAtA, i, uint64(len(m.EpochV2NBX)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EpochV2VBX) > 0 {
		i -= len(m.EpochV2VBX)
		copy(dAtA[i:], m.EpochV2VBX)
		i = encodeVarintEpochData(dAtA, i, uint64(len(m.EpochV2VBX)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EpochV2VRX) > 0 {
		i -= len(m.EpochV2VRX)
		copy(dAtA[i:], m.EpochV2VRX)
		i = encodeVarintEpochData(dAtA, i, uint64(len(m.EpochV2VRX)))
		i--
		dAtA[i] = 0x12
	}
	if m.TotalEpochs != 0 {
		i = encodeVarintEpochData(dAtA, i, uint64(m.TotalEpochs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochData(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalEpochs != 0 {
		n += 1 + sovEpochData(uint64(m.TotalEpochs))
	}
	l = len(m.EpochV2VRX)
	if l > 0 {
		n += 1 + l + sovEpochData(uint64(l))
	}
	l = len(m.EpochV2VBX)
	if l > 0 {
		n += 1 + l + sovEpochData(uint64(l))
	}
	l = len(m.EpochV2NBX)
	if l > 0 {
		n += 1 + l + sovEpochData(uint64(l))
	}
	l = len(m.EpochRunner)
	if l > 0 {
		n += 1 + l + sovEpochData(uint64(l))
	}
	l = len(m.EpochChallenger)
	if l > 0 {
		n += 1 + l + sovEpochData(uint64(l))
	}
	if m.V2VRXTotalChallenges != 0 {
		n += 1 + sovEpochData(uint64(m.V2VRXTotalChallenges))
	}
	if m.V2VBXTotalChallenges != 0 {
		n += 1 + sovEpochData(uint64(m.V2VBXTotalChallenges))
	}
	if m.V2NBXTotalChallenges != 0 {
		n += 1 + sovEpochData(uint64(m.V2NBXTotalChallenges))
	}
	if m.RunnerTotalChallenges != 0 {
		n += 1 + sovEpochData(uint64(m.RunnerTotalChallenges))
	}
	if m.ChallengerTotalChallenges != 0 {
		n += 1 + sovEpochData(uint64(m.ChallengerTotalChallenges))
	}
	return n
}

func sovEpochData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochData(x uint64) (n int) {
	return sovEpochData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEpochs", wireType)
			}
			m.TotalEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochV2VRX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochV2VRX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochV2VBX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochV2VBX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochV2NBX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochV2NBX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRunner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochRunner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochChallenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochChallenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2VRXTotalChallenges", wireType)
			}
			m.V2VRXTotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V2VRXTotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2VBXTotalChallenges", wireType)
			}
			m.V2VBXTotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V2VBXTotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NBXTotalChallenges", wireType)
			}
			m.V2NBXTotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V2NBXTotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerTotalChallenges", wireType)
			}
			m.RunnerTotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunnerTotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerTotalChallenges", wireType)
			}
			m.ChallengerTotalChallenges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengerTotalChallenges |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpochData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochData = fmt.Errorf("proto: unexpected end of group")
)
