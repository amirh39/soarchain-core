// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/client_did.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientDid struct {
	Id       string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address  string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PubKey   string     `protobuf:"bytes,3,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Type     string     `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Created  string     `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Updated  string     `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	DprInfos []*DprInfo `protobuf:"bytes,7,rep,name=DprInfos,proto3" json:"DprInfos,omitempty"`
}

func (m *ClientDid) Reset()         { *m = ClientDid{} }
func (m *ClientDid) String() string { return proto.CompactTextString(m) }
func (*ClientDid) ProtoMessage()    {}
func (*ClientDid) Descriptor() ([]byte, []int) {
	return fileDescriptor_354a06ef6b445e83, []int{0}
}
func (m *ClientDid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientDid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientDid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientDid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientDid.Merge(m, src)
}
func (m *ClientDid) XXX_Size() int {
	return m.Size()
}
func (m *ClientDid) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientDid.DiscardUnknown(m)
}

var xxx_messageInfo_ClientDid proto.InternalMessageInfo

func (m *ClientDid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientDid) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClientDid) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *ClientDid) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClientDid) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *ClientDid) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *ClientDid) GetDprInfos() []*DprInfo {
	if m != nil {
		return m.DprInfos
	}
	return nil
}

// Define the DprInfo message that holds id and claimed information
type DprInfo struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Claimed string `protobuf:"bytes,2,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (m *DprInfo) Reset()         { *m = DprInfo{} }
func (m *DprInfo) String() string { return proto.CompactTextString(m) }
func (*DprInfo) ProtoMessage()    {}
func (*DprInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_354a06ef6b445e83, []int{1}
}
func (m *DprInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DprInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DprInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DprInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DprInfo.Merge(m, src)
}
func (m *DprInfo) XXX_Size() int {
	return m.Size()
}
func (m *DprInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DprInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DprInfo proto.InternalMessageInfo

func (m *DprInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DprInfo) GetClaimed() string {
	if m != nil {
		return m.Claimed
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientDid)(nil), "soarchain.did.ClientDid")
	proto.RegisterType((*DprInfo)(nil), "soarchain.did.DprInfo")
}

func init() { proto.RegisterFile("did/client_did.proto", fileDescriptor_354a06ef6b445e83) }

var fileDescriptor_354a06ef6b445e83 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0xb4, 0x24, 0xd4, 0x08, 0x06, 0xab, 0x54, 0x16, 0x83, 0x55, 0x75, 0xea, 0x14,
	0x4b, 0xed, 0x1b, 0x40, 0x17, 0xc4, 0xd6, 0x91, 0x05, 0xb9, 0x39, 0x53, 0x2c, 0x95, 0xd8, 0xb2,
	0x53, 0x89, 0xbe, 0x05, 0x8f, 0x05, 0x5b, 0x47, 0x46, 0x94, 0xbc, 0x08, 0xb2, 0xe3, 0x46, 0x42,
	0xea, 0x76, 0xdf, 0x7d, 0xe7, 0xb3, 0xfe, 0xc3, 0x63, 0x50, 0xc0, 0xcb, 0x9d, 0x92, 0x55, 0xfd,
	0x02, 0x0a, 0x0a, 0x63, 0x75, 0xad, 0xc9, 0xb5, 0xd3, 0xc2, 0x96, 0x6f, 0x42, 0x55, 0x05, 0x28,
	0xb8, 0x1b, 0x6f, 0xf5, 0x56, 0x07, 0xc3, 0x7d, 0xd5, 0x0d, 0xcd, 0xbe, 0x11, 0x1e, 0x3d, 0x84,
	0x97, 0x2b, 0x05, 0xe4, 0x06, 0xa7, 0x0a, 0x28, 0x9a, 0xa2, 0xf9, 0x68, 0x9d, 0x2a, 0x20, 0x14,
	0xe7, 0x02, 0xc0, 0x4a, 0xe7, 0x68, 0x1a, 0x9a, 0x27, 0x24, 0x13, 0x9c, 0x99, 0xfd, 0xe6, 0x49,
	0x1e, 0xe8, 0x20, 0x88, 0x48, 0x84, 0xe0, 0x61, 0x7d, 0x30, 0x92, 0x0e, 0x43, 0x37, 0xd4, 0x7e,
	0x4b, 0x69, 0xa5, 0xa8, 0x25, 0xd0, 0x8b, 0x6e, 0x4b, 0x44, 0x6f, 0xf6, 0x06, 0x82, 0xc9, 0x3a,
	0x13, 0x91, 0x2c, 0xf0, 0xe5, 0xca, 0xd8, 0xc7, 0xea, 0x55, 0x3b, 0x9a, 0x4f, 0x07, 0xf3, 0xab,
	0xc5, 0xa4, 0xf8, 0x97, 0xa7, 0x88, 0x7a, 0xdd, 0xcf, 0xcd, 0x96, 0x38, 0x8f, 0xf5, 0xb9, 0x20,
	0xe5, 0x4e, 0xa8, 0x77, 0x09, 0xa7, 0x20, 0x11, 0xef, 0xf9, 0x57, 0xc3, 0xd0, 0xb1, 0x61, 0xe8,
	0xb7, 0x61, 0xe8, 0xb3, 0x65, 0xc9, 0xb1, 0x65, 0xc9, 0x4f, 0xcb, 0x92, 0xe7, 0xdb, 0xfe, 0x3f,
	0xfe, 0xc1, 0xfd, 0x85, 0x7d, 0x18, 0xb7, 0xc9, 0xc2, 0xe1, 0x96, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xec, 0x8d, 0x46, 0x7a, 0x75, 0x01, 0x00, 0x00,
}

func (m *ClientDid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientDid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DprInfos) > 0 {
		for iNdEx := len(m.DprInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DprInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClientDid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Updated) > 0 {
		i -= len(m.Updated)
		copy(dAtA[i:], m.Updated)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Updated)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DprInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DprInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DprInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claimed) > 0 {
		i -= len(m.Claimed)
		copy(dAtA[i:], m.Claimed)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Claimed)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintClientDid(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientDid(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientDid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientDid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	l = len(m.Updated)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	if len(m.DprInfos) > 0 {
		for _, e := range m.DprInfos {
			l = e.Size()
			n += 1 + l + sovClientDid(uint64(l))
		}
	}
	return n
}

func (m *DprInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	l = len(m.Claimed)
	if l > 0 {
		n += 1 + l + sovClientDid(uint64(l))
	}
	return n
}

func sovClientDid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientDid(x uint64) (n int) {
	return sovClientDid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientDid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientDid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DprInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DprInfos = append(m.DprInfos, &DprInfo{})
			if err := m.DprInfos[len(m.DprInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientDid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientDid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DprInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientDid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DprInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DprInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientDid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientDid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientDid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientDid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientDid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientDid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientDid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientDid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientDid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientDid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientDid = fmt.Errorf("proto: unexpected end of group")
)
