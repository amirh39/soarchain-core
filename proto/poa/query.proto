syntax = "proto3";
package soarchain.poa;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "poa/params.proto";
import "poa/vrf_data.proto";
import "poa/master_key.proto";
import "poa/factory_keys.proto";
import "poa/reputation.proto";

option go_package = "github.com/amirh39/soarchain-core/x/poa/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/soarchain/poa/params";
  }


	// Queries a VrfData by index.
	rpc VrfData(QueryGetVrfDataRequest) returns (QueryGetVrfDataResponse) {
		option (google.api.http).get = "/soarchain/poa/vrf_data/{index}";
	}

	// Queries a list of VrfData items.
	rpc VrfDataAll(QueryAllVrfDataRequest) returns (QueryAllVrfDataResponse) {
		option (google.api.http).get = "/soarchain/poa/vrf_data";
	}

// Queries a list of VerifyRandomNumber items.
	rpc VerifyRandomNumber(QueryVerifyRandomNumberRequest) returns (QueryVerifyRandomNumberResponse) {
		option (google.api.http).get = "/soarchain/poa/verify_random_number/{pubkey}/{message}/{vrv}/{proof}";
	}

// Queries a list of IsChallengeable items.
	rpc IsChallengeable(QueryIsChallengeableRequest) returns (QueryIsChallengeableResponse) {
		option (google.api.http).get = "/soarchain/poa/is_challengeable/{clientAddr}";
	}

// Queries a MasterKey by index.
	rpc MasterKey(QueryGetMasterKeyRequest) returns (QueryGetMasterKeyResponse) {
		option (google.api.http).get = "/soarchain/poa/master_key";
	}
// Queries a FactoryKeys by id.
	rpc FactoryKeys(QueryGetFactoryKeysRequest) returns (QueryGetFactoryKeysResponse) {
		option (google.api.http).get = "/soarchain/poa/factory_keys/{id}";
	}

	// Queries a list of FactoryKeys items.
	rpc FactoryKeysAll(QueryAllFactoryKeysRequest) returns (QueryAllFactoryKeysResponse) {
		option (google.api.http).get = "/soarchain/poa/factory_keys";
	}

	rpc Reputation(QueryGetReputationRequest) returns (QueryGetReputationResponse) {
		option (google.api.http).get = "/soarchain/poa/reputation/{pubkey}";
	}

	rpc ReputationAll(QueryAllReputationRequest) returns (QueryAllReputationResponse) {
		option (google.api.http).get = "/soarchain/poa/reputation";
	}

	rpc GetReputationByAddress(QueryGetReputationByAddressRequest) returns (QueryGetReputationByAddressResponse) {
		option (google.api.http).get = "/soarchain/poa/get_reputation_by_address/{address}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetVrfDataRequest {
	  string index = 1;

}

message QueryGetVrfDataResponse {
	VrfData vrfData = 1 [(gogoproto.nullable) = false];
}

message QueryAllVrfDataRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVrfDataResponse {
	repeated VrfData vrfData = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryVerifyRandomNumberRequest {
  string pubkey = 1;
  string message = 2;
  string vrv = 3;
  string proof = 4;
}

message QueryVerifyRandomNumberResponse {
  bool result = 1;
}

message QueryIsChallengeableRequest {
  string clientAddr = 1;
}

message QueryIsChallengeableResponse {
  string resultBool = 1;
  string challengeabilityScore = 2;
}

message QueryGetMasterKeyRequest {}

message QueryGetMasterKeyResponse {
	MasterKey masterKey = 1 [(gogoproto.nullable) = false];
}
message QueryGetFactoryKeysRequest {
	uint64 id = 1;
}

message QueryGetFactoryKeysResponse {
	FactoryKeys factoryKeys = 1 [(gogoproto.nullable) = false];
}

message QueryAllFactoryKeysRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFactoryKeysResponse {
	repeated FactoryKeys factoryKeys = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetReputationRequest {
	string pubkey = 1;
}

message QueryGetReputationResponse {
  Reputation reputation = 1 [(gogoproto.nullable) = false];
}

message QueryAllReputationRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReputationResponse {
  repeated Reputation reputation = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetReputationByAddressRequest {
	string address = 1;
}

message QueryGetReputationByAddressResponse {
	Reputation reputation = 1;
}
// this line is used by starport scaffolding # 3
