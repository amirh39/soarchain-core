// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUnregisterGuard } from "./types/poa/tx";
import { MsgClaimMotusRewards } from "./types/poa/tx";
import { MsgGenGuard } from "./types/poa/tx";
import { MsgUpdateGuard } from "./types/poa/tx";
import { MsgUnregisterChallenger } from "./types/poa/tx";
import { MsgChallengeService } from "./types/poa/tx";
import { MsgUnregisterRunner } from "./types/poa/tx";
import { MsgSelectRandomChallenger } from "./types/poa/tx";
import { MsgGenClient } from "./types/poa/tx";
import { MsgUnregisterClient } from "./types/poa/tx";
import { MsgRunnerChallenge } from "./types/poa/tx";
import { MsgSelectRandomRunner } from "./types/poa/tx";
import { MsgClaimRunnerRewards } from "./types/poa/tx";


export { MsgUnregisterGuard, MsgClaimMotusRewards, MsgGenGuard, MsgUpdateGuard, MsgUnregisterChallenger, MsgChallengeService, MsgUnregisterRunner, MsgSelectRandomChallenger, MsgGenClient, MsgUnregisterClient, MsgRunnerChallenge, MsgSelectRandomRunner, MsgClaimRunnerRewards };

type sendMsgUnregisterGuardParams = {
  value: MsgUnregisterGuard,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimMotusRewardsParams = {
  value: MsgClaimMotusRewards,
  fee?: StdFee,
  memo?: string
};

type sendMsgGenGuardParams = {
  value: MsgGenGuard,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateGuardParams = {
  value: MsgUpdateGuard,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnregisterChallengerParams = {
  value: MsgUnregisterChallenger,
  fee?: StdFee,
  memo?: string
};

type sendMsgChallengeServiceParams = {
  value: MsgChallengeService,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnregisterRunnerParams = {
  value: MsgUnregisterRunner,
  fee?: StdFee,
  memo?: string
};

type sendMsgSelectRandomChallengerParams = {
  value: MsgSelectRandomChallenger,
  fee?: StdFee,
  memo?: string
};

type sendMsgGenClientParams = {
  value: MsgGenClient,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnregisterClientParams = {
  value: MsgUnregisterClient,
  fee?: StdFee,
  memo?: string
};

type sendMsgRunnerChallengeParams = {
  value: MsgRunnerChallenge,
  fee?: StdFee,
  memo?: string
};

type sendMsgSelectRandomRunnerParams = {
  value: MsgSelectRandomRunner,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimRunnerRewardsParams = {
  value: MsgClaimRunnerRewards,
  fee?: StdFee,
  memo?: string
};


type msgUnregisterGuardParams = {
  value: MsgUnregisterGuard,
};

type msgClaimMotusRewardsParams = {
  value: MsgClaimMotusRewards,
};

type msgGenGuardParams = {
  value: MsgGenGuard,
};

type msgUpdateGuardParams = {
  value: MsgUpdateGuard,
};

type msgUnregisterChallengerParams = {
  value: MsgUnregisterChallenger,
};

type msgChallengeServiceParams = {
  value: MsgChallengeService,
};

type msgUnregisterRunnerParams = {
  value: MsgUnregisterRunner,
};

type msgSelectRandomChallengerParams = {
  value: MsgSelectRandomChallenger,
};

type msgGenClientParams = {
  value: MsgGenClient,
};

type msgUnregisterClientParams = {
  value: MsgUnregisterClient,
};

type msgRunnerChallengeParams = {
  value: MsgRunnerChallenge,
};

type msgSelectRandomRunnerParams = {
  value: MsgSelectRandomRunner,
};

type msgClaimRunnerRewardsParams = {
  value: MsgClaimRunnerRewards,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUnregisterGuard({ value, fee, memo }: sendMsgUnregisterGuardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnregisterGuard: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnregisterGuard({ value: MsgUnregisterGuard.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnregisterGuard: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimMotusRewards({ value, fee, memo }: sendMsgClaimMotusRewardsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimMotusRewards: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClaimMotusRewards({ value: MsgClaimMotusRewards.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimMotusRewards: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgGenGuard({ value, fee, memo }: sendMsgGenGuardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgGenGuard: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgGenGuard({ value: MsgGenGuard.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgGenGuard: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateGuard({ value, fee, memo }: sendMsgUpdateGuardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateGuard: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateGuard({ value: MsgUpdateGuard.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateGuard: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnregisterChallenger({ value, fee, memo }: sendMsgUnregisterChallengerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnregisterChallenger: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnregisterChallenger({ value: MsgUnregisterChallenger.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnregisterChallenger: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgChallengeService({ value, fee, memo }: sendMsgChallengeServiceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgChallengeService: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgChallengeService({ value: MsgChallengeService.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgChallengeService: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnregisterRunner({ value, fee, memo }: sendMsgUnregisterRunnerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnregisterRunner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnregisterRunner({ value: MsgUnregisterRunner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnregisterRunner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSelectRandomChallenger({ value, fee, memo }: sendMsgSelectRandomChallengerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSelectRandomChallenger: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSelectRandomChallenger({ value: MsgSelectRandomChallenger.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSelectRandomChallenger: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgGenClient({ value, fee, memo }: sendMsgGenClientParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgGenClient: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgGenClient({ value: MsgGenClient.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgGenClient: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnregisterClient({ value, fee, memo }: sendMsgUnregisterClientParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnregisterClient: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnregisterClient({ value: MsgUnregisterClient.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnregisterClient: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRunnerChallenge({ value, fee, memo }: sendMsgRunnerChallengeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRunnerChallenge: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRunnerChallenge({ value: MsgRunnerChallenge.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRunnerChallenge: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSelectRandomRunner({ value, fee, memo }: sendMsgSelectRandomRunnerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSelectRandomRunner: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSelectRandomRunner({ value: MsgSelectRandomRunner.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSelectRandomRunner: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimRunnerRewards({ value, fee, memo }: sendMsgClaimRunnerRewardsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimRunnerRewards: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClaimRunnerRewards({ value: MsgClaimRunnerRewards.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimRunnerRewards: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUnregisterGuard({ value }: msgUnregisterGuardParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgUnregisterGuard", value: MsgUnregisterGuard.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnregisterGuard: Could not create message: ' + e.message)
			}
		},
		
		msgClaimMotusRewards({ value }: msgClaimMotusRewardsParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgClaimMotusRewards", value: MsgClaimMotusRewards.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimMotusRewards: Could not create message: ' + e.message)
			}
		},
		
		msgGenGuard({ value }: msgGenGuardParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgGenGuard", value: MsgGenGuard.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgGenGuard: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateGuard({ value }: msgUpdateGuardParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgUpdateGuard", value: MsgUpdateGuard.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateGuard: Could not create message: ' + e.message)
			}
		},
		
		msgUnregisterChallenger({ value }: msgUnregisterChallengerParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgUnregisterChallenger", value: MsgUnregisterChallenger.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnregisterChallenger: Could not create message: ' + e.message)
			}
		},
		
		msgChallengeService({ value }: msgChallengeServiceParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgChallengeService", value: MsgChallengeService.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgChallengeService: Could not create message: ' + e.message)
			}
		},
		
		msgUnregisterRunner({ value }: msgUnregisterRunnerParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgUnregisterRunner", value: MsgUnregisterRunner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnregisterRunner: Could not create message: ' + e.message)
			}
		},
		
		msgSelectRandomChallenger({ value }: msgSelectRandomChallengerParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgSelectRandomChallenger", value: MsgSelectRandomChallenger.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSelectRandomChallenger: Could not create message: ' + e.message)
			}
		},
		
		msgGenClient({ value }: msgGenClientParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgGenClient", value: MsgGenClient.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgGenClient: Could not create message: ' + e.message)
			}
		},
		
		msgUnregisterClient({ value }: msgUnregisterClientParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgUnregisterClient", value: MsgUnregisterClient.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnregisterClient: Could not create message: ' + e.message)
			}
		},
		
		msgRunnerChallenge({ value }: msgRunnerChallengeParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgRunnerChallenge", value: MsgRunnerChallenge.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRunnerChallenge: Could not create message: ' + e.message)
			}
		},
		
		msgSelectRandomRunner({ value }: msgSelectRandomRunnerParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgSelectRandomRunner", value: MsgSelectRandomRunner.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSelectRandomRunner: Could not create message: ' + e.message)
			}
		},
		
		msgClaimRunnerRewards({ value }: msgClaimRunnerRewardsParams): EncodeObject {
			try {
				return { typeUrl: "/soarchain.poa.MsgClaimRunnerRewards", value: MsgClaimRunnerRewards.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimRunnerRewards: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SoarchainPoa: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;