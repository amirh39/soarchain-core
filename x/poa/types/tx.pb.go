// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poa/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgGenClient struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pubkey  string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgGenClient) Reset()         { *m = MsgGenClient{} }
func (m *MsgGenClient) String() string { return proto.CompactTextString(m) }
func (*MsgGenClient) ProtoMessage()    {}
func (*MsgGenClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{0}
}
func (m *MsgGenClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenClient.Merge(m, src)
}
func (m *MsgGenClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenClient proto.InternalMessageInfo

func (m *MsgGenClient) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGenClient) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type MsgGenClientResponse struct {
}

func (m *MsgGenClientResponse) Reset()         { *m = MsgGenClientResponse{} }
func (m *MsgGenClientResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGenClientResponse) ProtoMessage()    {}
func (*MsgGenClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{1}
}
func (m *MsgGenClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenClientResponse.Merge(m, src)
}
func (m *MsgGenClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenClientResponse proto.InternalMessageInfo

type MsgChallengeService struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClientPubkey            string `protobuf:"bytes,2,opt,name=clientPubkey,proto3" json:"clientPubkey,omitempty"`
	ClientCommunicationMode string `protobuf:"bytes,3,opt,name=clientCommunicationMode,proto3" json:"clientCommunicationMode,omitempty"`
	ChallengeResult         string `protobuf:"bytes,4,opt,name=challengeResult,proto3" json:"challengeResult,omitempty"`
}

func (m *MsgChallengeService) Reset()         { *m = MsgChallengeService{} }
func (m *MsgChallengeService) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeService) ProtoMessage()    {}
func (*MsgChallengeService) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{2}
}
func (m *MsgChallengeService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeService.Merge(m, src)
}
func (m *MsgChallengeService) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeService) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeService.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeService proto.InternalMessageInfo

func (m *MsgChallengeService) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgChallengeService) GetClientPubkey() string {
	if m != nil {
		return m.ClientPubkey
	}
	return ""
}

func (m *MsgChallengeService) GetClientCommunicationMode() string {
	if m != nil {
		return m.ClientCommunicationMode
	}
	return ""
}

func (m *MsgChallengeService) GetChallengeResult() string {
	if m != nil {
		return m.ChallengeResult
	}
	return ""
}

type MsgChallengeServiceResponse struct {
}

func (m *MsgChallengeServiceResponse) Reset()         { *m = MsgChallengeServiceResponse{} }
func (m *MsgChallengeServiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeServiceResponse) ProtoMessage()    {}
func (*MsgChallengeServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{3}
}
func (m *MsgChallengeServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeServiceResponse.Merge(m, src)
}
func (m *MsgChallengeServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeServiceResponse proto.InternalMessageInfo

type MsgUnregisterClient struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pubkey  string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgUnregisterClient) Reset()         { *m = MsgUnregisterClient{} }
func (m *MsgUnregisterClient) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterClient) ProtoMessage()    {}
func (*MsgUnregisterClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{4}
}
func (m *MsgUnregisterClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterClient.Merge(m, src)
}
func (m *MsgUnregisterClient) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterClient) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterClient.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterClient proto.InternalMessageInfo

func (m *MsgUnregisterClient) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnregisterClient) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type MsgUnregisterClientResponse struct {
}

func (m *MsgUnregisterClientResponse) Reset()         { *m = MsgUnregisterClientResponse{} }
func (m *MsgUnregisterClientResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterClientResponse) ProtoMessage()    {}
func (*MsgUnregisterClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{5}
}
func (m *MsgUnregisterClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterClientResponse.Merge(m, src)
}
func (m *MsgUnregisterClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterClientResponse proto.InternalMessageInfo

type MsgUnregisterChallenger struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChallengerAddress string `protobuf:"bytes,2,opt,name=challengerAddress,proto3" json:"challengerAddress,omitempty"`
}

func (m *MsgUnregisterChallenger) Reset()         { *m = MsgUnregisterChallenger{} }
func (m *MsgUnregisterChallenger) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterChallenger) ProtoMessage()    {}
func (*MsgUnregisterChallenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{6}
}
func (m *MsgUnregisterChallenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterChallenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterChallenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterChallenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterChallenger.Merge(m, src)
}
func (m *MsgUnregisterChallenger) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterChallenger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterChallenger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterChallenger proto.InternalMessageInfo

func (m *MsgUnregisterChallenger) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnregisterChallenger) GetChallengerAddress() string {
	if m != nil {
		return m.ChallengerAddress
	}
	return ""
}

type MsgUnregisterChallengerResponse struct {
}

func (m *MsgUnregisterChallengerResponse) Reset()         { *m = MsgUnregisterChallengerResponse{} }
func (m *MsgUnregisterChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterChallengerResponse) ProtoMessage()    {}
func (*MsgUnregisterChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{7}
}
func (m *MsgUnregisterChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterChallengerResponse.Merge(m, src)
}
func (m *MsgUnregisterChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterChallengerResponse proto.InternalMessageInfo

type MsgGenGuard struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GuardPubKey string `protobuf:"bytes,2,opt,name=guardPubKey,proto3" json:"guardPubKey,omitempty"`
	V2XAddr     string `protobuf:"bytes,3,opt,name=v2XAddr,proto3" json:"v2XAddr,omitempty"`
	V2XStake    string `protobuf:"bytes,4,opt,name=v2XStake,proto3" json:"v2XStake,omitempty"`
	V2XIp       string `protobuf:"bytes,5,opt,name=v2XIp,proto3" json:"v2XIp,omitempty"`
	V2NAddr     string `protobuf:"bytes,6,opt,name=v2NAddr,proto3" json:"v2NAddr,omitempty"`
	V2NStake    string `protobuf:"bytes,7,opt,name=v2NStake,proto3" json:"v2NStake,omitempty"`
	V2NIp       string `protobuf:"bytes,8,opt,name=v2NIp,proto3" json:"v2NIp,omitempty"`
	RunnerAddr  string `protobuf:"bytes,9,opt,name=runnerAddr,proto3" json:"runnerAddr,omitempty"`
	RunnerStake string `protobuf:"bytes,10,opt,name=runnerStake,proto3" json:"runnerStake,omitempty"`
	RunnerIp    string `protobuf:"bytes,11,opt,name=runnerIp,proto3" json:"runnerIp,omitempty"`
}

func (m *MsgGenGuard) Reset()         { *m = MsgGenGuard{} }
func (m *MsgGenGuard) String() string { return proto.CompactTextString(m) }
func (*MsgGenGuard) ProtoMessage()    {}
func (*MsgGenGuard) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{8}
}
func (m *MsgGenGuard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenGuard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenGuard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenGuard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenGuard.Merge(m, src)
}
func (m *MsgGenGuard) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenGuard) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenGuard.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenGuard proto.InternalMessageInfo

func (m *MsgGenGuard) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGenGuard) GetGuardPubKey() string {
	if m != nil {
		return m.GuardPubKey
	}
	return ""
}

func (m *MsgGenGuard) GetV2XAddr() string {
	if m != nil {
		return m.V2XAddr
	}
	return ""
}

func (m *MsgGenGuard) GetV2XStake() string {
	if m != nil {
		return m.V2XStake
	}
	return ""
}

func (m *MsgGenGuard) GetV2XIp() string {
	if m != nil {
		return m.V2XIp
	}
	return ""
}

func (m *MsgGenGuard) GetV2NAddr() string {
	if m != nil {
		return m.V2NAddr
	}
	return ""
}

func (m *MsgGenGuard) GetV2NStake() string {
	if m != nil {
		return m.V2NStake
	}
	return ""
}

func (m *MsgGenGuard) GetV2NIp() string {
	if m != nil {
		return m.V2NIp
	}
	return ""
}

func (m *MsgGenGuard) GetRunnerAddr() string {
	if m != nil {
		return m.RunnerAddr
	}
	return ""
}

func (m *MsgGenGuard) GetRunnerStake() string {
	if m != nil {
		return m.RunnerStake
	}
	return ""
}

func (m *MsgGenGuard) GetRunnerIp() string {
	if m != nil {
		return m.RunnerIp
	}
	return ""
}

type MsgGenGuardResponse struct {
}

func (m *MsgGenGuardResponse) Reset()         { *m = MsgGenGuardResponse{} }
func (m *MsgGenGuardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGenGuardResponse) ProtoMessage()    {}
func (*MsgGenGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{9}
}
func (m *MsgGenGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenGuardResponse.Merge(m, src)
}
func (m *MsgGenGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenGuardResponse proto.InternalMessageInfo

type MsgUnregisterRunner struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RunnerAddress string `protobuf:"bytes,2,opt,name=runnerAddress,proto3" json:"runnerAddress,omitempty"`
}

func (m *MsgUnregisterRunner) Reset()         { *m = MsgUnregisterRunner{} }
func (m *MsgUnregisterRunner) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterRunner) ProtoMessage()    {}
func (*MsgUnregisterRunner) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{10}
}
func (m *MsgUnregisterRunner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterRunner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterRunner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterRunner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterRunner.Merge(m, src)
}
func (m *MsgUnregisterRunner) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterRunner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterRunner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterRunner proto.InternalMessageInfo

func (m *MsgUnregisterRunner) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUnregisterRunner) GetRunnerAddress() string {
	if m != nil {
		return m.RunnerAddress
	}
	return ""
}

type MsgUnregisterRunnerResponse struct {
}

func (m *MsgUnregisterRunnerResponse) Reset()         { *m = MsgUnregisterRunnerResponse{} }
func (m *MsgUnregisterRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterRunnerResponse) ProtoMessage()    {}
func (*MsgUnregisterRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{11}
}
func (m *MsgUnregisterRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterRunnerResponse.Merge(m, src)
}
func (m *MsgUnregisterRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterRunnerResponse proto.InternalMessageInfo

type MsgRunnerChallenge struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RunnerAddress string   `protobuf:"bytes,2,opt,name=runnerAddress,proto3" json:"runnerAddress,omitempty"`
	ClientPubkeys []string `protobuf:"bytes,3,rep,name=clientPubkeys,proto3" json:"clientPubkeys,omitempty"`
}

func (m *MsgRunnerChallenge) Reset()         { *m = MsgRunnerChallenge{} }
func (m *MsgRunnerChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgRunnerChallenge) ProtoMessage()    {}
func (*MsgRunnerChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{12}
}
func (m *MsgRunnerChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunnerChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunnerChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunnerChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunnerChallenge.Merge(m, src)
}
func (m *MsgRunnerChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunnerChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunnerChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunnerChallenge proto.InternalMessageInfo

func (m *MsgRunnerChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRunnerChallenge) GetRunnerAddress() string {
	if m != nil {
		return m.RunnerAddress
	}
	return ""
}

func (m *MsgRunnerChallenge) GetClientPubkeys() []string {
	if m != nil {
		return m.ClientPubkeys
	}
	return nil
}

type MsgRunnerChallengeResponse struct {
}

func (m *MsgRunnerChallengeResponse) Reset()         { *m = MsgRunnerChallengeResponse{} }
func (m *MsgRunnerChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRunnerChallengeResponse) ProtoMessage()    {}
func (*MsgRunnerChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{13}
}
func (m *MsgRunnerChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunnerChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunnerChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunnerChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunnerChallengeResponse.Merge(m, src)
}
func (m *MsgRunnerChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunnerChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunnerChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunnerChallengeResponse proto.InternalMessageInfo

type MsgUnregisterGuard struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgUnregisterGuard) Reset()         { *m = MsgUnregisterGuard{} }
func (m *MsgUnregisterGuard) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterGuard) ProtoMessage()    {}
func (*MsgUnregisterGuard) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{14}
}
func (m *MsgUnregisterGuard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterGuard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterGuard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterGuard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterGuard.Merge(m, src)
}
func (m *MsgUnregisterGuard) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterGuard) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterGuard.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterGuard proto.InternalMessageInfo

func (m *MsgUnregisterGuard) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgUnregisterGuardResponse struct {
}

func (m *MsgUnregisterGuardResponse) Reset()         { *m = MsgUnregisterGuardResponse{} }
func (m *MsgUnregisterGuardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnregisterGuardResponse) ProtoMessage()    {}
func (*MsgUnregisterGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{15}
}
func (m *MsgUnregisterGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnregisterGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnregisterGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnregisterGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnregisterGuardResponse.Merge(m, src)
}
func (m *MsgUnregisterGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnregisterGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnregisterGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnregisterGuardResponse proto.InternalMessageInfo

type MsgSelectRandomChallenger struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSelectRandomChallenger) Reset()         { *m = MsgSelectRandomChallenger{} }
func (m *MsgSelectRandomChallenger) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomChallenger) ProtoMessage()    {}
func (*MsgSelectRandomChallenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{16}
}
func (m *MsgSelectRandomChallenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomChallenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomChallenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomChallenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomChallenger.Merge(m, src)
}
func (m *MsgSelectRandomChallenger) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomChallenger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomChallenger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomChallenger proto.InternalMessageInfo

func (m *MsgSelectRandomChallenger) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSelectRandomChallengerResponse struct {
	RandomChallenger *Challenger `protobuf:"bytes,1,opt,name=randomChallenger,proto3" json:"randomChallenger,omitempty"`
}

func (m *MsgSelectRandomChallengerResponse) Reset()         { *m = MsgSelectRandomChallengerResponse{} }
func (m *MsgSelectRandomChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomChallengerResponse) ProtoMessage()    {}
func (*MsgSelectRandomChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{17}
}
func (m *MsgSelectRandomChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomChallengerResponse.Merge(m, src)
}
func (m *MsgSelectRandomChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomChallengerResponse proto.InternalMessageInfo

func (m *MsgSelectRandomChallengerResponse) GetRandomChallenger() *Challenger {
	if m != nil {
		return m.RandomChallenger
	}
	return nil
}

type MsgSelectRandomRunner struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSelectRandomRunner) Reset()         { *m = MsgSelectRandomRunner{} }
func (m *MsgSelectRandomRunner) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomRunner) ProtoMessage()    {}
func (*MsgSelectRandomRunner) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{18}
}
func (m *MsgSelectRandomRunner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomRunner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomRunner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomRunner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomRunner.Merge(m, src)
}
func (m *MsgSelectRandomRunner) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomRunner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomRunner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomRunner proto.InternalMessageInfo

func (m *MsgSelectRandomRunner) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSelectRandomRunnerResponse struct {
	RandomRunner *Runner `protobuf:"bytes,1,opt,name=randomRunner,proto3" json:"randomRunner,omitempty"`
}

func (m *MsgSelectRandomRunnerResponse) Reset()         { *m = MsgSelectRandomRunnerResponse{} }
func (m *MsgSelectRandomRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomRunnerResponse) ProtoMessage()    {}
func (*MsgSelectRandomRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{19}
}
func (m *MsgSelectRandomRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomRunnerResponse.Merge(m, src)
}
func (m *MsgSelectRandomRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomRunnerResponse proto.InternalMessageInfo

func (m *MsgSelectRandomRunnerResponse) GetRandomRunner() *Runner {
	if m != nil {
		return m.RandomRunner
	}
	return nil
}

type MsgUpdateGuard struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	V2XAddr     string `protobuf:"bytes,3,opt,name=v2XAddr,proto3" json:"v2XAddr,omitempty"`
	V2XStake    string `protobuf:"bytes,4,opt,name=v2XStake,proto3" json:"v2XStake,omitempty"`
	V2XIp       string `protobuf:"bytes,5,opt,name=v2XIp,proto3" json:"v2XIp,omitempty"`
	V2NAddr     string `protobuf:"bytes,6,opt,name=v2NAddr,proto3" json:"v2NAddr,omitempty"`
	V2NStake    string `protobuf:"bytes,7,opt,name=v2NStake,proto3" json:"v2NStake,omitempty"`
	V2NIp       string `protobuf:"bytes,8,opt,name=v2NIp,proto3" json:"v2NIp,omitempty"`
	RunnerAddr  string `protobuf:"bytes,9,opt,name=runnerAddr,proto3" json:"runnerAddr,omitempty"`
	RunnerStake string `protobuf:"bytes,10,opt,name=runnerStake,proto3" json:"runnerStake,omitempty"`
	RunnerIp    string `protobuf:"bytes,11,opt,name=runnerIp,proto3" json:"runnerIp,omitempty"`
}

func (m *MsgUpdateGuard) Reset()         { *m = MsgUpdateGuard{} }
func (m *MsgUpdateGuard) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGuard) ProtoMessage()    {}
func (*MsgUpdateGuard) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{20}
}
func (m *MsgUpdateGuard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGuard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGuard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGuard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGuard.Merge(m, src)
}
func (m *MsgUpdateGuard) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGuard) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGuard.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGuard proto.InternalMessageInfo

func (m *MsgUpdateGuard) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateGuard) GetV2XAddr() string {
	if m != nil {
		return m.V2XAddr
	}
	return ""
}

func (m *MsgUpdateGuard) GetV2XStake() string {
	if m != nil {
		return m.V2XStake
	}
	return ""
}

func (m *MsgUpdateGuard) GetV2XIp() string {
	if m != nil {
		return m.V2XIp
	}
	return ""
}

func (m *MsgUpdateGuard) GetV2NAddr() string {
	if m != nil {
		return m.V2NAddr
	}
	return ""
}

func (m *MsgUpdateGuard) GetV2NStake() string {
	if m != nil {
		return m.V2NStake
	}
	return ""
}

func (m *MsgUpdateGuard) GetV2NIp() string {
	if m != nil {
		return m.V2NIp
	}
	return ""
}

func (m *MsgUpdateGuard) GetRunnerAddr() string {
	if m != nil {
		return m.RunnerAddr
	}
	return ""
}

func (m *MsgUpdateGuard) GetRunnerStake() string {
	if m != nil {
		return m.RunnerStake
	}
	return ""
}

func (m *MsgUpdateGuard) GetRunnerIp() string {
	if m != nil {
		return m.RunnerIp
	}
	return ""
}

type MsgUpdateGuardResponse struct {
}

func (m *MsgUpdateGuardResponse) Reset()         { *m = MsgUpdateGuardResponse{} }
func (m *MsgUpdateGuardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGuardResponse) ProtoMessage()    {}
func (*MsgUpdateGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{21}
}
func (m *MsgUpdateGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGuardResponse.Merge(m, src)
}
func (m *MsgUpdateGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGuardResponse proto.InternalMessageInfo

type MsgClaimMotusRewards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgClaimMotusRewards) Reset()         { *m = MsgClaimMotusRewards{} }
func (m *MsgClaimMotusRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMotusRewards) ProtoMessage()    {}
func (*MsgClaimMotusRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{22}
}
func (m *MsgClaimMotusRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMotusRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimMotusRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimMotusRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMotusRewards.Merge(m, src)
}
func (m *MsgClaimMotusRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMotusRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMotusRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMotusRewards proto.InternalMessageInfo

func (m *MsgClaimMotusRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimMotusRewards) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgClaimMotusRewardsResponse struct {
}

func (m *MsgClaimMotusRewardsResponse) Reset()         { *m = MsgClaimMotusRewardsResponse{} }
func (m *MsgClaimMotusRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMotusRewardsResponse) ProtoMessage()    {}
func (*MsgClaimMotusRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{23}
}
func (m *MsgClaimMotusRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMotusRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimMotusRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimMotusRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMotusRewardsResponse.Merge(m, src)
}
func (m *MsgClaimMotusRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMotusRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMotusRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMotusRewardsResponse proto.InternalMessageInfo

type MsgClaimRunnerRewards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgClaimRunnerRewards) Reset()         { *m = MsgClaimRunnerRewards{} }
func (m *MsgClaimRunnerRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRunnerRewards) ProtoMessage()    {}
func (*MsgClaimRunnerRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{24}
}
func (m *MsgClaimRunnerRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRunnerRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRunnerRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRunnerRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRunnerRewards.Merge(m, src)
}
func (m *MsgClaimRunnerRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRunnerRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRunnerRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRunnerRewards proto.InternalMessageInfo

func (m *MsgClaimRunnerRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimRunnerRewards) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgClaimRunnerRewardsResponse struct {
}

func (m *MsgClaimRunnerRewardsResponse) Reset()         { *m = MsgClaimRunnerRewardsResponse{} }
func (m *MsgClaimRunnerRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRunnerRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRunnerRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{25}
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRunnerRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRunnerRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRunnerRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRunnerRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRunnerRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgGenClient)(nil), "soarchain.poa.MsgGenClient")
	proto.RegisterType((*MsgGenClientResponse)(nil), "soarchain.poa.MsgGenClientResponse")
	proto.RegisterType((*MsgChallengeService)(nil), "soarchain.poa.MsgChallengeService")
	proto.RegisterType((*MsgChallengeServiceResponse)(nil), "soarchain.poa.MsgChallengeServiceResponse")
	proto.RegisterType((*MsgUnregisterClient)(nil), "soarchain.poa.MsgUnregisterClient")
	proto.RegisterType((*MsgUnregisterClientResponse)(nil), "soarchain.poa.MsgUnregisterClientResponse")
	proto.RegisterType((*MsgUnregisterChallenger)(nil), "soarchain.poa.MsgUnregisterChallenger")
	proto.RegisterType((*MsgUnregisterChallengerResponse)(nil), "soarchain.poa.MsgUnregisterChallengerResponse")
	proto.RegisterType((*MsgGenGuard)(nil), "soarchain.poa.MsgGenGuard")
	proto.RegisterType((*MsgGenGuardResponse)(nil), "soarchain.poa.MsgGenGuardResponse")
	proto.RegisterType((*MsgUnregisterRunner)(nil), "soarchain.poa.MsgUnregisterRunner")
	proto.RegisterType((*MsgUnregisterRunnerResponse)(nil), "soarchain.poa.MsgUnregisterRunnerResponse")
	proto.RegisterType((*MsgRunnerChallenge)(nil), "soarchain.poa.MsgRunnerChallenge")
	proto.RegisterType((*MsgRunnerChallengeResponse)(nil), "soarchain.poa.MsgRunnerChallengeResponse")
	proto.RegisterType((*MsgUnregisterGuard)(nil), "soarchain.poa.MsgUnregisterGuard")
	proto.RegisterType((*MsgUnregisterGuardResponse)(nil), "soarchain.poa.MsgUnregisterGuardResponse")
	proto.RegisterType((*MsgSelectRandomChallenger)(nil), "soarchain.poa.MsgSelectRandomChallenger")
	proto.RegisterType((*MsgSelectRandomChallengerResponse)(nil), "soarchain.poa.MsgSelectRandomChallengerResponse")
	proto.RegisterType((*MsgSelectRandomRunner)(nil), "soarchain.poa.MsgSelectRandomRunner")
	proto.RegisterType((*MsgSelectRandomRunnerResponse)(nil), "soarchain.poa.MsgSelectRandomRunnerResponse")
	proto.RegisterType((*MsgUpdateGuard)(nil), "soarchain.poa.MsgUpdateGuard")
	proto.RegisterType((*MsgUpdateGuardResponse)(nil), "soarchain.poa.MsgUpdateGuardResponse")
	proto.RegisterType((*MsgClaimMotusRewards)(nil), "soarchain.poa.MsgClaimMotusRewards")
	proto.RegisterType((*MsgClaimMotusRewardsResponse)(nil), "soarchain.poa.MsgClaimMotusRewardsResponse")
	proto.RegisterType((*MsgClaimRunnerRewards)(nil), "soarchain.poa.MsgClaimRunnerRewards")
	proto.RegisterType((*MsgClaimRunnerRewardsResponse)(nil), "soarchain.poa.MsgClaimRunnerRewardsResponse")
}

func init() { proto.RegisterFile("poa/tx.proto", fileDescriptor_8ac16a0aed23c2e2) }

var fileDescriptor_8ac16a0aed23c2e2 = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x6e, 0x9a, 0xb7, 0x5f, 0x93, 0xf4, 0x6d, 0xeb, 0x37, 0x49, 0x5d, 0xb7, 0x75, 0x1b, 0xbf,
	0x05, 0xb5, 0x50, 0x25, 0x10, 0x84, 0x04, 0x37, 0x20, 0x42, 0x25, 0x20, 0x47, 0x55, 0xa2, 0x4a,
	0x55, 0x2f, 0xc8, 0x49, 0x56, 0x6e, 0x68, 0x62, 0x5b, 0x5e, 0x3b, 0xb4, 0x9c, 0xf9, 0x01, 0xfc,
	0x04, 0xfe, 0x05, 0x47, 0xae, 0x1c, 0x7b, 0xe4, 0x88, 0xda, 0x3f, 0x82, 0xbc, 0x6b, 0x6f, 0xfc,
	0x9d, 0xa8, 0x1c, 0x39, 0xce, 0xcc, 0xb3, 0xcf, 0x33, 0x9e, 0x99, 0xdd, 0x49, 0x20, 0x6f, 0xe8,
	0x4a, 0xd5, 0xba, 0xac, 0x18, 0xa6, 0x6e, 0xe9, 0xdc, 0x32, 0xd6, 0x15, 0xb3, 0x7b, 0xae, 0xf4,
	0xb5, 0x8a, 0xa1, 0x2b, 0x42, 0xc1, 0x09, 0x76, 0xcf, 0x95, 0xc1, 0x00, 0x69, 0x2a, 0x32, 0x29,
	0x48, 0x58, 0x75, 0xbc, 0xa6, 0xad, 0x69, 0x9e, 0x47, 0x7a, 0x01, 0x79, 0x19, 0xab, 0x47, 0x48,
	0xab, 0x0f, 0xfa, 0x48, 0xb3, 0x38, 0x1e, 0x16, 0xba, 0x26, 0x52, 0x2c, 0xdd, 0xe4, 0x33, 0xbb,
	0x99, 0xfd, 0xa5, 0x96, 0x67, 0x72, 0x25, 0x98, 0x37, 0xec, 0xce, 0x05, 0xba, 0xe2, 0x67, 0x49,
	0xc0, 0xb5, 0xa4, 0x12, 0x14, 0xfc, 0x0c, 0x2d, 0x84, 0x0d, 0x5d, 0xc3, 0x48, 0xfa, 0x96, 0x81,
	0xff, 0x64, 0xac, 0xd6, 0xbd, 0x1c, 0xda, 0xc8, 0x1c, 0xf5, 0xbb, 0x28, 0x45, 0x41, 0x82, 0x7c,
	0x97, 0x70, 0x1c, 0xfb, 0x75, 0x02, 0x3e, 0xee, 0x19, 0xac, 0x53, 0xbb, 0xae, 0x0f, 0x87, 0xb6,
	0xd6, 0xef, 0x2a, 0x56, 0x5f, 0xd7, 0x64, 0xbd, 0x87, 0xf8, 0x2c, 0x81, 0x27, 0x85, 0xb9, 0x7d,
	0x58, 0x61, 0xf5, 0x68, 0x21, 0x6c, 0x0f, 0x2c, 0xfe, 0x1f, 0x72, 0x22, 0xec, 0x96, 0xb6, 0x61,
	0x33, 0x26, 0x71, 0xf6, 0x61, 0x47, 0xe4, 0xbb, 0x4e, 0x34, 0x13, 0xa9, 0x7d, 0x6c, 0x21, 0xf3,
	0xce, 0x95, 0xa3, 0x3a, 0x61, 0x22, 0xa6, 0xa3, 0xc0, 0x7a, 0x30, 0xcc, 0xba, 0x99, 0xa2, 0x75,
	0x08, 0x6b, 0xe3, 0xae, 0xbf, 0xec, 0xf5, 0x4c, 0x84, 0xb1, 0x2b, 0x1b, 0x0d, 0x48, 0x65, 0xd8,
	0x49, 0x90, 0x60, 0x59, 0x7c, 0x9f, 0x85, 0x1c, 0xed, 0xef, 0x91, 0xad, 0x98, 0xbd, 0x14, 0xe9,
	0x5d, 0xc8, 0xa9, 0x0e, 0xe4, 0xd8, 0xee, 0xbc, 0x63, 0xdf, 0xea, 0x77, 0x39, 0x67, 0x47, 0xb5,
	0x53, 0x47, 0xdc, 0x6d, 0x96, 0x67, 0x72, 0x02, 0x2c, 0x8e, 0x6a, 0xa7, 0x6d, 0x4b, 0xb9, 0x40,
	0x6e, 0x57, 0x98, 0xcd, 0x15, 0x60, 0x6e, 0x54, 0x3b, 0x6d, 0x18, 0xfc, 0x1c, 0x09, 0x50, 0x83,
	0x72, 0x35, 0x09, 0xd7, 0xbc, 0xc7, 0xd5, 0x1c, 0x73, 0x35, 0x29, 0xd7, 0x82, 0xc7, 0xd5, 0xf4,
	0x71, 0x35, 0x1b, 0x06, 0xbf, 0xe8, 0x71, 0x35, 0x1b, 0x06, 0x27, 0x02, 0xd0, 0x4b, 0x41, 0xe8,
	0x96, 0x48, 0xc8, 0xe7, 0x71, 0xbe, 0x8c, 0x5a, 0x94, 0x14, 0xe8, 0x97, 0xf9, 0x5c, 0x8e, 0x26,
	0x35, 0x1b, 0x06, 0x9f, 0xa3, 0x9a, 0x9e, 0x2d, 0x15, 0xc9, 0xbc, 0x78, 0x05, 0x64, 0x85, 0x3d,
	0x09, 0x8d, 0x51, 0x8b, 0xe0, 0x53, 0xea, 0xbb, 0x07, 0xcb, 0xe3, 0x9c, 0xc6, 0x6d, 0x0d, 0x3a,
	0x23, 0x43, 0x45, 0x69, 0x99, 0xea, 0x27, 0xe0, 0x64, 0xac, 0x52, 0x27, 0xeb, 0xf6, 0x9f, 0x8a,
	0x3a, 0x28, 0xff, 0x2d, 0xc5, 0x7c, 0x76, 0x37, 0xeb, 0xa0, 0x02, 0x4e, 0x69, 0x0b, 0x84, 0xa8,
	0x36, 0xcb, 0xac, 0x42, 0x32, 0x1b, 0x27, 0x3e, 0x61, 0xdc, 0x5c, 0xb6, 0x10, 0x9e, 0xb1, 0x3d,
	0x85, 0x0d, 0x19, 0xab, 0x6d, 0x34, 0x40, 0x5d, 0xab, 0xa5, 0x68, 0x3d, 0x7d, 0x38, 0xcd, 0xf5,
	0x91, 0x3e, 0x40, 0x39, 0xf1, 0x98, 0xc7, 0xcd, 0xbd, 0x86, 0x55, 0x33, 0x14, 0x23, 0x3c, 0xb9,
	0xda, 0x46, 0x25, 0xf0, 0x0a, 0x57, 0x7c, 0x87, 0x23, 0x47, 0xa4, 0xc7, 0x50, 0x0c, 0x69, 0x4d,
	0x1a, 0x01, 0xe9, 0x0c, 0xb6, 0x63, 0x8f, 0xb0, 0xd4, 0x9e, 0x43, 0xde, 0xf4, 0xf9, 0xdd, 0xb4,
	0x8a, 0xa1, 0xb4, 0xdc, 0x43, 0x01, 0xa8, 0xf4, 0x75, 0x16, 0xfe, 0x75, 0x0a, 0x6a, 0xf4, 0x14,
	0x0b, 0x4d, 0xba, 0xeb, 0x7f, 0xe7, 0x4d, 0xe6, 0xa1, 0x14, 0xac, 0x10, 0x1b, 0xb7, 0x37, 0x64,
	0x09, 0xd6, 0x07, 0x4a, 0x7f, 0x28, 0xeb, 0x96, 0x8d, 0x5b, 0xe8, 0xa3, 0x62, 0xf6, 0x70, 0xfa,
	0x52, 0x50, 0x86, 0xba, 0xad, 0x59, 0xde, 0x52, 0xa0, 0x96, 0x24, 0xc2, 0x56, 0x1c, 0x13, 0x53,
	0x6a, 0x90, 0xa9, 0x21, 0x71, 0xaf, 0xf7, 0x77, 0x95, 0xda, 0x21, 0xd3, 0x14, 0xa5, 0xf2, 0xb4,
	0x6a, 0x9f, 0x01, 0xb2, 0x32, 0x56, 0x39, 0x19, 0x96, 0xc6, 0xbf, 0x10, 0x36, 0x43, 0xc3, 0xe4,
	0x5f, 0xfe, 0xc2, 0xff, 0x29, 0x41, 0x36, 0xa4, 0x1d, 0x58, 0x8d, 0xfc, 0x2a, 0x90, 0xa2, 0x07,
	0xc3, 0x18, 0xe1, 0xc1, 0x64, 0x8c, 0x5f, 0x23, 0xb2, 0xa1, 0x63, 0x34, 0xc2, 0x98, 0x38, 0x8d,
	0xa4, 0x05, 0xcd, 0x69, 0x50, 0x88, 0xdd, 0xce, 0xf7, 0x53, 0x39, 0x18, 0x4e, 0xa8, 0x4c, 0x87,
	0x63, 0x7a, 0x6f, 0x61, 0x91, 0xad, 0x61, 0x21, 0xb6, 0xd0, 0x24, 0x26, 0x48, 0xc9, 0xb1, 0xf8,
	0xfa, 0xb8, 0xef, 0x4e, 0x6a, 0x7d, 0x28, 0x26, 0xbd, 0x3e, 0xa1, 0xc7, 0xe8, 0x3d, 0xac, 0x84,
	0x17, 0x4d, 0x39, 0x7a, 0x3c, 0x04, 0x11, 0x0e, 0x26, 0x42, 0xfc, 0x02, 0xe1, 0x7d, 0x51, 0x4e,
	0xcb, 0x8f, 0x96, 0xe7, 0x60, 0x22, 0x84, 0x09, 0x58, 0x50, 0x4a, 0x58, 0x21, 0xfb, 0x51, 0x92,
	0x78, 0xa4, 0xf0, 0x68, 0x5a, 0x24, 0x53, 0x3d, 0x07, 0x2e, 0x66, 0x2b, 0xec, 0xa5, 0xf3, 0xb8,
	0xfd, 0x39, 0x9c, 0x06, 0xc5, 0x94, 0xda, 0x90, 0xf3, 0xbf, 0xf7, 0xdb, 0x31, 0x95, 0x19, 0x87,
	0x85, 0x7b, 0xa9, 0x61, 0x46, 0x8a, 0x60, 0x2d, 0xfa, 0x10, 0xc6, 0x3c, 0x0c, 0x11, 0x90, 0xf0,
	0x70, 0x0a, 0x90, 0xbf, 0x4a, 0x31, 0xaf, 0xe0, 0x5e, 0x02, 0x45, 0x00, 0x15, 0x57, 0xa5, 0xe4,
	0x67, 0xf0, 0x55, 0xf5, 0xc7, 0x8d, 0x98, 0xb9, 0xbe, 0x11, 0x33, 0xbf, 0x6e, 0xc4, 0xcc, 0x97,
	0x5b, 0x71, 0xe6, 0xfa, 0x56, 0x9c, 0xf9, 0x79, 0x2b, 0xce, 0x9c, 0x15, 0x19, 0x4d, 0xf5, 0xb2,
	0x4a, 0xfe, 0x8e, 0x5d, 0x19, 0x08, 0x77, 0xe6, 0xc9, 0x7f, 0xab, 0x27, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x84, 0x28, 0x61, 0x80, 0xa2, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	GenClient(ctx context.Context, in *MsgGenClient, opts ...grpc.CallOption) (*MsgGenClientResponse, error)
	ChallengeService(ctx context.Context, in *MsgChallengeService, opts ...grpc.CallOption) (*MsgChallengeServiceResponse, error)
	UnregisterClient(ctx context.Context, in *MsgUnregisterClient, opts ...grpc.CallOption) (*MsgUnregisterClientResponse, error)
	UnregisterChallenger(ctx context.Context, in *MsgUnregisterChallenger, opts ...grpc.CallOption) (*MsgUnregisterChallengerResponse, error)
	GenGuard(ctx context.Context, in *MsgGenGuard, opts ...grpc.CallOption) (*MsgGenGuardResponse, error)
	UnregisterRunner(ctx context.Context, in *MsgUnregisterRunner, opts ...grpc.CallOption) (*MsgUnregisterRunnerResponse, error)
	RunnerChallenge(ctx context.Context, in *MsgRunnerChallenge, opts ...grpc.CallOption) (*MsgRunnerChallengeResponse, error)
	UnregisterGuard(ctx context.Context, in *MsgUnregisterGuard, opts ...grpc.CallOption) (*MsgUnregisterGuardResponse, error)
	SelectRandomChallenger(ctx context.Context, in *MsgSelectRandomChallenger, opts ...grpc.CallOption) (*MsgSelectRandomChallengerResponse, error)
	SelectRandomRunner(ctx context.Context, in *MsgSelectRandomRunner, opts ...grpc.CallOption) (*MsgSelectRandomRunnerResponse, error)
	UpdateGuard(ctx context.Context, in *MsgUpdateGuard, opts ...grpc.CallOption) (*MsgUpdateGuardResponse, error)
	ClaimMotusRewards(ctx context.Context, in *MsgClaimMotusRewards, opts ...grpc.CallOption) (*MsgClaimMotusRewardsResponse, error)
	ClaimRunnerRewards(ctx context.Context, in *MsgClaimRunnerRewards, opts ...grpc.CallOption) (*MsgClaimRunnerRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GenClient(ctx context.Context, in *MsgGenClient, opts ...grpc.CallOption) (*MsgGenClientResponse, error) {
	out := new(MsgGenClientResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/GenClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChallengeService(ctx context.Context, in *MsgChallengeService, opts ...grpc.CallOption) (*MsgChallengeServiceResponse, error) {
	out := new(MsgChallengeServiceResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ChallengeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterClient(ctx context.Context, in *MsgUnregisterClient, opts ...grpc.CallOption) (*MsgUnregisterClientResponse, error) {
	out := new(MsgUnregisterClientResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/UnregisterClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterChallenger(ctx context.Context, in *MsgUnregisterChallenger, opts ...grpc.CallOption) (*MsgUnregisterChallengerResponse, error) {
	out := new(MsgUnregisterChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/UnregisterChallenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GenGuard(ctx context.Context, in *MsgGenGuard, opts ...grpc.CallOption) (*MsgGenGuardResponse, error) {
	out := new(MsgGenGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/GenGuard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterRunner(ctx context.Context, in *MsgUnregisterRunner, opts ...grpc.CallOption) (*MsgUnregisterRunnerResponse, error) {
	out := new(MsgUnregisterRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/UnregisterRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RunnerChallenge(ctx context.Context, in *MsgRunnerChallenge, opts ...grpc.CallOption) (*MsgRunnerChallengeResponse, error) {
	out := new(MsgRunnerChallengeResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/RunnerChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterGuard(ctx context.Context, in *MsgUnregisterGuard, opts ...grpc.CallOption) (*MsgUnregisterGuardResponse, error) {
	out := new(MsgUnregisterGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/UnregisterGuard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelectRandomChallenger(ctx context.Context, in *MsgSelectRandomChallenger, opts ...grpc.CallOption) (*MsgSelectRandomChallengerResponse, error) {
	out := new(MsgSelectRandomChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/SelectRandomChallenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelectRandomRunner(ctx context.Context, in *MsgSelectRandomRunner, opts ...grpc.CallOption) (*MsgSelectRandomRunnerResponse, error) {
	out := new(MsgSelectRandomRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/SelectRandomRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGuard(ctx context.Context, in *MsgUpdateGuard, opts ...grpc.CallOption) (*MsgUpdateGuardResponse, error) {
	out := new(MsgUpdateGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/UpdateGuard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimMotusRewards(ctx context.Context, in *MsgClaimMotusRewards, opts ...grpc.CallOption) (*MsgClaimMotusRewardsResponse, error) {
	out := new(MsgClaimMotusRewardsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ClaimMotusRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRunnerRewards(ctx context.Context, in *MsgClaimRunnerRewards, opts ...grpc.CallOption) (*MsgClaimRunnerRewardsResponse, error) {
	out := new(MsgClaimRunnerRewardsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ClaimRunnerRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	GenClient(context.Context, *MsgGenClient) (*MsgGenClientResponse, error)
	ChallengeService(context.Context, *MsgChallengeService) (*MsgChallengeServiceResponse, error)
	UnregisterClient(context.Context, *MsgUnregisterClient) (*MsgUnregisterClientResponse, error)
	UnregisterChallenger(context.Context, *MsgUnregisterChallenger) (*MsgUnregisterChallengerResponse, error)
	GenGuard(context.Context, *MsgGenGuard) (*MsgGenGuardResponse, error)
	UnregisterRunner(context.Context, *MsgUnregisterRunner) (*MsgUnregisterRunnerResponse, error)
	RunnerChallenge(context.Context, *MsgRunnerChallenge) (*MsgRunnerChallengeResponse, error)
	UnregisterGuard(context.Context, *MsgUnregisterGuard) (*MsgUnregisterGuardResponse, error)
	SelectRandomChallenger(context.Context, *MsgSelectRandomChallenger) (*MsgSelectRandomChallengerResponse, error)
	SelectRandomRunner(context.Context, *MsgSelectRandomRunner) (*MsgSelectRandomRunnerResponse, error)
	UpdateGuard(context.Context, *MsgUpdateGuard) (*MsgUpdateGuardResponse, error)
	ClaimMotusRewards(context.Context, *MsgClaimMotusRewards) (*MsgClaimMotusRewardsResponse, error)
	ClaimRunnerRewards(context.Context, *MsgClaimRunnerRewards) (*MsgClaimRunnerRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) GenClient(ctx context.Context, req *MsgGenClient) (*MsgGenClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenClient not implemented")
}
func (*UnimplementedMsgServer) ChallengeService(ctx context.Context, req *MsgChallengeService) (*MsgChallengeServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeService not implemented")
}
func (*UnimplementedMsgServer) UnregisterClient(ctx context.Context, req *MsgUnregisterClient) (*MsgUnregisterClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterClient not implemented")
}
func (*UnimplementedMsgServer) UnregisterChallenger(ctx context.Context, req *MsgUnregisterChallenger) (*MsgUnregisterChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterChallenger not implemented")
}
func (*UnimplementedMsgServer) GenGuard(ctx context.Context, req *MsgGenGuard) (*MsgGenGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenGuard not implemented")
}
func (*UnimplementedMsgServer) UnregisterRunner(ctx context.Context, req *MsgUnregisterRunner) (*MsgUnregisterRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterRunner not implemented")
}
func (*UnimplementedMsgServer) RunnerChallenge(ctx context.Context, req *MsgRunnerChallenge) (*MsgRunnerChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerChallenge not implemented")
}
func (*UnimplementedMsgServer) UnregisterGuard(ctx context.Context, req *MsgUnregisterGuard) (*MsgUnregisterGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGuard not implemented")
}
func (*UnimplementedMsgServer) SelectRandomChallenger(ctx context.Context, req *MsgSelectRandomChallenger) (*MsgSelectRandomChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRandomChallenger not implemented")
}
func (*UnimplementedMsgServer) SelectRandomRunner(ctx context.Context, req *MsgSelectRandomRunner) (*MsgSelectRandomRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRandomRunner not implemented")
}
func (*UnimplementedMsgServer) UpdateGuard(ctx context.Context, req *MsgUpdateGuard) (*MsgUpdateGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuard not implemented")
}
func (*UnimplementedMsgServer) ClaimMotusRewards(ctx context.Context, req *MsgClaimMotusRewards) (*MsgClaimMotusRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMotusRewards not implemented")
}
func (*UnimplementedMsgServer) ClaimRunnerRewards(ctx context.Context, req *MsgClaimRunnerRewards) (*MsgClaimRunnerRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRunnerRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GenClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGenClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GenClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/GenClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GenClient(ctx, req.(*MsgGenClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChallengeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChallengeService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChallengeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ChallengeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChallengeService(ctx, req.(*MsgChallengeService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/UnregisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterClient(ctx, req.(*MsgUnregisterClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterChallenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterChallenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterChallenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/UnregisterChallenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterChallenger(ctx, req.(*MsgUnregisterChallenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GenGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGenGuard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GenGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/GenGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GenGuard(ctx, req.(*MsgGenGuard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterRunner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/UnregisterRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterRunner(ctx, req.(*MsgUnregisterRunner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RunnerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRunnerChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RunnerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/RunnerChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RunnerChallenge(ctx, req.(*MsgRunnerChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterGuard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/UnregisterGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterGuard(ctx, req.(*MsgUnregisterGuard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelectRandomChallenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelectRandomChallenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelectRandomChallenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/SelectRandomChallenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelectRandomChallenger(ctx, req.(*MsgSelectRandomChallenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelectRandomRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelectRandomRunner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelectRandomRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/SelectRandomRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelectRandomRunner(ctx, req.(*MsgSelectRandomRunner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGuard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/UpdateGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGuard(ctx, req.(*MsgUpdateGuard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimMotusRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimMotusRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimMotusRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ClaimMotusRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimMotusRewards(ctx, req.(*MsgClaimMotusRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRunnerRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRunnerRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRunnerRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ClaimRunnerRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRunnerRewards(ctx, req.(*MsgClaimRunnerRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soarchain.poa.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenClient",
			Handler:    _Msg_GenClient_Handler,
		},
		{
			MethodName: "ChallengeService",
			Handler:    _Msg_ChallengeService_Handler,
		},
		{
			MethodName: "UnregisterClient",
			Handler:    _Msg_UnregisterClient_Handler,
		},
		{
			MethodName: "UnregisterChallenger",
			Handler:    _Msg_UnregisterChallenger_Handler,
		},
		{
			MethodName: "GenGuard",
			Handler:    _Msg_GenGuard_Handler,
		},
		{
			MethodName: "UnregisterRunner",
			Handler:    _Msg_UnregisterRunner_Handler,
		},
		{
			MethodName: "RunnerChallenge",
			Handler:    _Msg_RunnerChallenge_Handler,
		},
		{
			MethodName: "UnregisterGuard",
			Handler:    _Msg_UnregisterGuard_Handler,
		},
		{
			MethodName: "SelectRandomChallenger",
			Handler:    _Msg_SelectRandomChallenger_Handler,
		},
		{
			MethodName: "SelectRandomRunner",
			Handler:    _Msg_SelectRandomRunner_Handler,
		},
		{
			MethodName: "UpdateGuard",
			Handler:    _Msg_UpdateGuard_Handler,
		},
		{
			MethodName: "ClaimMotusRewards",
			Handler:    _Msg_ClaimMotusRewards_Handler,
		},
		{
			MethodName: "ClaimRunnerRewards",
			Handler:    _Msg_ClaimRunnerRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poa/tx.proto",
}

func (m *MsgGenClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGenClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChallengeService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeResult) > 0 {
		i -= len(m.ChallengeResult)
		copy(dAtA[i:], m.ChallengeResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeResult)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientCommunicationMode) > 0 {
		i -= len(m.ClientCommunicationMode)
		copy(dAtA[i:], m.ClientCommunicationMode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientCommunicationMode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientPubkey) > 0 {
		i -= len(m.ClientPubkey)
		copy(dAtA[i:], m.ClientPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChallengeServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterClient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterClient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterChallenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterChallenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterChallenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengerAddress) > 0 {
		i -= len(m.ChallengerAddress)
		copy(dAtA[i:], m.ChallengerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGenGuard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenGuard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenGuard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunnerIp) > 0 {
		i -= len(m.RunnerIp)
		copy(dAtA[i:], m.RunnerIp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerIp)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RunnerStake) > 0 {
		i -= len(m.RunnerStake)
		copy(dAtA[i:], m.RunnerStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerStake)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RunnerAddr) > 0 {
		i -= len(m.RunnerAddr)
		copy(dAtA[i:], m.RunnerAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerAddr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.V2NIp) > 0 {
		i -= len(m.V2NIp)
		copy(dAtA[i:], m.V2NIp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2NIp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.V2NStake) > 0 {
		i -= len(m.V2NStake)
		copy(dAtA[i:], m.V2NStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2NStake)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.V2NAddr) > 0 {
		i -= len(m.V2NAddr)
		copy(dAtA[i:], m.V2NAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2NAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.V2XIp) > 0 {
		i -= len(m.V2XIp)
		copy(dAtA[i:], m.V2XIp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2XIp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.V2XStake) > 0 {
		i -= len(m.V2XStake)
		copy(dAtA[i:], m.V2XStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2XStake)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.V2XAddr) > 0 {
		i -= len(m.V2XAddr)
		copy(dAtA[i:], m.V2XAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2XAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GuardPubKey) > 0 {
		i -= len(m.GuardPubKey)
		copy(dAtA[i:], m.GuardPubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GuardPubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGenGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterRunner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterRunner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterRunner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunnerAddress) > 0 {
		i -= len(m.RunnerAddress)
		copy(dAtA[i:], m.RunnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRunnerChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunnerChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunnerChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientPubkeys) > 0 {
		for iNdEx := len(m.ClientPubkeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientPubkeys[iNdEx])
			copy(dAtA[i:], m.ClientPubkeys[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ClientPubkeys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RunnerAddress) > 0 {
		i -= len(m.RunnerAddress)
		copy(dAtA[i:], m.RunnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRunnerChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunnerChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunnerChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterGuard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterGuard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterGuard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnregisterGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnregisterGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnregisterGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomChallenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomChallenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomChallenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomChallenger != nil {
		{
			size, err := m.RandomChallenger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomRunner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomRunner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomRunner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomRunner != nil {
		{
			size, err := m.RandomRunner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGuard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGuard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGuard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RunnerIp) > 0 {
		i -= len(m.RunnerIp)
		copy(dAtA[i:], m.RunnerIp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerIp)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RunnerStake) > 0 {
		i -= len(m.RunnerStake)
		copy(dAtA[i:], m.RunnerStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerStake)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RunnerAddr) > 0 {
		i -= len(m.RunnerAddr)
		copy(dAtA[i:], m.RunnerAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RunnerAddr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.V2NIp) > 0 {
		i -= len(m.V2NIp)
		copy(dAtA[i:], m.V2NIp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2NIp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.V2NStake) > 0 {
		i -= len(m.V2NStake)
		copy(dAtA[i:], m.V2NStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2NStake)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.V2NAddr) > 0 {
		i -= len(m.V2NAddr)
		copy(dAtA[i:], m.V2NAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2NAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.V2XIp) > 0 {
		i -= len(m.V2XIp)
		copy(dAtA[i:], m.V2XIp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2XIp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.V2XStake) > 0 {
		i -= len(m.V2XStake)
		copy(dAtA[i:], m.V2XStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2XStake)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.V2XAddr) > 0 {
		i -= len(m.V2XAddr)
		copy(dAtA[i:], m.V2XAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.V2XAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimMotusRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMotusRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMotusRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMotusRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMotusRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMotusRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRunnerRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRunnerRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRunnerRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRunnerRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRunnerRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRunnerRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGenClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGenClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChallengeService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientCommunicationMode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChallengeServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterClient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterChallenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGenGuard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GuardPubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2XAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2XStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2XIp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2NAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2NStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2NIp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerIp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGenGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterRunner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRunnerChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ClientPubkeys) > 0 {
		for _, s := range m.ClientPubkeys {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRunnerChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnregisterGuard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnregisterGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSelectRandomChallenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectRandomChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomChallenger != nil {
		l = m.RandomChallenger.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectRandomRunner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectRandomRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomRunner != nil {
		l = m.RandomRunner.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGuard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2XAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2XStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2XIp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2NAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2NStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.V2NIp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RunnerIp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimMotusRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimMotusRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRunnerRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimRunnerRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGenClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCommunicationMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCommunicationMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterChallenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterChallenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterChallenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenGuard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenGuard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenGuard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2XAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2XAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2XStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2XStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2XIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2XIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2NAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2NStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2NIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterRunner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterRunner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterRunner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunnerChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunnerChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunnerChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPubkeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPubkeys = append(m.ClientPubkeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunnerChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunnerChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunnerChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterGuard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterGuard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterGuard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnregisterGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnregisterGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnregisterGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomChallenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomChallenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomChallenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomChallenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RandomChallenger == nil {
				m.RandomChallenger = &Challenger{}
			}
			if err := m.RandomChallenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomRunner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomRunner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomRunner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomRunner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RandomRunner == nil {
				m.RandomRunner = &Runner{}
			}
			if err := m.RandomRunner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGuard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGuard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGuard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2XAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2XAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2XStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2XStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2XIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2XIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2NAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2NStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V2NIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V2NIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMotusRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMotusRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMotusRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMotusRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMotusRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMotusRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRunnerRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRunnerRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRunnerRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRunnerRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRunnerRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRunnerRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
