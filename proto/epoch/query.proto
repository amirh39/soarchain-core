syntax = "proto3";
package soarchain.epoch;
import "epoch/epoch_data.proto";
import "epoch/random_data.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "epoch/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/amirh39/soarchain-core/x/epoch/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/soarchain/epoch/params";
  }

  // Queries a EpochData by index.
	rpc EpochData(QueryGetEpochDataRequest) returns (QueryGetEpochDataResponse) {
		option (google.api.http).get = "/soarchain/epoch/epoch_data";
	}

  rpc RandomData(QueryGetRandomDataRequest) returns (QueryGetRandomDataResponse) {
		option (google.api.http).get = "/soarchain/epoch/random_data/{epochNumber}";
	}
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetEpochDataRequest {}

message QueryGetEpochDataResponse {
	EpochData epochData = 1 [(gogoproto.nullable) = false];
}

message QueryGetRandomDataRequest {
  string epochNumber = 1;
}

message QueryGetRandomDataResponse {
	RandomData randomData = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
