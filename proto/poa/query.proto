syntax = "proto3";
package soarchain.poa;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "poa/params.proto";
import "poa/guard.proto";
import "poa/total_clients.proto";
import "poa/total_challengers.proto";
import "poa/total_runners.proto";
import "poa/challenger_by_index.proto";
// this line is used by starport scaffolding # 1
import "poa/challenger.proto";
import "poa/client.proto";
import "poa/runner.proto";

option go_package = "soarchain/x/poa/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/soarchain/poa/params";
  }
  // Queries a Client by index.
	rpc Client(QueryGetClientRequest) returns (QueryGetClientResponse) {
		option (google.api.http).get = "/soarchain/poa/client/{index}";
	}

	// Queries a list of Client items.
	rpc ClientAll(QueryAllClientRequest) returns (QueryAllClientResponse) {
		option (google.api.http).get = "/soarchain/poa/client";
	}

// Queries a Challenger by index.
	rpc Challenger(QueryGetChallengerRequest) returns (QueryGetChallengerResponse) {
		option (google.api.http).get = "/soarchain/poa/challenger/{index}";
	}

	// Queries a list of Challenger items.
	rpc ChallengerAll(QueryAllChallengerRequest) returns (QueryAllChallengerResponse) {
		option (google.api.http).get = "/soarchain/poa/challenger";
	}

// Queries a Runner by index.
	rpc Runner(QueryGetRunnerRequest) returns (QueryGetRunnerResponse) {
		option (google.api.http).get = "/soarchain/poa/runner/{index}";
	}

	// Queries a list of Runner items.
	rpc RunnerAll(QueryAllRunnerRequest) returns (QueryAllRunnerResponse) {
		option (google.api.http).get = "/soarchain/poa/runner";
	}

// Queries a Guard by index.
	rpc Guard(QueryGetGuardRequest) returns (QueryGetGuardResponse) {
		option (google.api.http).get = "/soarchain/poa/guard/{index}";
	}

	// Queries a list of Guard items.
	rpc GuardAll(QueryAllGuardRequest) returns (QueryAllGuardResponse) {
		option (google.api.http).get = "/soarchain/poa/guard";
	}

// Queries a list of GetClientByAddress items.
	rpc GetClientByAddress(QueryGetClientByAddressRequest) returns (QueryGetClientByAddressResponse) {
		option (google.api.http).get = "/soarchain/poa/get_client_by_address/{address}";
	}

// Queries a list of GetChallengerByAddress items.
	rpc GetChallengerByAddress(QueryGetChallengerByAddressRequest) returns (QueryGetChallengerByAddressResponse) {
		option (google.api.http).get = "/soarchain/poa/get_challenger_by_address/{address}";
	}

// Queries a TotalClients by index.
	rpc TotalClients(QueryGetTotalClientsRequest) returns (QueryGetTotalClientsResponse) {
		option (google.api.http).get = "/soarchain/poa/total_clients";
	}
// Queries a TotalChallengers by index.
	rpc TotalChallengers(QueryGetTotalChallengersRequest) returns (QueryGetTotalChallengersResponse) {
		option (google.api.http).get = "/soarchain/poa/total_challengers";
	}
// Queries a TotalRunners by index.
	rpc TotalRunners(QueryGetTotalRunnersRequest) returns (QueryGetTotalRunnersResponse) {
		option (google.api.http).get = "/soarchain/poa/total_runners";
	}
// Queries a ChallengerByIndex by index.
	rpc ChallengerByIndex(QueryGetChallengerByIndexRequest) returns (QueryGetChallengerByIndexResponse) {
		option (google.api.http).get = "/soarchain/poa/challenger_by_index/{index}";
	}

	// Queries a list of ChallengerByIndex items.
	rpc ChallengerByIndexAll(QueryAllChallengerByIndexRequest) returns (QueryAllChallengerByIndexResponse) {
		option (google.api.http).get = "/soarchain/poa/challenger_by_index";
	}

// Queries a list of GetRandomChallenger items.
	rpc GetRandomChallenger(QueryGetRandomChallengerRequest) returns (QueryGetRandomChallengerResponse) {
		option (google.api.http).get = "/soarchain/poa/get_random_challenger";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetClientRequest {
	  string index = 1;

}

message QueryGetClientResponse {
	Client client = 1 [(gogoproto.nullable) = false];
}

message QueryAllClientRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllClientResponse {
	repeated Client client = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetChallengerRequest {
	  string index = 1;

}

message QueryGetChallengerResponse {
	Challenger challenger = 1 [(gogoproto.nullable) = false];
}

message QueryAllChallengerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllChallengerResponse {
	repeated Challenger challenger = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRunnerRequest {
	  string index = 1;

}

message QueryGetRunnerResponse {
	Runner runner = 1 [(gogoproto.nullable) = false];
}

message QueryAllRunnerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRunnerResponse {
	repeated Runner runner = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetGuardRequest {
	  string index = 1;

}

message QueryGetGuardResponse {
	Guard guard = 1 [(gogoproto.nullable) = false];
}

message QueryAllGuardRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGuardResponse {
	repeated Guard guard = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetClientByAddressRequest {
  string address = 1;
}

message QueryGetClientByAddressResponse {
  Client client = 1;
}

message QueryGetChallengerByAddressRequest {
  string address = 1;
}

message QueryGetChallengerByAddressResponse {
  Challenger challenger = 1;
}

message QueryGetTotalClientsRequest {}

message QueryGetTotalClientsResponse {
	TotalClients TotalClients = 1 [(gogoproto.nullable) = false];
}
message QueryGetTotalChallengersRequest {}

message QueryGetTotalChallengersResponse {
	TotalChallengers TotalChallengers = 1 [(gogoproto.nullable) = false];
}
message QueryGetTotalRunnersRequest {}

message QueryGetTotalRunnersResponse {
	TotalRunners TotalRunners = 1 [(gogoproto.nullable) = false];
}
message QueryGetChallengerByIndexRequest {
	  string index = 1;

}

message QueryGetChallengerByIndexResponse {
	ChallengerByIndex challengerByIndex = 1 [(gogoproto.nullable) = false];
}

message QueryAllChallengerByIndexRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllChallengerByIndexResponse {
	repeated ChallengerByIndex challengerByIndex = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRandomChallengerRequest {
}

message QueryGetRandomChallengerResponse {
  Challenger challenger = 1;
}

// this line is used by starport scaffolding # 3
