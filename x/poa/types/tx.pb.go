// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poa/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgChallengeService struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ClientPubkey            string `protobuf:"bytes,2,opt,name=clientPubkey,proto3" json:"clientPubkey,omitempty"`
	ClientCommunicationMode string `protobuf:"bytes,3,opt,name=clientCommunicationMode,proto3" json:"clientCommunicationMode,omitempty"`
	ChallengeResult         string `protobuf:"bytes,4,opt,name=challengeResult,proto3" json:"challengeResult,omitempty"`
}

func (m *MsgChallengeService) Reset()         { *m = MsgChallengeService{} }
func (m *MsgChallengeService) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeService) ProtoMessage()    {}
func (*MsgChallengeService) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{0}
}
func (m *MsgChallengeService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeService.Merge(m, src)
}
func (m *MsgChallengeService) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeService) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeService.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeService proto.InternalMessageInfo

func (m *MsgChallengeService) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgChallengeService) GetClientPubkey() string {
	if m != nil {
		return m.ClientPubkey
	}
	return ""
}

func (m *MsgChallengeService) GetClientCommunicationMode() string {
	if m != nil {
		return m.ClientCommunicationMode
	}
	return ""
}

func (m *MsgChallengeService) GetChallengeResult() string {
	if m != nil {
		return m.ChallengeResult
	}
	return ""
}

type MsgChallengeServiceResponse struct {
}

func (m *MsgChallengeServiceResponse) Reset()         { *m = MsgChallengeServiceResponse{} }
func (m *MsgChallengeServiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeServiceResponse) ProtoMessage()    {}
func (*MsgChallengeServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{1}
}
func (m *MsgChallengeServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeServiceResponse.Merge(m, src)
}
func (m *MsgChallengeServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeServiceResponse proto.InternalMessageInfo

type MsgRunnerChallenge struct {
	Creator string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Runner  string             `protobuf:"bytes,2,opt,name=runner,proto3" json:"runner,omitempty"`
	Clients []*ClientPublicKey `protobuf:"bytes,3,rep,name=clients,proto3" json:"clients,omitempty"`
	Result  string             `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *MsgRunnerChallenge) Reset()         { *m = MsgRunnerChallenge{} }
func (m *MsgRunnerChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgRunnerChallenge) ProtoMessage()    {}
func (*MsgRunnerChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{2}
}
func (m *MsgRunnerChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunnerChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunnerChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunnerChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunnerChallenge.Merge(m, src)
}
func (m *MsgRunnerChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunnerChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunnerChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunnerChallenge proto.InternalMessageInfo

func (m *MsgRunnerChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRunnerChallenge) GetRunner() string {
	if m != nil {
		return m.Runner
	}
	return ""
}

func (m *MsgRunnerChallenge) GetClients() []*ClientPublicKey {
	if m != nil {
		return m.Clients
	}
	return nil
}

func (m *MsgRunnerChallenge) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type ClientPublicKey struct {
	P string `protobuf:"bytes,1,opt,name=p,proto3" json:"p,omitempty"`
	N int32  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *ClientPublicKey) Reset()         { *m = ClientPublicKey{} }
func (m *ClientPublicKey) String() string { return proto.CompactTextString(m) }
func (*ClientPublicKey) ProtoMessage()    {}
func (*ClientPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{3}
}
func (m *ClientPublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientPublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientPublicKey.Merge(m, src)
}
func (m *ClientPublicKey) XXX_Size() int {
	return m.Size()
}
func (m *ClientPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ClientPublicKey proto.InternalMessageInfo

func (m *ClientPublicKey) GetP() string {
	if m != nil {
		return m.P
	}
	return ""
}

func (m *ClientPublicKey) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type MsgRunnerChallengeResponse struct {
}

func (m *MsgRunnerChallengeResponse) Reset()         { *m = MsgRunnerChallengeResponse{} }
func (m *MsgRunnerChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRunnerChallengeResponse) ProtoMessage()    {}
func (*MsgRunnerChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{4}
}
func (m *MsgRunnerChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunnerChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunnerChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunnerChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunnerChallengeResponse.Merge(m, src)
}
func (m *MsgRunnerChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunnerChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunnerChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunnerChallengeResponse proto.InternalMessageInfo

type MsgSelectRandomChallenger struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSelectRandomChallenger) Reset()         { *m = MsgSelectRandomChallenger{} }
func (m *MsgSelectRandomChallenger) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomChallenger) ProtoMessage()    {}
func (*MsgSelectRandomChallenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{5}
}
func (m *MsgSelectRandomChallenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomChallenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomChallenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomChallenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomChallenger.Merge(m, src)
}
func (m *MsgSelectRandomChallenger) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomChallenger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomChallenger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomChallenger proto.InternalMessageInfo

func (m *MsgSelectRandomChallenger) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSelectRandomChallengerResponse struct {
	RandomChallengerReputation *Reputation `protobuf:"bytes,1,opt,name=randomChallengerReputation,proto3" json:"randomChallengerReputation,omitempty"`
}

func (m *MsgSelectRandomChallengerResponse) Reset()         { *m = MsgSelectRandomChallengerResponse{} }
func (m *MsgSelectRandomChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomChallengerResponse) ProtoMessage()    {}
func (*MsgSelectRandomChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{6}
}
func (m *MsgSelectRandomChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomChallengerResponse.Merge(m, src)
}
func (m *MsgSelectRandomChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomChallengerResponse proto.InternalMessageInfo

func (m *MsgSelectRandomChallengerResponse) GetRandomChallengerReputation() *Reputation {
	if m != nil {
		return m.RandomChallengerReputation
	}
	return nil
}

type MsgSelectRandomRunner struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgSelectRandomRunner) Reset()         { *m = MsgSelectRandomRunner{} }
func (m *MsgSelectRandomRunner) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomRunner) ProtoMessage()    {}
func (*MsgSelectRandomRunner) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{7}
}
func (m *MsgSelectRandomRunner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomRunner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomRunner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomRunner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomRunner.Merge(m, src)
}
func (m *MsgSelectRandomRunner) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomRunner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomRunner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomRunner proto.InternalMessageInfo

func (m *MsgSelectRandomRunner) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgSelectRandomRunnerResponse struct {
	RandomRunnerReputation *Reputation `protobuf:"bytes,1,opt,name=randomRunnerReputation,proto3" json:"randomRunnerReputation,omitempty"`
}

func (m *MsgSelectRandomRunnerResponse) Reset()         { *m = MsgSelectRandomRunnerResponse{} }
func (m *MsgSelectRandomRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSelectRandomRunnerResponse) ProtoMessage()    {}
func (*MsgSelectRandomRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{8}
}
func (m *MsgSelectRandomRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSelectRandomRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSelectRandomRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSelectRandomRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSelectRandomRunnerResponse.Merge(m, src)
}
func (m *MsgSelectRandomRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSelectRandomRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSelectRandomRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSelectRandomRunnerResponse proto.InternalMessageInfo

func (m *MsgSelectRandomRunnerResponse) GetRandomRunnerReputation() *Reputation {
	if m != nil {
		return m.RandomRunnerReputation
	}
	return nil
}

type MsgClaimMotusRewards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgClaimMotusRewards) Reset()         { *m = MsgClaimMotusRewards{} }
func (m *MsgClaimMotusRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMotusRewards) ProtoMessage()    {}
func (*MsgClaimMotusRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{9}
}
func (m *MsgClaimMotusRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMotusRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimMotusRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimMotusRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMotusRewards.Merge(m, src)
}
func (m *MsgClaimMotusRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMotusRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMotusRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMotusRewards proto.InternalMessageInfo

func (m *MsgClaimMotusRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimMotusRewards) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgClaimMotusRewardsResponse struct {
}

func (m *MsgClaimMotusRewardsResponse) Reset()         { *m = MsgClaimMotusRewardsResponse{} }
func (m *MsgClaimMotusRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimMotusRewardsResponse) ProtoMessage()    {}
func (*MsgClaimMotusRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{10}
}
func (m *MsgClaimMotusRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimMotusRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimMotusRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimMotusRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimMotusRewardsResponse.Merge(m, src)
}
func (m *MsgClaimMotusRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimMotusRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimMotusRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimMotusRewardsResponse proto.InternalMessageInfo

type MsgClaimRunnerRewards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgClaimRunnerRewards) Reset()         { *m = MsgClaimRunnerRewards{} }
func (m *MsgClaimRunnerRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRunnerRewards) ProtoMessage()    {}
func (*MsgClaimRunnerRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{11}
}
func (m *MsgClaimRunnerRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRunnerRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRunnerRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRunnerRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRunnerRewards.Merge(m, src)
}
func (m *MsgClaimRunnerRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRunnerRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRunnerRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRunnerRewards proto.InternalMessageInfo

func (m *MsgClaimRunnerRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimRunnerRewards) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgClaimRunnerRewardsResponse struct {
}

func (m *MsgClaimRunnerRewardsResponse) Reset()         { *m = MsgClaimRunnerRewardsResponse{} }
func (m *MsgClaimRunnerRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRunnerRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRunnerRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{12}
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRunnerRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRunnerRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRunnerRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRunnerRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRunnerRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRunnerRewardsResponse proto.InternalMessageInfo

type MsgClaimChallengerRewards struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgClaimChallengerRewards) Reset()         { *m = MsgClaimChallengerRewards{} }
func (m *MsgClaimChallengerRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimChallengerRewards) ProtoMessage()    {}
func (*MsgClaimChallengerRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{13}
}
func (m *MsgClaimChallengerRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimChallengerRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimChallengerRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimChallengerRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimChallengerRewards.Merge(m, src)
}
func (m *MsgClaimChallengerRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimChallengerRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimChallengerRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimChallengerRewards proto.InternalMessageInfo

func (m *MsgClaimChallengerRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimChallengerRewards) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgClaimChallengerRewardsResponse struct {
}

func (m *MsgClaimChallengerRewardsResponse) Reset()         { *m = MsgClaimChallengerRewardsResponse{} }
func (m *MsgClaimChallengerRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimChallengerRewardsResponse) ProtoMessage()    {}
func (*MsgClaimChallengerRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{14}
}
func (m *MsgClaimChallengerRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimChallengerRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimChallengerRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimChallengerRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimChallengerRewardsResponse.Merge(m, src)
}
func (m *MsgClaimChallengerRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimChallengerRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimChallengerRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimChallengerRewardsResponse proto.InternalMessageInfo

type MsgRegisterFactoryKey struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FactoryCert string `protobuf:"bytes,2,opt,name=factoryCert,proto3" json:"factoryCert,omitempty"`
}

func (m *MsgRegisterFactoryKey) Reset()         { *m = MsgRegisterFactoryKey{} }
func (m *MsgRegisterFactoryKey) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFactoryKey) ProtoMessage()    {}
func (*MsgRegisterFactoryKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{15}
}
func (m *MsgRegisterFactoryKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFactoryKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFactoryKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFactoryKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFactoryKey.Merge(m, src)
}
func (m *MsgRegisterFactoryKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFactoryKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFactoryKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFactoryKey proto.InternalMessageInfo

func (m *MsgRegisterFactoryKey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterFactoryKey) GetFactoryCert() string {
	if m != nil {
		return m.FactoryCert
	}
	return ""
}

type MsgRegisterFactoryKeyResponse struct {
}

func (m *MsgRegisterFactoryKeyResponse) Reset()         { *m = MsgRegisterFactoryKeyResponse{} }
func (m *MsgRegisterFactoryKeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterFactoryKeyResponse) ProtoMessage()    {}
func (*MsgRegisterFactoryKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ac16a0aed23c2e2, []int{16}
}
func (m *MsgRegisterFactoryKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterFactoryKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterFactoryKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterFactoryKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterFactoryKeyResponse.Merge(m, src)
}
func (m *MsgRegisterFactoryKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterFactoryKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterFactoryKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterFactoryKeyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgChallengeService)(nil), "soarchain.poa.MsgChallengeService")
	proto.RegisterType((*MsgChallengeServiceResponse)(nil), "soarchain.poa.MsgChallengeServiceResponse")
	proto.RegisterType((*MsgRunnerChallenge)(nil), "soarchain.poa.MsgRunnerChallenge")
	proto.RegisterType((*ClientPublicKey)(nil), "soarchain.poa.ClientPublicKey")
	proto.RegisterType((*MsgRunnerChallengeResponse)(nil), "soarchain.poa.MsgRunnerChallengeResponse")
	proto.RegisterType((*MsgSelectRandomChallenger)(nil), "soarchain.poa.MsgSelectRandomChallenger")
	proto.RegisterType((*MsgSelectRandomChallengerResponse)(nil), "soarchain.poa.MsgSelectRandomChallengerResponse")
	proto.RegisterType((*MsgSelectRandomRunner)(nil), "soarchain.poa.MsgSelectRandomRunner")
	proto.RegisterType((*MsgSelectRandomRunnerResponse)(nil), "soarchain.poa.MsgSelectRandomRunnerResponse")
	proto.RegisterType((*MsgClaimMotusRewards)(nil), "soarchain.poa.MsgClaimMotusRewards")
	proto.RegisterType((*MsgClaimMotusRewardsResponse)(nil), "soarchain.poa.MsgClaimMotusRewardsResponse")
	proto.RegisterType((*MsgClaimRunnerRewards)(nil), "soarchain.poa.MsgClaimRunnerRewards")
	proto.RegisterType((*MsgClaimRunnerRewardsResponse)(nil), "soarchain.poa.MsgClaimRunnerRewardsResponse")
	proto.RegisterType((*MsgClaimChallengerRewards)(nil), "soarchain.poa.MsgClaimChallengerRewards")
	proto.RegisterType((*MsgClaimChallengerRewardsResponse)(nil), "soarchain.poa.MsgClaimChallengerRewardsResponse")
	proto.RegisterType((*MsgRegisterFactoryKey)(nil), "soarchain.poa.MsgRegisterFactoryKey")
	proto.RegisterType((*MsgRegisterFactoryKeyResponse)(nil), "soarchain.poa.MsgRegisterFactoryKeyResponse")
}

func init() { proto.RegisterFile("poa/tx.proto", fileDescriptor_8ac16a0aed23c2e2) }

var fileDescriptor_8ac16a0aed23c2e2 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x5d, 0x28, 0x6c, 0xe2, 0xb7, 0xa1, 0x41, 0xd8, 0x46, 0x16, 0xb6, 0xb0, 0x65, 0x3b, 0x94,
	0x7f, 0x2d, 0x0c, 0x21, 0xed, 0x4c, 0x25, 0x04, 0x42, 0x91, 0x20, 0x3b, 0xc1, 0x05, 0x79, 0xa9,
	0x49, 0x23, 0x52, 0x3b, 0xb2, 0x1d, 0x58, 0x2f, 0x7c, 0x06, 0x8e, 0x7c, 0x13, 0xbe, 0x02, 0xc7,
	0x1d, 0x91, 0xb8, 0xa0, 0xf6, 0x8b, 0xa0, 0x38, 0x8d, 0x69, 0x13, 0x27, 0xab, 0x76, 0xb4, 0xfd,
	0x7e, 0xef, 0xfd, 0x9e, 0xf3, 0x7e, 0x56, 0x60, 0x2d, 0xa1, 0xa8, 0x2b, 0xce, 0x3a, 0x09, 0xa3,
	0x82, 0x9a, 0x37, 0x38, 0x45, 0x2c, 0x18, 0xa0, 0x88, 0x74, 0x12, 0x8a, 0xec, 0x8d, 0xec, 0x90,
	0xe1, 0x24, 0x15, 0x48, 0x44, 0x94, 0xe4, 0x20, 0xf7, 0xa7, 0x01, 0xb7, 0x3d, 0x1e, 0xf6, 0x06,
	0x28, 0x8e, 0x31, 0x09, 0xf1, 0x09, 0x66, 0x5f, 0xa2, 0x00, 0x9b, 0x16, 0xac, 0x04, 0x0c, 0x23,
	0x41, 0x99, 0x65, 0xec, 0x19, 0xed, 0xeb, 0x7e, 0xb1, 0x34, 0x5d, 0x58, 0x0b, 0xe2, 0x08, 0x13,
	0xf1, 0x36, 0x3d, 0xfd, 0x8c, 0x47, 0xd6, 0x15, 0x79, 0x3c, 0xb7, 0x67, 0x1e, 0xc3, 0x9d, 0x7c,
	0xdd, 0xa3, 0xc3, 0x61, 0x4a, 0xa2, 0x40, 0x4a, 0x7a, 0xb4, 0x8f, 0xad, 0x96, 0x84, 0xd7, 0x1d,
	0x9b, 0x6d, 0x58, 0x0f, 0x8a, 0x5e, 0x7c, 0xcc, 0xd3, 0x58, 0x58, 0x57, 0x65, 0x45, 0x79, 0xdb,
	0xdd, 0x85, 0xbb, 0x9a, 0xc6, 0x7d, 0xcc, 0x13, 0x4a, 0x38, 0x76, 0x7f, 0x18, 0x60, 0x7a, 0x3c,
	0xf4, 0x53, 0x42, 0x30, 0x53, 0xa8, 0x06, 0x5f, 0x5b, 0xb0, 0xcc, 0x24, 0x78, 0xea, 0x68, 0xba,
	0x32, 0x8f, 0x61, 0x25, 0x6f, 0x96, 0x5b, 0xad, 0xbd, 0x56, 0x7b, 0xf5, 0xc8, 0xe9, 0xcc, 0x5d,
	0x6c, 0xa7, 0x57, 0x38, 0x8f, 0xa3, 0xe0, 0x0d, 0x1e, 0xf9, 0x05, 0x5c, 0x32, 0xce, 0x5a, 0x98,
	0xae, 0xdc, 0xc7, 0xb0, 0x5e, 0xaa, 0x31, 0xd7, 0xc0, 0x48, 0xa6, 0x0d, 0x19, 0x49, 0xb6, 0x22,
	0xb2, 0x8b, 0x6b, 0xbe, 0x41, 0xdc, 0x1d, 0xb0, 0xab, 0x46, 0x94, 0xcf, 0xe7, 0xb0, 0xed, 0xf1,
	0xf0, 0x04, 0xc7, 0x38, 0x10, 0x3e, 0x22, 0x7d, 0x3a, 0x54, 0x18, 0x56, 0xef, 0xd6, 0xfd, 0x06,
	0xfb, 0xb5, 0x65, 0x05, 0xb7, 0xf9, 0x1e, 0x6c, 0x56, 0x39, 0x2b, 0x02, 0x24, 0x19, 0x57, 0x8f,
	0xb6, 0x4b, 0xb7, 0xf1, 0x1f, 0xe0, 0x37, 0x14, 0xbb, 0x4f, 0x61, 0xb3, 0xa4, 0x9f, 0x1b, 0x6c,
	0x68, 0x99, 0xc1, 0xae, 0xb6, 0x44, 0xb5, 0xfb, 0x0e, 0xb6, 0xd8, 0xdc, 0xfe, 0xe2, 0xad, 0xd6,
	0x14, 0xba, 0xaf, 0x60, 0x23, 0x0b, 0x59, 0x8c, 0xa2, 0xa1, 0x47, 0x45, 0xca, 0x7d, 0xfc, 0x15,
	0xb1, 0x3e, 0x6f, 0x8e, 0x11, 0x1a, 0xd2, 0x94, 0x88, 0x22, 0x46, 0xf9, 0xca, 0x75, 0x60, 0x47,
	0xc7, 0xa4, 0xbe, 0xe3, 0x6b, 0x79, 0x21, 0xf2, 0xbc, 0xe8, 0xe2, 0xb2, 0x52, 0xf7, 0xe4, 0x45,
	0x55, 0xa9, 0x94, 0x96, 0x27, 0x33, 0x23, 0x01, 0xb3, 0x1f, 0xe7, 0xb2, 0x7a, 0x07, 0x32, 0x4b,
	0x7a, 0x3a, 0xa5, 0x79, 0x22, 0xfd, 0xf9, 0x38, 0x8c, 0xb8, 0xc0, 0xec, 0x25, 0x0a, 0x04, 0x65,
	0xa3, 0x2c, 0xfa, 0xf5, 0x7a, 0x7b, 0xb0, 0xfa, 0x29, 0xc7, 0xf5, 0x30, 0x2b, 0x44, 0x67, 0xb7,
	0xa6, 0x4e, 0xab, 0xa4, 0x85, 0xea, 0xd1, 0x9f, 0x65, 0x68, 0x79, 0x3c, 0x34, 0x4f, 0xe1, 0x66,
	0xe5, 0x89, 0x73, 0x4b, 0x71, 0xd0, 0xbc, 0x26, 0xf6, 0x83, 0x8b, 0x31, 0x2a, 0x7e, 0x1f, 0x61,
	0xbd, 0xfc, 0xda, 0xec, 0x57, 0xcb, 0x4b, 0x10, 0xfb, 0xfe, 0x85, 0x10, 0x25, 0x20, 0x60, 0xab,
	0x66, 0xce, 0xdb, 0x55, 0x12, 0x3d, 0xd2, 0x7e, 0xb2, 0x28, 0x52, 0xa9, 0x0e, 0xc0, 0xd4, 0x8c,
	0xe9, 0x61, 0x33, 0x4f, 0x8e, 0xb2, 0x1f, 0x2d, 0x82, 0x52, 0x4a, 0x18, 0x6e, 0x55, 0x27, 0xed,
	0x40, 0xf3, 0x05, 0xca, 0x20, 0xfb, 0xe1, 0x02, 0xa0, 0x59, 0x43, 0x9a, 0x31, 0x3b, 0xac, 0xa1,
	0x98, 0x43, 0xe9, 0x0c, 0xd5, 0xcf, 0x59, 0xa6, 0xa4, 0x09, 0xbc, 0x46, 0xa9, 0x8a, 0xd2, 0x29,
	0xd5, 0xe7, 0x3c, 0x8b, 0x46, 0xcd, 0x38, 0xb7, 0x6b, 0x3a, 0xae, 0x20, 0x75, 0xd1, 0x68, 0x9e,
	0xe9, 0x17, 0xdd, 0x5f, 0x63, 0xc7, 0x38, 0x1f, 0x3b, 0xc6, 0xdf, 0xb1, 0x63, 0x7c, 0x9f, 0x38,
	0x4b, 0xe7, 0x13, 0x67, 0xe9, 0xf7, 0xc4, 0x59, 0xfa, 0xb0, 0xa9, 0xa8, 0xba, 0x67, 0x5d, 0xf9,
	0x57, 0x32, 0x4a, 0x30, 0x3f, 0x5d, 0x96, 0x3f, 0x1d, 0xcf, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x20, 0xe0, 0x23, 0x8e, 0xa9, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ChallengeService(ctx context.Context, in *MsgChallengeService, opts ...grpc.CallOption) (*MsgChallengeServiceResponse, error)
	RunnerChallenge(ctx context.Context, in *MsgRunnerChallenge, opts ...grpc.CallOption) (*MsgRunnerChallengeResponse, error)
	SelectRandomChallenger(ctx context.Context, in *MsgSelectRandomChallenger, opts ...grpc.CallOption) (*MsgSelectRandomChallengerResponse, error)
	SelectRandomRunner(ctx context.Context, in *MsgSelectRandomRunner, opts ...grpc.CallOption) (*MsgSelectRandomRunnerResponse, error)
	ClaimMotusRewards(ctx context.Context, in *MsgClaimMotusRewards, opts ...grpc.CallOption) (*MsgClaimMotusRewardsResponse, error)
	ClaimRunnerRewards(ctx context.Context, in *MsgClaimRunnerRewards, opts ...grpc.CallOption) (*MsgClaimRunnerRewardsResponse, error)
	RegisterFactoryKey(ctx context.Context, in *MsgRegisterFactoryKey, opts ...grpc.CallOption) (*MsgRegisterFactoryKeyResponse, error)
	ClaimChallengerRewards(ctx context.Context, in *MsgClaimChallengerRewards, opts ...grpc.CallOption) (*MsgClaimChallengerRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ChallengeService(ctx context.Context, in *MsgChallengeService, opts ...grpc.CallOption) (*MsgChallengeServiceResponse, error) {
	out := new(MsgChallengeServiceResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ChallengeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RunnerChallenge(ctx context.Context, in *MsgRunnerChallenge, opts ...grpc.CallOption) (*MsgRunnerChallengeResponse, error) {
	out := new(MsgRunnerChallengeResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/RunnerChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelectRandomChallenger(ctx context.Context, in *MsgSelectRandomChallenger, opts ...grpc.CallOption) (*MsgSelectRandomChallengerResponse, error) {
	out := new(MsgSelectRandomChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/SelectRandomChallenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SelectRandomRunner(ctx context.Context, in *MsgSelectRandomRunner, opts ...grpc.CallOption) (*MsgSelectRandomRunnerResponse, error) {
	out := new(MsgSelectRandomRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/SelectRandomRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimMotusRewards(ctx context.Context, in *MsgClaimMotusRewards, opts ...grpc.CallOption) (*MsgClaimMotusRewardsResponse, error) {
	out := new(MsgClaimMotusRewardsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ClaimMotusRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRunnerRewards(ctx context.Context, in *MsgClaimRunnerRewards, opts ...grpc.CallOption) (*MsgClaimRunnerRewardsResponse, error) {
	out := new(MsgClaimRunnerRewardsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ClaimRunnerRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterFactoryKey(ctx context.Context, in *MsgRegisterFactoryKey, opts ...grpc.CallOption) (*MsgRegisterFactoryKeyResponse, error) {
	out := new(MsgRegisterFactoryKeyResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/RegisterFactoryKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimChallengerRewards(ctx context.Context, in *MsgClaimChallengerRewards, opts ...grpc.CallOption) (*MsgClaimChallengerRewardsResponse, error) {
	out := new(MsgClaimChallengerRewardsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Msg/ClaimChallengerRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ChallengeService(context.Context, *MsgChallengeService) (*MsgChallengeServiceResponse, error)
	RunnerChallenge(context.Context, *MsgRunnerChallenge) (*MsgRunnerChallengeResponse, error)
	SelectRandomChallenger(context.Context, *MsgSelectRandomChallenger) (*MsgSelectRandomChallengerResponse, error)
	SelectRandomRunner(context.Context, *MsgSelectRandomRunner) (*MsgSelectRandomRunnerResponse, error)
	ClaimMotusRewards(context.Context, *MsgClaimMotusRewards) (*MsgClaimMotusRewardsResponse, error)
	ClaimRunnerRewards(context.Context, *MsgClaimRunnerRewards) (*MsgClaimRunnerRewardsResponse, error)
	RegisterFactoryKey(context.Context, *MsgRegisterFactoryKey) (*MsgRegisterFactoryKeyResponse, error)
	ClaimChallengerRewards(context.Context, *MsgClaimChallengerRewards) (*MsgClaimChallengerRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ChallengeService(ctx context.Context, req *MsgChallengeService) (*MsgChallengeServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeService not implemented")
}
func (*UnimplementedMsgServer) RunnerChallenge(ctx context.Context, req *MsgRunnerChallenge) (*MsgRunnerChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerChallenge not implemented")
}
func (*UnimplementedMsgServer) SelectRandomChallenger(ctx context.Context, req *MsgSelectRandomChallenger) (*MsgSelectRandomChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRandomChallenger not implemented")
}
func (*UnimplementedMsgServer) SelectRandomRunner(ctx context.Context, req *MsgSelectRandomRunner) (*MsgSelectRandomRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRandomRunner not implemented")
}
func (*UnimplementedMsgServer) ClaimMotusRewards(ctx context.Context, req *MsgClaimMotusRewards) (*MsgClaimMotusRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMotusRewards not implemented")
}
func (*UnimplementedMsgServer) ClaimRunnerRewards(ctx context.Context, req *MsgClaimRunnerRewards) (*MsgClaimRunnerRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRunnerRewards not implemented")
}
func (*UnimplementedMsgServer) RegisterFactoryKey(ctx context.Context, req *MsgRegisterFactoryKey) (*MsgRegisterFactoryKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFactoryKey not implemented")
}
func (*UnimplementedMsgServer) ClaimChallengerRewards(ctx context.Context, req *MsgClaimChallengerRewards) (*MsgClaimChallengerRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimChallengerRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ChallengeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChallengeService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChallengeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ChallengeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChallengeService(ctx, req.(*MsgChallengeService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RunnerChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRunnerChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RunnerChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/RunnerChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RunnerChallenge(ctx, req.(*MsgRunnerChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelectRandomChallenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelectRandomChallenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelectRandomChallenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/SelectRandomChallenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelectRandomChallenger(ctx, req.(*MsgSelectRandomChallenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SelectRandomRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSelectRandomRunner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SelectRandomRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/SelectRandomRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SelectRandomRunner(ctx, req.(*MsgSelectRandomRunner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimMotusRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimMotusRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimMotusRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ClaimMotusRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimMotusRewards(ctx, req.(*MsgClaimMotusRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRunnerRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRunnerRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRunnerRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ClaimRunnerRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRunnerRewards(ctx, req.(*MsgClaimRunnerRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterFactoryKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterFactoryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterFactoryKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/RegisterFactoryKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterFactoryKey(ctx, req.(*MsgRegisterFactoryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimChallengerRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimChallengerRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimChallengerRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Msg/ClaimChallengerRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimChallengerRewards(ctx, req.(*MsgClaimChallengerRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soarchain.poa.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChallengeService",
			Handler:    _Msg_ChallengeService_Handler,
		},
		{
			MethodName: "RunnerChallenge",
			Handler:    _Msg_RunnerChallenge_Handler,
		},
		{
			MethodName: "SelectRandomChallenger",
			Handler:    _Msg_SelectRandomChallenger_Handler,
		},
		{
			MethodName: "SelectRandomRunner",
			Handler:    _Msg_SelectRandomRunner_Handler,
		},
		{
			MethodName: "ClaimMotusRewards",
			Handler:    _Msg_ClaimMotusRewards_Handler,
		},
		{
			MethodName: "ClaimRunnerRewards",
			Handler:    _Msg_ClaimRunnerRewards_Handler,
		},
		{
			MethodName: "RegisterFactoryKey",
			Handler:    _Msg_RegisterFactoryKey_Handler,
		},
		{
			MethodName: "ClaimChallengerRewards",
			Handler:    _Msg_ClaimChallengerRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poa/tx.proto",
}

func (m *MsgChallengeService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeResult) > 0 {
		i -= len(m.ChallengeResult)
		copy(dAtA[i:], m.ChallengeResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeResult)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientCommunicationMode) > 0 {
		i -= len(m.ClientCommunicationMode)
		copy(dAtA[i:], m.ClientCommunicationMode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientCommunicationMode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientPubkey) > 0 {
		i -= len(m.ClientPubkey)
		copy(dAtA[i:], m.ClientPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChallengeServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRunnerChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunnerChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunnerChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Clients) > 0 {
		for iNdEx := len(m.Clients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Runner) > 0 {
		i -= len(m.Runner)
		copy(dAtA[i:], m.Runner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Runner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientPublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientPublicKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientPublicKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x10
	}
	if len(m.P) > 0 {
		i -= len(m.P)
		copy(dAtA[i:], m.P)
		i = encodeVarintTx(dAtA, i, uint64(len(m.P)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRunnerChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunnerChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunnerChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomChallenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomChallenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomChallenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomChallengerReputation != nil {
		{
			size, err := m.RandomChallengerReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomRunner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomRunner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomRunner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSelectRandomRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSelectRandomRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSelectRandomRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomRunnerReputation != nil {
		{
			size, err := m.RandomRunnerReputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMotusRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMotusRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMotusRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimMotusRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimMotusRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimMotusRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRunnerRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRunnerRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRunnerRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRunnerRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRunnerRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRunnerRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimChallengerRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimChallengerRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimChallengerRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimChallengerRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimChallengerRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimChallengerRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFactoryKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFactoryKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFactoryKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FactoryCert) > 0 {
		i -= len(m.FactoryCert)
		copy(dAtA[i:], m.FactoryCert)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FactoryCert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterFactoryKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterFactoryKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterFactoryKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgChallengeService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientCommunicationMode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChallengeServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRunnerChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Runner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ClientPublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovTx(uint64(m.N))
	}
	return n
}

func (m *MsgRunnerChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSelectRandomChallenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectRandomChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomChallengerReputation != nil {
		l = m.RandomChallengerReputation.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectRandomRunner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSelectRandomRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomRunnerReputation != nil {
		l = m.RandomRunnerReputation.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimMotusRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimMotusRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRunnerRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimRunnerRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimChallengerRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimChallengerRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterFactoryKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FactoryCert)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterFactoryKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgChallengeService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCommunicationMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCommunicationMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunnerChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunnerChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunnerChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &ClientPublicKey{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientPublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientPublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientPublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunnerChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunnerChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunnerChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomChallenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomChallenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomChallenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomChallengerReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RandomChallengerReputation == nil {
				m.RandomChallengerReputation = &Reputation{}
			}
			if err := m.RandomChallengerReputation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomRunner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomRunner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomRunner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSelectRandomRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSelectRandomRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSelectRandomRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomRunnerReputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RandomRunnerReputation == nil {
				m.RandomRunnerReputation = &Reputation{}
			}
			if err := m.RandomRunnerReputation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMotusRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMotusRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMotusRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimMotusRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimMotusRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimMotusRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRunnerRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRunnerRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRunnerRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRunnerRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRunnerRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRunnerRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimChallengerRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimChallengerRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimChallengerRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimChallengerRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimChallengerRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimChallengerRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFactoryKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFactoryKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFactoryKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoryCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterFactoryKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterFactoryKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterFactoryKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
