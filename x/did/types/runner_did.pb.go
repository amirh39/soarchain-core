// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/runner_did.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RunnerDid struct {
	Id                  string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PubKey              string                     `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Keys                *Keys                      `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	VerificationMethods []*VerificationMethod      `protobuf:"bytes,4,rep,name=verificationMethods,json=verificationMethod,proto3" json:"verificationMethods,omitempty"`
	Authentications     []VerificationRelationship `protobuf:"bytes,5,rep,name=authentications,json=authentication,proto3,customtype=VerificationRelationship" json:"authentications,omitempty"`
	Services            []*Service                 `protobuf:"bytes,6,rep,name=services,json=service,proto3" json:"services,omitempty"`
	IpAddress           string                     `protobuf:"bytes,8,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Created             string                     `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	Updated             string                     `protobuf:"bytes,10,opt,name=updated,proto3" json:"updated,omitempty"`
	Address             string                     `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *RunnerDid) Reset()         { *m = RunnerDid{} }
func (m *RunnerDid) String() string { return proto.CompactTextString(m) }
func (*RunnerDid) ProtoMessage()    {}
func (*RunnerDid) Descriptor() ([]byte, []int) {
	return fileDescriptor_f879102058957980, []int{0}
}
func (m *RunnerDid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerDid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerDid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerDid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDid.Merge(m, src)
}
func (m *RunnerDid) XXX_Size() int {
	return m.Size()
}
func (m *RunnerDid) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDid.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDid proto.InternalMessageInfo

func (m *RunnerDid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RunnerDid) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *RunnerDid) GetKeys() *Keys {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RunnerDid) GetVerificationMethods() []*VerificationMethod {
	if m != nil {
		return m.VerificationMethods
	}
	return nil
}

func (m *RunnerDid) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *RunnerDid) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *RunnerDid) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *RunnerDid) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *RunnerDid) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RunnerDidWithSeq defines a message for Did with a sequence number for preventing replay attacks.
type RunnerDidWithSeq struct {
	Document *RunnerDid `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Sequence uint64     `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *RunnerDidWithSeq) Reset()         { *m = RunnerDidWithSeq{} }
func (m *RunnerDidWithSeq) String() string { return proto.CompactTextString(m) }
func (*RunnerDidWithSeq) ProtoMessage()    {}
func (*RunnerDidWithSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f879102058957980, []int{1}
}
func (m *RunnerDidWithSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerDidWithSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerDidWithSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerDidWithSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDidWithSeq.Merge(m, src)
}
func (m *RunnerDidWithSeq) XXX_Size() int {
	return m.Size()
}
func (m *RunnerDidWithSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDidWithSeq.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDidWithSeq proto.InternalMessageInfo

func (m *RunnerDidWithSeq) GetDocument() *RunnerDid {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *RunnerDidWithSeq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// RunnerDataWithSeq defines a message for data with a sequence number for preventing replay attacks.
type RunnerDataWithSeq struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *RunnerDataWithSeq) Reset()         { *m = RunnerDataWithSeq{} }
func (m *RunnerDataWithSeq) String() string { return proto.CompactTextString(m) }
func (*RunnerDataWithSeq) ProtoMessage()    {}
func (*RunnerDataWithSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f879102058957980, []int{2}
}
func (m *RunnerDataWithSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerDataWithSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunnerDataWithSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunnerDataWithSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerDataWithSeq.Merge(m, src)
}
func (m *RunnerDataWithSeq) XXX_Size() int {
	return m.Size()
}
func (m *RunnerDataWithSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerDataWithSeq.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerDataWithSeq proto.InternalMessageInfo

func (m *RunnerDataWithSeq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RunnerDataWithSeq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*RunnerDid)(nil), "soarchain.did.RunnerDid")
	proto.RegisterType((*RunnerDidWithSeq)(nil), "soarchain.did.RunnerDidWithSeq")
	proto.RegisterType((*RunnerDataWithSeq)(nil), "soarchain.did.RunnerDataWithSeq")
}

func init() { proto.RegisterFile("did/runner_did.proto", fileDescriptor_f879102058957980) }

var fileDescriptor_f879102058957980 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0xda, 0xd0, 0x35, 0x0e, 0x0c, 0xf0, 0xc6, 0x64, 0x55, 0x53, 0x28, 0xbd, 0xac, 0xa7,
	0x44, 0x14, 0x5e, 0x80, 0xc1, 0x6d, 0xe2, 0xe2, 0x49, 0x20, 0x71, 0x41, 0x5e, 0xbe, 0x8f, 0xc5,
	0x62, 0xd8, 0x99, 0xed, 0x4c, 0xe4, 0x2d, 0x78, 0x23, 0xae, 0x1c, 0x77, 0x44, 0x1c, 0x10, 0x6a,
	0x5f, 0x04, 0xc5, 0xc9, 0x32, 0xad, 0xd3, 0x76, 0xf3, 0xef, 0xfb, 0xfd, 0x73, 0xf2, 0x99, 0xec,
	0x82, 0x84, 0xcc, 0x54, 0x4a, 0xa1, 0xf9, 0x0c, 0x12, 0xd2, 0xd2, 0x68, 0xa7, 0xe9, 0x23, 0xab,
	0x85, 0xc9, 0x0b, 0x21, 0x55, 0x0a, 0x12, 0xa6, 0xbb, 0xa7, 0xfa, 0x54, 0x7b, 0x26, 0x6b, 0x4e,
	0xad, 0x68, 0xea, 0xad, 0xf9, 0x99, 0x44, 0xe5, 0xae, 0xad, 0xf3, 0x9f, 0x23, 0x12, 0x71, 0x9f,
	0xf7, 0x4e, 0x02, 0xdd, 0x26, 0x43, 0x09, 0x2c, 0x98, 0x05, 0x8b, 0x88, 0x0f, 0x25, 0xd0, 0x3d,
	0x32, 0x2e, 0xab, 0x93, 0x23, 0xac, 0xd9, 0xd0, 0xcf, 0x3a, 0x44, 0x0f, 0x48, 0xf8, 0x15, 0x6b,
	0xcb, 0x46, 0xb3, 0x60, 0x11, 0x2f, 0x77, 0xd2, 0x1b, 0xfd, 0xe9, 0x11, 0xd6, 0x96, 0x7b, 0x01,
	0xe5, 0x64, 0xe7, 0x02, 0x8d, 0xfc, 0x22, 0x73, 0xe1, 0xa4, 0x56, 0xef, 0xd1, 0x15, 0x1a, 0x2c,
	0x0b, 0x67, 0xa3, 0x45, 0xbc, 0x7c, 0xb1, 0xe1, 0xfb, 0x70, 0x4b, 0xc9, 0xe9, 0x6d, 0x37, 0x55,
	0xe4, 0xb1, 0xa8, 0x5c, 0x81, 0xca, 0x75, 0x73, 0xcb, 0x1e, 0xf8, 0xbc, 0x83, 0x7b, 0xf2, 0x38,
	0x9e, 0xb5, 0xda, 0x42, 0x96, 0x87, 0xfb, 0x7f, 0xfe, 0x3e, 0x67, 0x77, 0xb1, 0x7c, 0xfb, 0x66,
	0x3a, 0x7d, 0x49, 0x26, 0x16, 0xcd, 0x85, 0xcc, 0xd1, 0xb2, 0xb1, 0x2f, 0xda, 0xdb, 0x28, 0x3a,
	0x6e, 0x69, 0xbe, 0xd5, 0xe9, 0xe8, 0x3e, 0x89, 0x64, 0xf9, 0x06, 0xc0, 0xa0, 0xb5, 0x6c, 0xe2,
	0x7f, 0xdd, 0xf5, 0x80, 0x32, 0xb2, 0x95, 0x1b, 0x14, 0x0e, 0x81, 0x45, 0x9e, 0xbb, 0x82, 0x0d,
	0x53, 0x95, 0xe0, 0x19, 0xd2, 0x32, 0x1d, 0x6c, 0x18, 0xd1, 0xe5, 0xc5, 0x2d, 0xd3, 0xc1, 0x39,
	0x90, 0x27, 0xfd, 0x02, 0x3f, 0x4a, 0x57, 0x1c, 0xe3, 0x39, 0x7d, 0x4d, 0x26, 0xa0, 0xf3, 0xea,
	0x1b, 0x2a, 0xe7, 0xb7, 0x19, 0x2f, 0xd9, 0xc6, 0x95, 0x7b, 0x0b, 0xef, 0x95, 0x74, 0xda, 0x7c,
	0xe8, 0x79, 0x85, 0x2a, 0x47, 0xbf, 0xef, 0x90, 0xf7, 0x78, 0xfe, 0x96, 0x3c, 0xed, 0x2c, 0xc2,
	0x89, 0xab, 0x1a, 0x4a, 0x42, 0x10, 0x4e, 0xf8, 0x8a, 0x87, 0xdc, 0x9f, 0xef, 0x0b, 0x39, 0xcc,
	0x7e, 0xad, 0x92, 0xe0, 0x72, 0x95, 0x04, 0xff, 0x56, 0x49, 0xf0, 0x63, 0x9d, 0x0c, 0x2e, 0xd7,
	0xc9, 0xe0, 0xf7, 0x3a, 0x19, 0x7c, 0x7a, 0xd6, 0xdf, 0x2e, 0xfb, 0x9e, 0x35, 0x0f, 0xd5, 0xd5,
	0x25, 0xda, 0x93, 0xb1, 0x7f, 0xa4, 0xaf, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x55, 0x3a,
	0x61, 0xf7, 0x02, 0x00, 0x00,
}

func (m *RunnerDid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerDid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerDid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Updated) > 0 {
		i -= len(m.Updated)
		copy(dAtA[i:], m.Updated)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.Updated)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRunnerDid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Authentications) > 0 {
		for iNdEx := len(m.Authentications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Authentications[iNdEx].Size()
				i -= size
				if _, err := m.Authentications[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintRunnerDid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.VerificationMethods) > 0 {
		for iNdEx := len(m.VerificationMethods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerificationMethods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRunnerDid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Keys != nil {
		{
			size, err := m.Keys.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRunnerDid(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunnerDidWithSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerDidWithSeq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerDidWithSeq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintRunnerDid(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRunnerDid(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunnerDataWithSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerDataWithSeq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerDataWithSeq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintRunnerDid(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRunnerDid(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRunnerDid(dAtA []byte, offset int, v uint64) int {
	offset -= sovRunnerDid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RunnerDid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	if m.Keys != nil {
		l = m.Keys.Size()
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	if len(m.VerificationMethods) > 0 {
		for _, e := range m.VerificationMethods {
			l = e.Size()
			n += 1 + l + sovRunnerDid(uint64(l))
		}
	}
	if len(m.Authentications) > 0 {
		for _, e := range m.Authentications {
			l = e.Size()
			n += 1 + l + sovRunnerDid(uint64(l))
		}
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovRunnerDid(uint64(l))
		}
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	l = len(m.Updated)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	return n
}

func (m *RunnerDidWithSeq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovRunnerDid(uint64(m.Sequence))
	}
	return n
}

func (m *RunnerDataWithSeq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRunnerDid(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovRunnerDid(uint64(m.Sequence))
	}
	return n
}

func sovRunnerDid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRunnerDid(x uint64) (n int) {
	return sovRunnerDid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RunnerDid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunnerDid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerDid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerDid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = &Keys{}
			}
			if err := m.Keys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethods = append(m.VerificationMethods, &VerificationMethod{})
			if err := m.VerificationMethods[len(m.VerificationMethods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentications = append(m.Authentications, VerificationRelationship{})
			if err := m.Authentications[len(m.Authentications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRunnerDid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerDidWithSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunnerDid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerDidWithSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerDidWithSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &RunnerDid{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRunnerDid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerDataWithSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRunnerDid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerDataWithSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerDataWithSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRunnerDid
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRunnerDid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRunnerDid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRunnerDid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRunnerDid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRunnerDid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRunnerDid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRunnerDid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRunnerDid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRunnerDid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRunnerDid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRunnerDid = fmt.Errorf("proto: unexpected end of group")
)
