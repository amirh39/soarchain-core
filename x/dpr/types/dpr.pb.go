// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dpr/dpr.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Dpr struct {
	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	SupportedPIDs string   `protobuf:"bytes,3,opt,name=SupportedPIDs,proto3" json:"SupportedPIDs,omitempty"`
	IsActive      bool     `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
	ClientPubkeys []string `protobuf:"bytes,5,rep,name=clientPubkeys,proto3" json:"clientPubkeys,omitempty"`
	Duration      uint64   `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	DPRendTime    string   `protobuf:"bytes,7,opt,name=DPRendTime,proto3" json:"DPRendTime,omitempty"`
}

func (m *Dpr) Reset()         { *m = Dpr{} }
func (m *Dpr) String() string { return proto.CompactTextString(m) }
func (*Dpr) ProtoMessage()    {}
func (*Dpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_221c37c1dd019f8d, []int{0}
}
func (m *Dpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dpr.Merge(m, src)
}
func (m *Dpr) XXX_Size() int {
	return m.Size()
}
func (m *Dpr) XXX_DiscardUnknown() {
	xxx_messageInfo_Dpr.DiscardUnknown(m)
}

var xxx_messageInfo_Dpr proto.InternalMessageInfo

func (m *Dpr) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Dpr) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Dpr) GetSupportedPIDs() string {
	if m != nil {
		return m.SupportedPIDs
	}
	return ""
}

func (m *Dpr) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Dpr) GetClientPubkeys() []string {
	if m != nil {
		return m.ClientPubkeys
	}
	return nil
}

func (m *Dpr) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Dpr) GetDPRendTime() string {
	if m != nil {
		return m.DPRendTime
	}
	return ""
}

func init() {
	proto.RegisterType((*Dpr)(nil), "soarchain.dpr.Dpr")
}

func init() { proto.RegisterFile("dpr/dpr.proto", fileDescriptor_221c37c1dd019f8d) }

var fileDescriptor_221c37c1dd019f8d = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4a, 0xc4, 0x30,
	0x18, 0xc7, 0x9b, 0xf6, 0xbc, 0x3b, 0x03, 0x75, 0x08, 0x08, 0xc1, 0x21, 0x14, 0x71, 0xe8, 0x74,
	0x1d, 0x7c, 0x02, 0xa5, 0x8b, 0x5b, 0xa9, 0x4e, 0x6e, 0xbd, 0x26, 0xe0, 0x87, 0xda, 0x7c, 0x7c,
	0x49, 0xc5, 0x7b, 0x0b, 0x1f, 0xcb, 0xf1, 0xc0, 0xc5, 0x51, 0xda, 0x17, 0x91, 0x06, 0x2c, 0x76,
	0xfc, 0xfd, 0x02, 0x3f, 0xf2, 0xfd, 0x79, 0xaa, 0x91, 0x0a, 0x8d, 0xb4, 0x43, 0xb2, 0xde, 0x8a,
	0xd4, 0xd9, 0x86, 0xda, 0xa7, 0x06, 0xba, 0x9d, 0x46, 0xba, 0xfc, 0x62, 0x3c, 0x29, 0x91, 0xc4,
	0x19, 0x8f, 0x41, 0x4b, 0x96, 0xb1, 0xfc, 0xb4, 0x8e, 0x41, 0x0b, 0xc9, 0x37, 0x2d, 0x99, 0xc6,
	0x5b, 0x92, 0x71, 0x90, 0x7f, 0x28, 0xae, 0x78, 0x7a, 0xdf, 0x23, 0x5a, 0xf2, 0x46, 0x57, 0x77,
	0xa5, 0x93, 0x49, 0x78, 0x5f, 0x4a, 0x71, 0xc1, 0xb7, 0xe0, 0x6e, 0x5a, 0x0f, 0x6f, 0x46, 0xae,
	0x32, 0x96, 0x6f, 0xeb, 0x99, 0xa7, 0x42, 0xfb, 0x02, 0xa6, 0xf3, 0x55, 0xbf, 0x7f, 0x36, 0x07,
	0x27, 0x4f, 0xb2, 0x64, 0x2a, 0x2c, 0xe4, 0x54, 0xd0, 0x3d, 0x35, 0x1e, 0x6c, 0x27, 0xd7, 0x19,
	0xcb, 0x57, 0xf5, 0xcc, 0x42, 0x71, 0x5e, 0x56, 0xb5, 0xe9, 0xf4, 0x03, 0xbc, 0x1a, 0xb9, 0x09,
	0x1f, 0xf8, 0x67, 0x6e, 0x8b, 0xcf, 0x41, 0xb1, 0xe3, 0xa0, 0xd8, 0xcf, 0xa0, 0xd8, 0xc7, 0xa8,
	0xa2, 0xe3, 0xa8, 0xa2, 0xef, 0x51, 0x45, 0x8f, 0xe7, 0xf3, 0xf9, 0xc5, 0xfb, 0xb4, 0x4a, 0xe1,
	0x0f, 0x68, 0xdc, 0x7e, 0x1d, 0xc6, 0xb9, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x09, 0x8a, 0xe0,
	0x4c, 0x2d, 0x01, 0x00, 0x00,
}

func (m *Dpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DPRendTime) > 0 {
		i -= len(m.DPRendTime)
		copy(dAtA[i:], m.DPRendTime)
		i = encodeVarintDpr(dAtA, i, uint64(len(m.DPRendTime)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Duration != 0 {
		i = encodeVarintDpr(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClientPubkeys) > 0 {
		for iNdEx := len(m.ClientPubkeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientPubkeys[iNdEx])
			copy(dAtA[i:], m.ClientPubkeys[iNdEx])
			i = encodeVarintDpr(dAtA, i, uint64(len(m.ClientPubkeys[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.SupportedPIDs) > 0 {
		i -= len(m.SupportedPIDs)
		copy(dAtA[i:], m.SupportedPIDs)
		i = encodeVarintDpr(dAtA, i, uint64(len(m.SupportedPIDs)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDpr(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDpr(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDpr(dAtA []byte, offset int, v uint64) int {
	offset -= sovDpr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDpr(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDpr(uint64(l))
	}
	l = len(m.SupportedPIDs)
	if l > 0 {
		n += 1 + l + sovDpr(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if len(m.ClientPubkeys) > 0 {
		for _, s := range m.ClientPubkeys {
			l = len(s)
			n += 1 + l + sovDpr(uint64(l))
		}
	}
	if m.Duration != 0 {
		n += 1 + sovDpr(uint64(m.Duration))
	}
	l = len(m.DPRendTime)
	if l > 0 {
		n += 1 + l + sovDpr(uint64(l))
	}
	return n
}

func sovDpr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDpr(x uint64) (n int) {
	return sovDpr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDpr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedPIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedPIDs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPubkeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPubkeys = append(m.ClientPubkeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DPRendTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDpr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDpr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DPRendTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDpr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDpr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDpr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDpr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDpr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDpr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDpr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDpr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDpr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDpr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDpr = fmt.Errorf("proto: unexpected end of group")
)
