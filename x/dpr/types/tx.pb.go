// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dpr/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgGenDpr struct {
	Creator                       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PidSupportedOneToTwnety       bool   `protobuf:"varint,2,opt,name=pidSupportedOneToTwnety,proto3" json:"pidSupportedOneToTwnety,omitempty"`
	PidSupportedTwentyOneToForthy bool   `protobuf:"varint,3,opt,name=pidSupportedTwentyOneToForthy,proto3" json:"pidSupportedTwentyOneToForthy,omitempty"`
	PidSupportedForthyOneToSixty  bool   `protobuf:"varint,4,opt,name=pidSupportedForthyOneToSixty,proto3" json:"pidSupportedForthyOneToSixty,omitempty"`
	Duration                      uint64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *MsgGenDpr) Reset()         { *m = MsgGenDpr{} }
func (m *MsgGenDpr) String() string { return proto.CompactTextString(m) }
func (*MsgGenDpr) ProtoMessage()    {}
func (*MsgGenDpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{0}
}
func (m *MsgGenDpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenDpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenDpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenDpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenDpr.Merge(m, src)
}
func (m *MsgGenDpr) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenDpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenDpr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenDpr proto.InternalMessageInfo

func (m *MsgGenDpr) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGenDpr) GetPidSupportedOneToTwnety() bool {
	if m != nil {
		return m.PidSupportedOneToTwnety
	}
	return false
}

func (m *MsgGenDpr) GetPidSupportedTwentyOneToForthy() bool {
	if m != nil {
		return m.PidSupportedTwentyOneToForthy
	}
	return false
}

func (m *MsgGenDpr) GetPidSupportedForthyOneToSixty() bool {
	if m != nil {
		return m.PidSupportedForthyOneToSixty
	}
	return false
}

func (m *MsgGenDpr) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type MsgGenDprResponse struct {
}

func (m *MsgGenDprResponse) Reset()         { *m = MsgGenDprResponse{} }
func (m *MsgGenDprResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGenDprResponse) ProtoMessage()    {}
func (*MsgGenDprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{1}
}
func (m *MsgGenDprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenDprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenDprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenDprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenDprResponse.Merge(m, src)
}
func (m *MsgGenDprResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenDprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenDprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenDprResponse proto.InternalMessageInfo

type MsgUpdateDpr struct {
	DprId                         string `protobuf:"bytes,1,opt,name=dprId,proto3" json:"dprId,omitempty"`
	PidSupportedOneToTwnety       bool   `protobuf:"varint,2,opt,name=pidSupportedOneToTwnety,proto3" json:"pidSupportedOneToTwnety,omitempty"`
	PidSupportedTwentyOneToForthy bool   `protobuf:"varint,3,opt,name=pidSupportedTwentyOneToForthy,proto3" json:"pidSupportedTwentyOneToForthy,omitempty"`
	PidSupportedForthyOneToSixty  bool   `protobuf:"varint,4,opt,name=pidSupportedForthyOneToSixty,proto3" json:"pidSupportedForthyOneToSixty,omitempty"`
	Duration                      uint64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Sender                        string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpdateDpr) Reset()         { *m = MsgUpdateDpr{} }
func (m *MsgUpdateDpr) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDpr) ProtoMessage()    {}
func (*MsgUpdateDpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{2}
}
func (m *MsgUpdateDpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDpr.Merge(m, src)
}
func (m *MsgUpdateDpr) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDpr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDpr proto.InternalMessageInfo

func (m *MsgUpdateDpr) GetDprId() string {
	if m != nil {
		return m.DprId
	}
	return ""
}

func (m *MsgUpdateDpr) GetPidSupportedOneToTwnety() bool {
	if m != nil {
		return m.PidSupportedOneToTwnety
	}
	return false
}

func (m *MsgUpdateDpr) GetPidSupportedTwentyOneToForthy() bool {
	if m != nil {
		return m.PidSupportedTwentyOneToForthy
	}
	return false
}

func (m *MsgUpdateDpr) GetPidSupportedForthyOneToSixty() bool {
	if m != nil {
		return m.PidSupportedForthyOneToSixty
	}
	return false
}

func (m *MsgUpdateDpr) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgUpdateDpr) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgUpdateDprResponse struct {
}

func (m *MsgUpdateDprResponse) Reset()         { *m = MsgUpdateDprResponse{} }
func (m *MsgUpdateDprResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDprResponse) ProtoMessage()    {}
func (*MsgUpdateDprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{3}
}
func (m *MsgUpdateDprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDprResponse.Merge(m, src)
}
func (m *MsgUpdateDprResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDprResponse proto.InternalMessageInfo

type MsgEnterDpr struct {
	PubKey string `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	DprId  string `protobuf:"bytes,3,opt,name=dprId,proto3" json:"dprId,omitempty"`
}

func (m *MsgEnterDpr) Reset()         { *m = MsgEnterDpr{} }
func (m *MsgEnterDpr) String() string { return proto.CompactTextString(m) }
func (*MsgEnterDpr) ProtoMessage()    {}
func (*MsgEnterDpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{4}
}
func (m *MsgEnterDpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnterDpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnterDpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnterDpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnterDpr.Merge(m, src)
}
func (m *MsgEnterDpr) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnterDpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnterDpr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnterDpr proto.InternalMessageInfo

func (m *MsgEnterDpr) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgEnterDpr) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgEnterDpr) GetDprId() string {
	if m != nil {
		return m.DprId
	}
	return ""
}

type MsgEnterDprResponse struct {
}

func (m *MsgEnterDprResponse) Reset()         { *m = MsgEnterDprResponse{} }
func (m *MsgEnterDprResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEnterDprResponse) ProtoMessage()    {}
func (*MsgEnterDprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{5}
}
func (m *MsgEnterDprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnterDprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnterDprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnterDprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnterDprResponse.Merge(m, src)
}
func (m *MsgEnterDprResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnterDprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnterDprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnterDprResponse proto.InternalMessageInfo

type MsgActivateDpr struct {
	DprId  string `protobuf:"bytes,1,opt,name=dprId,proto3" json:"dprId,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgActivateDpr) Reset()         { *m = MsgActivateDpr{} }
func (m *MsgActivateDpr) String() string { return proto.CompactTextString(m) }
func (*MsgActivateDpr) ProtoMessage()    {}
func (*MsgActivateDpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{6}
}
func (m *MsgActivateDpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateDpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateDpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateDpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateDpr.Merge(m, src)
}
func (m *MsgActivateDpr) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateDpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateDpr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateDpr proto.InternalMessageInfo

func (m *MsgActivateDpr) GetDprId() string {
	if m != nil {
		return m.DprId
	}
	return ""
}

func (m *MsgActivateDpr) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgActivateDprResponse struct {
}

func (m *MsgActivateDprResponse) Reset()         { *m = MsgActivateDprResponse{} }
func (m *MsgActivateDprResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateDprResponse) ProtoMessage()    {}
func (*MsgActivateDprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{7}
}
func (m *MsgActivateDprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateDprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateDprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateDprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateDprResponse.Merge(m, src)
}
func (m *MsgActivateDprResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateDprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateDprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateDprResponse proto.InternalMessageInfo

type MsgLeaveDpr struct {
	PubKey string `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	DprId  string `protobuf:"bytes,3,opt,name=dprId,proto3" json:"dprId,omitempty"`
}

func (m *MsgLeaveDpr) Reset()         { *m = MsgLeaveDpr{} }
func (m *MsgLeaveDpr) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveDpr) ProtoMessage()    {}
func (*MsgLeaveDpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{8}
}
func (m *MsgLeaveDpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveDpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveDpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveDpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveDpr.Merge(m, src)
}
func (m *MsgLeaveDpr) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveDpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveDpr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveDpr proto.InternalMessageInfo

func (m *MsgLeaveDpr) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *MsgLeaveDpr) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgLeaveDpr) GetDprId() string {
	if m != nil {
		return m.DprId
	}
	return ""
}

type MsgLeaveDprResponse struct {
}

func (m *MsgLeaveDprResponse) Reset()         { *m = MsgLeaveDprResponse{} }
func (m *MsgLeaveDprResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveDprResponse) ProtoMessage()    {}
func (*MsgLeaveDprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{9}
}
func (m *MsgLeaveDprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveDprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveDprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveDprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveDprResponse.Merge(m, src)
}
func (m *MsgLeaveDprResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveDprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveDprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveDprResponse proto.InternalMessageInfo

type MsgDeactivateDpr struct {
	DprId    string `protobuf:"bytes,1,opt,name=dprId,proto3" json:"dprId,omitempty"`
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *MsgDeactivateDpr) Reset()         { *m = MsgDeactivateDpr{} }
func (m *MsgDeactivateDpr) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDpr) ProtoMessage()    {}
func (*MsgDeactivateDpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{10}
}
func (m *MsgDeactivateDpr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDpr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDpr.Merge(m, src)
}
func (m *MsgDeactivateDpr) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDpr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDpr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDpr proto.InternalMessageInfo

func (m *MsgDeactivateDpr) GetDprId() string {
	if m != nil {
		return m.DprId
	}
	return ""
}

func (m *MsgDeactivateDpr) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeactivateDpr) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type MsgDeactivateDprResponse struct {
}

func (m *MsgDeactivateDprResponse) Reset()         { *m = MsgDeactivateDprResponse{} }
func (m *MsgDeactivateDprResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDprResponse) ProtoMessage()    {}
func (*MsgDeactivateDprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dec6b5e510091bca, []int{11}
}
func (m *MsgDeactivateDprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDprResponse.Merge(m, src)
}
func (m *MsgDeactivateDprResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDprResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgGenDpr)(nil), "soarchain.dpr.MsgGenDpr")
	proto.RegisterType((*MsgGenDprResponse)(nil), "soarchain.dpr.MsgGenDprResponse")
	proto.RegisterType((*MsgUpdateDpr)(nil), "soarchain.dpr.MsgUpdateDpr")
	proto.RegisterType((*MsgUpdateDprResponse)(nil), "soarchain.dpr.MsgUpdateDprResponse")
	proto.RegisterType((*MsgEnterDpr)(nil), "soarchain.dpr.MsgEnterDpr")
	proto.RegisterType((*MsgEnterDprResponse)(nil), "soarchain.dpr.MsgEnterDprResponse")
	proto.RegisterType((*MsgActivateDpr)(nil), "soarchain.dpr.MsgActivateDpr")
	proto.RegisterType((*MsgActivateDprResponse)(nil), "soarchain.dpr.MsgActivateDprResponse")
	proto.RegisterType((*MsgLeaveDpr)(nil), "soarchain.dpr.MsgLeaveDpr")
	proto.RegisterType((*MsgLeaveDprResponse)(nil), "soarchain.dpr.MsgLeaveDprResponse")
	proto.RegisterType((*MsgDeactivateDpr)(nil), "soarchain.dpr.MsgDeactivateDpr")
	proto.RegisterType((*MsgDeactivateDprResponse)(nil), "soarchain.dpr.MsgDeactivateDprResponse")
}

func init() { proto.RegisterFile("dpr/tx.proto", fileDescriptor_dec6b5e510091bca) }

var fileDescriptor_dec6b5e510091bca = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x93, 0xd6, 0x24, 0xd3, 0x06, 0xc1, 0xb6, 0x0d, 0xd6, 0x42, 0x4d, 0x64, 0x84, 0xc8,
	0x29, 0x91, 0xe0, 0xc2, 0x09, 0x89, 0x2a, 0x80, 0xf8, 0xb1, 0x90, 0x92, 0x70, 0x00, 0x71, 0x71,
	0xb3, 0x2b, 0xd7, 0x97, 0xdd, 0xd5, 0xee, 0xa6, 0x8d, 0x1f, 0x80, 0x3b, 0x0f, 0xc0, 0x03, 0x71,
	0xec, 0x91, 0x23, 0x4a, 0x5e, 0x04, 0xc5, 0x89, 0xb7, 0xeb, 0xa4, 0x31, 0x12, 0xe2, 0xd4, 0xe3,
	0xf8, 0xfb, 0xe6, 0x9b, 0x99, 0xcf, 0xb3, 0xbb, 0xb0, 0x4f, 0x84, 0xec, 0xe9, 0x69, 0x57, 0x48,
	0xae, 0x39, 0x6a, 0x2a, 0x1e, 0xc9, 0xf1, 0x59, 0x94, 0xb0, 0x2e, 0x11, 0x12, 0x37, 0x17, 0x20,
	0x11, 0x72, 0x89, 0x06, 0xdf, 0xaa, 0xd0, 0x08, 0x55, 0xfc, 0x86, 0xb2, 0xbe, 0x90, 0xc8, 0x83,
	0x5b, 0x63, 0x49, 0x23, 0xcd, 0xa5, 0xe7, 0xb4, 0x9d, 0x4e, 0x63, 0x90, 0x87, 0xe8, 0x39, 0xdc,
	0x13, 0x09, 0x19, 0x4e, 0x84, 0xe0, 0x52, 0x53, 0xf2, 0x91, 0xd1, 0x11, 0x1f, 0x5d, 0x30, 0xaa,
	0x53, 0xaf, 0xda, 0x76, 0x3a, 0xf5, 0xc1, 0x36, 0x18, 0xf5, 0xe1, 0xd8, 0x86, 0x46, 0x17, 0x94,
	0xe9, 0x34, 0x23, 0xbc, 0xe6, 0x52, 0x9f, 0xa5, 0x5e, 0x2d, 0xcb, 0x2f, 0x27, 0xa1, 0x13, 0x78,
	0x60, 0x13, 0x96, 0x5f, 0x33, 0xc2, 0x30, 0x99, 0xea, 0xd4, 0xdb, 0xc9, 0x44, 0x4a, 0x39, 0x08,
	0x43, 0x9d, 0x4c, 0x64, 0xa4, 0x13, 0xce, 0xbc, 0xdd, 0xb6, 0xd3, 0xd9, 0x19, 0x98, 0x38, 0x38,
	0x80, 0xbb, 0xc6, 0x86, 0x01, 0x55, 0x82, 0x33, 0x45, 0x83, 0x1f, 0x55, 0xd8, 0x0f, 0x55, 0xfc,
	0x49, 0x90, 0x48, 0xd3, 0x85, 0x3f, 0x87, 0xb0, 0x4b, 0x84, 0x7c, 0x4b, 0x56, 0xee, 0x2c, 0x83,
	0x9b, 0xee, 0x0d, 0x6a, 0x81, 0xab, 0x28, 0x23, 0x54, 0x7a, 0x6e, 0x36, 0xf6, 0x2a, 0x0a, 0x5a,
	0x70, 0x68, 0xbb, 0x63, 0x6c, 0x1b, 0xc2, 0x5e, 0xa8, 0xe2, 0x57, 0x4c, 0x53, 0xb9, 0x30, 0xad,
	0x05, 0xae, 0x98, 0x9c, 0xbe, 0xa7, 0xe9, 0xca, 0xb5, 0x55, 0x64, 0xc9, 0x56, 0x6d, 0xd9, 0x2b,
	0x93, 0x6b, 0x96, 0xc9, 0xc1, 0x11, 0x1c, 0x58, 0xa2, 0xa6, 0xd6, 0x0b, 0xb8, 0x1d, 0xaa, 0xf8,
	0xe5, 0x58, 0x27, 0xe7, 0xa5, 0xff, 0x68, 0x4b, 0xb1, 0xc0, 0x83, 0x56, 0x31, 0x7f, 0x6d, 0x8a,
	0x0f, 0x34, 0x3a, 0xa7, 0xff, 0x7b, 0x8a, 0x5c, 0xd4, 0xd4, 0xfa, 0x0a, 0x77, 0x42, 0x15, 0xf7,
	0x69, 0xf4, 0xaf, 0x73, 0x14, 0xfe, 0x5f, 0x6d, 0x6d, 0xb7, 0x31, 0x78, 0xeb, 0xea, 0x79, 0xe5,
	0xa7, 0xb3, 0x1a, 0xd4, 0x42, 0x15, 0xa3, 0x3e, 0xb8, 0xf9, 0x1d, 0xd0, 0x2d, 0x5c, 0x18, 0x5d,
	0x73, 0x2c, 0x70, 0x7b, 0x1b, 0x92, 0xab, 0xa1, 0x10, 0x1a, 0x57, 0x87, 0xe5, 0xfe, 0x26, 0xdd,
	0x80, 0xf8, 0x51, 0x09, 0x68, 0xe4, 0xde, 0x41, 0xdd, 0x6c, 0x11, 0xde, 0x4c, 0xc8, 0x31, 0x1c,
	0x6c, 0xc7, 0x8c, 0xd6, 0x10, 0xf6, 0xec, 0x2d, 0x39, 0xde, 0x4c, 0xb1, 0x60, 0xfc, 0xb8, 0x14,
	0xb6, 0x1b, 0x34, 0x0b, 0x72, 0x4d, 0x83, 0x39, 0x76, 0x5d, 0x83, 0xeb, 0x3b, 0x80, 0x3e, 0x43,
	0xb3, 0xb8, 0x00, 0x0f, 0x37, 0x93, 0x0a, 0x04, 0xfc, 0xe4, 0x2f, 0x84, 0x5c, 0xfa, 0xa4, 0xf7,
	0x73, 0xe6, 0x3b, 0x97, 0x33, 0xdf, 0xf9, 0x3d, 0xf3, 0x9d, 0xef, 0x73, 0xbf, 0x72, 0x39, 0xf7,
	0x2b, 0xbf, 0xe6, 0x7e, 0xe5, 0xcb, 0x91, 0x51, 0xe8, 0x4d, 0x7b, 0xd9, 0xb3, 0x91, 0x0a, 0xaa,
	0x4e, 0xdd, 0xec, 0x71, 0x78, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xfc, 0x73, 0x14, 0x4a,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	GenDpr(ctx context.Context, in *MsgGenDpr, opts ...grpc.CallOption) (*MsgGenDprResponse, error)
	UpdateDpr(ctx context.Context, in *MsgUpdateDpr, opts ...grpc.CallOption) (*MsgUpdateDprResponse, error)
	EnterDpr(ctx context.Context, in *MsgEnterDpr, opts ...grpc.CallOption) (*MsgEnterDprResponse, error)
	ActivateDpr(ctx context.Context, in *MsgActivateDpr, opts ...grpc.CallOption) (*MsgActivateDprResponse, error)
	LeaveDpr(ctx context.Context, in *MsgLeaveDpr, opts ...grpc.CallOption) (*MsgLeaveDprResponse, error)
	DeactivateDpr(ctx context.Context, in *MsgDeactivateDpr, opts ...grpc.CallOption) (*MsgDeactivateDprResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GenDpr(ctx context.Context, in *MsgGenDpr, opts ...grpc.CallOption) (*MsgGenDprResponse, error) {
	out := new(MsgGenDprResponse)
	err := c.cc.Invoke(ctx, "/soarchain.dpr.Msg/GenDpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDpr(ctx context.Context, in *MsgUpdateDpr, opts ...grpc.CallOption) (*MsgUpdateDprResponse, error) {
	out := new(MsgUpdateDprResponse)
	err := c.cc.Invoke(ctx, "/soarchain.dpr.Msg/UpdateDpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnterDpr(ctx context.Context, in *MsgEnterDpr, opts ...grpc.CallOption) (*MsgEnterDprResponse, error) {
	out := new(MsgEnterDprResponse)
	err := c.cc.Invoke(ctx, "/soarchain.dpr.Msg/EnterDpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ActivateDpr(ctx context.Context, in *MsgActivateDpr, opts ...grpc.CallOption) (*MsgActivateDprResponse, error) {
	out := new(MsgActivateDprResponse)
	err := c.cc.Invoke(ctx, "/soarchain.dpr.Msg/ActivateDpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveDpr(ctx context.Context, in *MsgLeaveDpr, opts ...grpc.CallOption) (*MsgLeaveDprResponse, error) {
	out := new(MsgLeaveDprResponse)
	err := c.cc.Invoke(ctx, "/soarchain.dpr.Msg/LeaveDpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateDpr(ctx context.Context, in *MsgDeactivateDpr, opts ...grpc.CallOption) (*MsgDeactivateDprResponse, error) {
	out := new(MsgDeactivateDprResponse)
	err := c.cc.Invoke(ctx, "/soarchain.dpr.Msg/DeactivateDpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	GenDpr(context.Context, *MsgGenDpr) (*MsgGenDprResponse, error)
	UpdateDpr(context.Context, *MsgUpdateDpr) (*MsgUpdateDprResponse, error)
	EnterDpr(context.Context, *MsgEnterDpr) (*MsgEnterDprResponse, error)
	ActivateDpr(context.Context, *MsgActivateDpr) (*MsgActivateDprResponse, error)
	LeaveDpr(context.Context, *MsgLeaveDpr) (*MsgLeaveDprResponse, error)
	DeactivateDpr(context.Context, *MsgDeactivateDpr) (*MsgDeactivateDprResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) GenDpr(ctx context.Context, req *MsgGenDpr) (*MsgGenDprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenDpr not implemented")
}
func (*UnimplementedMsgServer) UpdateDpr(ctx context.Context, req *MsgUpdateDpr) (*MsgUpdateDprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDpr not implemented")
}
func (*UnimplementedMsgServer) EnterDpr(ctx context.Context, req *MsgEnterDpr) (*MsgEnterDprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterDpr not implemented")
}
func (*UnimplementedMsgServer) ActivateDpr(ctx context.Context, req *MsgActivateDpr) (*MsgActivateDprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateDpr not implemented")
}
func (*UnimplementedMsgServer) LeaveDpr(ctx context.Context, req *MsgLeaveDpr) (*MsgLeaveDprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveDpr not implemented")
}
func (*UnimplementedMsgServer) DeactivateDpr(ctx context.Context, req *MsgDeactivateDpr) (*MsgDeactivateDprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateDpr not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GenDpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGenDpr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GenDpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.dpr.Msg/GenDpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GenDpr(ctx, req.(*MsgGenDpr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDpr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.dpr.Msg/UpdateDpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDpr(ctx, req.(*MsgUpdateDpr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnterDpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnterDpr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnterDpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.dpr.Msg/EnterDpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnterDpr(ctx, req.(*MsgEnterDpr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ActivateDpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivateDpr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ActivateDpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.dpr.Msg/ActivateDpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ActivateDpr(ctx, req.(*MsgActivateDpr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveDpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveDpr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveDpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.dpr.Msg/LeaveDpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveDpr(ctx, req.(*MsgLeaveDpr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateDpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateDpr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateDpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.dpr.Msg/DeactivateDpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateDpr(ctx, req.(*MsgDeactivateDpr))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soarchain.dpr.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenDpr",
			Handler:    _Msg_GenDpr_Handler,
		},
		{
			MethodName: "UpdateDpr",
			Handler:    _Msg_UpdateDpr_Handler,
		},
		{
			MethodName: "EnterDpr",
			Handler:    _Msg_EnterDpr_Handler,
		},
		{
			MethodName: "ActivateDpr",
			Handler:    _Msg_ActivateDpr_Handler,
		},
		{
			MethodName: "LeaveDpr",
			Handler:    _Msg_LeaveDpr_Handler,
		},
		{
			MethodName: "DeactivateDpr",
			Handler:    _Msg_DeactivateDpr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dpr/tx.proto",
}

func (m *MsgGenDpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenDpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenDpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.PidSupportedForthyOneToSixty {
		i--
		if m.PidSupportedForthyOneToSixty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PidSupportedTwentyOneToForthy {
		i--
		if m.PidSupportedTwentyOneToForthy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PidSupportedOneToTwnety {
		i--
		if m.PidSupportedOneToTwnety {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGenDprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenDprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenDprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if m.PidSupportedForthyOneToSixty {
		i--
		if m.PidSupportedForthyOneToSixty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.PidSupportedTwentyOneToForthy {
		i--
		if m.PidSupportedTwentyOneToForthy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PidSupportedOneToTwnety {
		i--
		if m.PidSupportedOneToTwnety {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.DprId) > 0 {
		i -= len(m.DprId)
		copy(dAtA[i:], m.DprId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DprId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEnterDpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnterDpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnterDpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DprId) > 0 {
		i -= len(m.DprId)
		copy(dAtA[i:], m.DprId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DprId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnterDprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnterDprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnterDprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgActivateDpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateDpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateDpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DprId) > 0 {
		i -= len(m.DprId)
		copy(dAtA[i:], m.DprId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DprId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateDprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateDprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateDprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaveDpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveDpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveDpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DprId) > 0 {
		i -= len(m.DprId)
		copy(dAtA[i:], m.DprId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DprId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveDprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveDprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveDprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDpr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDpr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDpr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DprId) > 0 {
		i -= len(m.DprId)
		copy(dAtA[i:], m.DprId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DprId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGenDpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PidSupportedOneToTwnety {
		n += 2
	}
	if m.PidSupportedTwentyOneToForthy {
		n += 2
	}
	if m.PidSupportedForthyOneToSixty {
		n += 2
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	return n
}

func (m *MsgGenDprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DprId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PidSupportedOneToTwnety {
		n += 2
	}
	if m.PidSupportedTwentyOneToForthy {
		n += 2
	}
	if m.PidSupportedForthyOneToSixty {
		n += 2
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEnterDpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DprId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEnterDprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgActivateDpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DprId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateDprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaveDpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DprId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveDprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeactivateDpr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DprId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	return n
}

func (m *MsgDeactivateDprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGenDpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenDpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenDpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidSupportedOneToTwnety", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PidSupportedOneToTwnety = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidSupportedTwentyOneToForthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PidSupportedTwentyOneToForthy = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidSupportedForthyOneToSixty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PidSupportedForthyOneToSixty = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenDprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenDprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenDprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DprId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DprId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidSupportedOneToTwnety", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PidSupportedOneToTwnety = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidSupportedTwentyOneToForthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PidSupportedTwentyOneToForthy = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidSupportedForthyOneToSixty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PidSupportedForthyOneToSixty = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnterDpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnterDpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnterDpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DprId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DprId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnterDprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnterDprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnterDprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateDpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateDpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateDpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DprId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DprId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateDprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateDprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateDprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveDpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveDpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveDpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DprId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DprId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveDprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveDprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveDprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDpr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDpr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDpr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DprId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DprId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
