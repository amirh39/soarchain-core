// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poa/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetClientRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetClientRequest) Reset()         { *m = QueryGetClientRequest{} }
func (m *QueryGetClientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientRequest) ProtoMessage()    {}
func (*QueryGetClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{2}
}
func (m *QueryGetClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientRequest.Merge(m, src)
}
func (m *QueryGetClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientRequest proto.InternalMessageInfo

func (m *QueryGetClientRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetClientResponse struct {
	Client Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client"`
}

func (m *QueryGetClientResponse) Reset()         { *m = QueryGetClientResponse{} }
func (m *QueryGetClientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientResponse) ProtoMessage()    {}
func (*QueryGetClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{3}
}
func (m *QueryGetClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientResponse.Merge(m, src)
}
func (m *QueryGetClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientResponse proto.InternalMessageInfo

func (m *QueryGetClientResponse) GetClient() Client {
	if m != nil {
		return m.Client
	}
	return Client{}
}

type QueryAllClientRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientRequest) Reset()         { *m = QueryAllClientRequest{} }
func (m *QueryAllClientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientRequest) ProtoMessage()    {}
func (*QueryAllClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{4}
}
func (m *QueryAllClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientRequest.Merge(m, src)
}
func (m *QueryAllClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientRequest proto.InternalMessageInfo

func (m *QueryAllClientRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClientResponse struct {
	Client     []Client            `protobuf:"bytes,1,rep,name=client,proto3" json:"client"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientResponse) Reset()         { *m = QueryAllClientResponse{} }
func (m *QueryAllClientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientResponse) ProtoMessage()    {}
func (*QueryAllClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{5}
}
func (m *QueryAllClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientResponse.Merge(m, src)
}
func (m *QueryAllClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientResponse proto.InternalMessageInfo

func (m *QueryAllClientResponse) GetClient() []Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *QueryAllClientResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChallengerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetChallengerRequest) Reset()         { *m = QueryGetChallengerRequest{} }
func (m *QueryGetChallengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerRequest) ProtoMessage()    {}
func (*QueryGetChallengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{6}
}
func (m *QueryGetChallengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerRequest.Merge(m, src)
}
func (m *QueryGetChallengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerRequest proto.InternalMessageInfo

func (m *QueryGetChallengerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetChallengerResponse struct {
	Challenger Challenger `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger"`
}

func (m *QueryGetChallengerResponse) Reset()         { *m = QueryGetChallengerResponse{} }
func (m *QueryGetChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerResponse) ProtoMessage()    {}
func (*QueryGetChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{7}
}
func (m *QueryGetChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerResponse.Merge(m, src)
}
func (m *QueryGetChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerResponse proto.InternalMessageInfo

func (m *QueryGetChallengerResponse) GetChallenger() Challenger {
	if m != nil {
		return m.Challenger
	}
	return Challenger{}
}

type QueryAllChallengerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChallengerRequest) Reset()         { *m = QueryAllChallengerRequest{} }
func (m *QueryAllChallengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChallengerRequest) ProtoMessage()    {}
func (*QueryAllChallengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{8}
}
func (m *QueryAllChallengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChallengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChallengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChallengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChallengerRequest.Merge(m, src)
}
func (m *QueryAllChallengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChallengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChallengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChallengerRequest proto.InternalMessageInfo

func (m *QueryAllChallengerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChallengerResponse struct {
	Challenger []Challenger        `protobuf:"bytes,1,rep,name=challenger,proto3" json:"challenger"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChallengerResponse) Reset()         { *m = QueryAllChallengerResponse{} }
func (m *QueryAllChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChallengerResponse) ProtoMessage()    {}
func (*QueryAllChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{9}
}
func (m *QueryAllChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChallengerResponse.Merge(m, src)
}
func (m *QueryAllChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChallengerResponse proto.InternalMessageInfo

func (m *QueryAllChallengerResponse) GetChallenger() []Challenger {
	if m != nil {
		return m.Challenger
	}
	return nil
}

func (m *QueryAllChallengerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRunnerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRunnerRequest) Reset()         { *m = QueryGetRunnerRequest{} }
func (m *QueryGetRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerRequest) ProtoMessage()    {}
func (*QueryGetRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{10}
}
func (m *QueryGetRunnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerRequest.Merge(m, src)
}
func (m *QueryGetRunnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerRequest proto.InternalMessageInfo

func (m *QueryGetRunnerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetRunnerResponse struct {
	Runner Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner"`
}

func (m *QueryGetRunnerResponse) Reset()         { *m = QueryGetRunnerResponse{} }
func (m *QueryGetRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerResponse) ProtoMessage()    {}
func (*QueryGetRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{11}
}
func (m *QueryGetRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerResponse.Merge(m, src)
}
func (m *QueryGetRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerResponse proto.InternalMessageInfo

func (m *QueryGetRunnerResponse) GetRunner() Runner {
	if m != nil {
		return m.Runner
	}
	return Runner{}
}

type QueryAllRunnerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRunnerRequest) Reset()         { *m = QueryAllRunnerRequest{} }
func (m *QueryAllRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRunnerRequest) ProtoMessage()    {}
func (*QueryAllRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{12}
}
func (m *QueryAllRunnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRunnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRunnerRequest.Merge(m, src)
}
func (m *QueryAllRunnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRunnerRequest proto.InternalMessageInfo

func (m *QueryAllRunnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRunnerResponse struct {
	Runner     []Runner            `protobuf:"bytes,1,rep,name=runner,proto3" json:"runner"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRunnerResponse) Reset()         { *m = QueryAllRunnerResponse{} }
func (m *QueryAllRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRunnerResponse) ProtoMessage()    {}
func (*QueryAllRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{13}
}
func (m *QueryAllRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRunnerResponse.Merge(m, src)
}
func (m *QueryAllRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRunnerResponse proto.InternalMessageInfo

func (m *QueryAllRunnerResponse) GetRunner() []Runner {
	if m != nil {
		return m.Runner
	}
	return nil
}

func (m *QueryAllRunnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGuardRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGuardRequest) Reset()         { *m = QueryGetGuardRequest{} }
func (m *QueryGetGuardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardRequest) ProtoMessage()    {}
func (*QueryGetGuardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{14}
}
func (m *QueryGetGuardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardRequest.Merge(m, src)
}
func (m *QueryGetGuardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardRequest proto.InternalMessageInfo

func (m *QueryGetGuardRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetGuardResponse struct {
	Guard Guard `protobuf:"bytes,1,opt,name=guard,proto3" json:"guard"`
}

func (m *QueryGetGuardResponse) Reset()         { *m = QueryGetGuardResponse{} }
func (m *QueryGetGuardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardResponse) ProtoMessage()    {}
func (*QueryGetGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{15}
}
func (m *QueryGetGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardResponse.Merge(m, src)
}
func (m *QueryGetGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardResponse proto.InternalMessageInfo

func (m *QueryGetGuardResponse) GetGuard() Guard {
	if m != nil {
		return m.Guard
	}
	return Guard{}
}

type QueryAllGuardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardRequest) Reset()         { *m = QueryAllGuardRequest{} }
func (m *QueryAllGuardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardRequest) ProtoMessage()    {}
func (*QueryAllGuardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{16}
}
func (m *QueryAllGuardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardRequest.Merge(m, src)
}
func (m *QueryAllGuardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardRequest proto.InternalMessageInfo

func (m *QueryAllGuardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGuardResponse struct {
	Guard      []Guard             `protobuf:"bytes,1,rep,name=guard,proto3" json:"guard"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardResponse) Reset()         { *m = QueryAllGuardResponse{} }
func (m *QueryAllGuardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardResponse) ProtoMessage()    {}
func (*QueryAllGuardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{17}
}
func (m *QueryAllGuardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardResponse.Merge(m, src)
}
func (m *QueryAllGuardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardResponse proto.InternalMessageInfo

func (m *QueryAllGuardResponse) GetGuard() []Guard {
	if m != nil {
		return m.Guard
	}
	return nil
}

func (m *QueryAllGuardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetClientByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetClientByAddressRequest) Reset()         { *m = QueryGetClientByAddressRequest{} }
func (m *QueryGetClientByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientByAddressRequest) ProtoMessage()    {}
func (*QueryGetClientByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{18}
}
func (m *QueryGetClientByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientByAddressRequest.Merge(m, src)
}
func (m *QueryGetClientByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientByAddressRequest proto.InternalMessageInfo

func (m *QueryGetClientByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetClientByAddressResponse struct {
	Client *Client `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *QueryGetClientByAddressResponse) Reset()         { *m = QueryGetClientByAddressResponse{} }
func (m *QueryGetClientByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientByAddressResponse) ProtoMessage()    {}
func (*QueryGetClientByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{19}
}
func (m *QueryGetClientByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientByAddressResponse.Merge(m, src)
}
func (m *QueryGetClientByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientByAddressResponse proto.InternalMessageInfo

func (m *QueryGetClientByAddressResponse) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

type QueryGetChallengerByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetChallengerByAddressRequest) Reset()         { *m = QueryGetChallengerByAddressRequest{} }
func (m *QueryGetChallengerByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerByAddressRequest) ProtoMessage()    {}
func (*QueryGetChallengerByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{20}
}
func (m *QueryGetChallengerByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerByAddressRequest.Merge(m, src)
}
func (m *QueryGetChallengerByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerByAddressRequest proto.InternalMessageInfo

func (m *QueryGetChallengerByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetChallengerByAddressResponse struct {
	Challenger *Challenger `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty"`
}

func (m *QueryGetChallengerByAddressResponse) Reset()         { *m = QueryGetChallengerByAddressResponse{} }
func (m *QueryGetChallengerByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerByAddressResponse) ProtoMessage()    {}
func (*QueryGetChallengerByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{21}
}
func (m *QueryGetChallengerByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerByAddressResponse.Merge(m, src)
}
func (m *QueryGetChallengerByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerByAddressResponse proto.InternalMessageInfo

func (m *QueryGetChallengerByAddressResponse) GetChallenger() *Challenger {
	if m != nil {
		return m.Challenger
	}
	return nil
}

type QueryGetTotalClientsRequest struct {
}

func (m *QueryGetTotalClientsRequest) Reset()         { *m = QueryGetTotalClientsRequest{} }
func (m *QueryGetTotalClientsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalClientsRequest) ProtoMessage()    {}
func (*QueryGetTotalClientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{22}
}
func (m *QueryGetTotalClientsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalClientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalClientsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalClientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalClientsRequest.Merge(m, src)
}
func (m *QueryGetTotalClientsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalClientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalClientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalClientsRequest proto.InternalMessageInfo

type QueryGetTotalClientsResponse struct {
	TotalClients TotalClients `protobuf:"bytes,1,opt,name=TotalClients,proto3" json:"TotalClients"`
}

func (m *QueryGetTotalClientsResponse) Reset()         { *m = QueryGetTotalClientsResponse{} }
func (m *QueryGetTotalClientsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalClientsResponse) ProtoMessage()    {}
func (*QueryGetTotalClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{23}
}
func (m *QueryGetTotalClientsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalClientsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalClientsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalClientsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalClientsResponse.Merge(m, src)
}
func (m *QueryGetTotalClientsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalClientsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalClientsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalClientsResponse proto.InternalMessageInfo

func (m *QueryGetTotalClientsResponse) GetTotalClients() TotalClients {
	if m != nil {
		return m.TotalClients
	}
	return TotalClients{}
}

type QueryGetTotalChallengersRequest struct {
}

func (m *QueryGetTotalChallengersRequest) Reset()         { *m = QueryGetTotalChallengersRequest{} }
func (m *QueryGetTotalChallengersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalChallengersRequest) ProtoMessage()    {}
func (*QueryGetTotalChallengersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{24}
}
func (m *QueryGetTotalChallengersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalChallengersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalChallengersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalChallengersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalChallengersRequest.Merge(m, src)
}
func (m *QueryGetTotalChallengersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalChallengersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalChallengersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalChallengersRequest proto.InternalMessageInfo

type QueryGetTotalChallengersResponse struct {
	TotalChallengers TotalChallengers `protobuf:"bytes,1,opt,name=TotalChallengers,proto3" json:"TotalChallengers"`
}

func (m *QueryGetTotalChallengersResponse) Reset()         { *m = QueryGetTotalChallengersResponse{} }
func (m *QueryGetTotalChallengersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalChallengersResponse) ProtoMessage()    {}
func (*QueryGetTotalChallengersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{25}
}
func (m *QueryGetTotalChallengersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalChallengersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalChallengersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalChallengersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalChallengersResponse.Merge(m, src)
}
func (m *QueryGetTotalChallengersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalChallengersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalChallengersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalChallengersResponse proto.InternalMessageInfo

func (m *QueryGetTotalChallengersResponse) GetTotalChallengers() TotalChallengers {
	if m != nil {
		return m.TotalChallengers
	}
	return TotalChallengers{}
}

type QueryGetTotalRunnersRequest struct {
}

func (m *QueryGetTotalRunnersRequest) Reset()         { *m = QueryGetTotalRunnersRequest{} }
func (m *QueryGetTotalRunnersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalRunnersRequest) ProtoMessage()    {}
func (*QueryGetTotalRunnersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{26}
}
func (m *QueryGetTotalRunnersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalRunnersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalRunnersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalRunnersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalRunnersRequest.Merge(m, src)
}
func (m *QueryGetTotalRunnersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalRunnersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalRunnersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalRunnersRequest proto.InternalMessageInfo

type QueryGetTotalRunnersResponse struct {
	TotalRunners TotalRunners `protobuf:"bytes,1,opt,name=TotalRunners,proto3" json:"TotalRunners"`
}

func (m *QueryGetTotalRunnersResponse) Reset()         { *m = QueryGetTotalRunnersResponse{} }
func (m *QueryGetTotalRunnersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTotalRunnersResponse) ProtoMessage()    {}
func (*QueryGetTotalRunnersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{27}
}
func (m *QueryGetTotalRunnersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTotalRunnersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTotalRunnersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTotalRunnersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTotalRunnersResponse.Merge(m, src)
}
func (m *QueryGetTotalRunnersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTotalRunnersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTotalRunnersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTotalRunnersResponse proto.InternalMessageInfo

func (m *QueryGetTotalRunnersResponse) GetTotalRunners() TotalRunners {
	if m != nil {
		return m.TotalRunners
	}
	return TotalRunners{}
}

type QueryGetChallengerByIndexRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetChallengerByIndexRequest) Reset()         { *m = QueryGetChallengerByIndexRequest{} }
func (m *QueryGetChallengerByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerByIndexRequest) ProtoMessage()    {}
func (*QueryGetChallengerByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{28}
}
func (m *QueryGetChallengerByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerByIndexRequest.Merge(m, src)
}
func (m *QueryGetChallengerByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerByIndexRequest proto.InternalMessageInfo

func (m *QueryGetChallengerByIndexRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetChallengerByIndexResponse struct {
	ChallengerByIndex ChallengerByIndex `protobuf:"bytes,1,opt,name=challengerByIndex,proto3" json:"challengerByIndex"`
}

func (m *QueryGetChallengerByIndexResponse) Reset()         { *m = QueryGetChallengerByIndexResponse{} }
func (m *QueryGetChallengerByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChallengerByIndexResponse) ProtoMessage()    {}
func (*QueryGetChallengerByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{29}
}
func (m *QueryGetChallengerByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChallengerByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChallengerByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChallengerByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChallengerByIndexResponse.Merge(m, src)
}
func (m *QueryGetChallengerByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChallengerByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChallengerByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChallengerByIndexResponse proto.InternalMessageInfo

func (m *QueryGetChallengerByIndexResponse) GetChallengerByIndex() ChallengerByIndex {
	if m != nil {
		return m.ChallengerByIndex
	}
	return ChallengerByIndex{}
}

type QueryAllChallengerByIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChallengerByIndexRequest) Reset()         { *m = QueryAllChallengerByIndexRequest{} }
func (m *QueryAllChallengerByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChallengerByIndexRequest) ProtoMessage()    {}
func (*QueryAllChallengerByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{30}
}
func (m *QueryAllChallengerByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChallengerByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChallengerByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChallengerByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChallengerByIndexRequest.Merge(m, src)
}
func (m *QueryAllChallengerByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChallengerByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChallengerByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChallengerByIndexRequest proto.InternalMessageInfo

func (m *QueryAllChallengerByIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChallengerByIndexResponse struct {
	ChallengerByIndex []ChallengerByIndex `protobuf:"bytes,1,rep,name=challengerByIndex,proto3" json:"challengerByIndex"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChallengerByIndexResponse) Reset()         { *m = QueryAllChallengerByIndexResponse{} }
func (m *QueryAllChallengerByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChallengerByIndexResponse) ProtoMessage()    {}
func (*QueryAllChallengerByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{31}
}
func (m *QueryAllChallengerByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChallengerByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChallengerByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChallengerByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChallengerByIndexResponse.Merge(m, src)
}
func (m *QueryAllChallengerByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChallengerByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChallengerByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChallengerByIndexResponse proto.InternalMessageInfo

func (m *QueryAllChallengerByIndexResponse) GetChallengerByIndex() []ChallengerByIndex {
	if m != nil {
		return m.ChallengerByIndex
	}
	return nil
}

func (m *QueryAllChallengerByIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRandomChallengerRequest struct {
}

func (m *QueryGetRandomChallengerRequest) Reset()         { *m = QueryGetRandomChallengerRequest{} }
func (m *QueryGetRandomChallengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomChallengerRequest) ProtoMessage()    {}
func (*QueryGetRandomChallengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{32}
}
func (m *QueryGetRandomChallengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomChallengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomChallengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomChallengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomChallengerRequest.Merge(m, src)
}
func (m *QueryGetRandomChallengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomChallengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomChallengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomChallengerRequest proto.InternalMessageInfo

type QueryGetRandomChallengerResponse struct {
	Challenger *Challenger `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty"`
}

func (m *QueryGetRandomChallengerResponse) Reset()         { *m = QueryGetRandomChallengerResponse{} }
func (m *QueryGetRandomChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomChallengerResponse) ProtoMessage()    {}
func (*QueryGetRandomChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{33}
}
func (m *QueryGetRandomChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomChallengerResponse.Merge(m, src)
}
func (m *QueryGetRandomChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomChallengerResponse proto.InternalMessageInfo

func (m *QueryGetRandomChallengerResponse) GetChallenger() *Challenger {
	if m != nil {
		return m.Challenger
	}
	return nil
}

type QueryGetRunnerByIndexRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRunnerByIndexRequest) Reset()         { *m = QueryGetRunnerByIndexRequest{} }
func (m *QueryGetRunnerByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerByIndexRequest) ProtoMessage()    {}
func (*QueryGetRunnerByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{34}
}
func (m *QueryGetRunnerByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerByIndexRequest.Merge(m, src)
}
func (m *QueryGetRunnerByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerByIndexRequest proto.InternalMessageInfo

func (m *QueryGetRunnerByIndexRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetRunnerByIndexResponse struct {
	RunnerByIndex RunnerByIndex `protobuf:"bytes,1,opt,name=runnerByIndex,proto3" json:"runnerByIndex"`
}

func (m *QueryGetRunnerByIndexResponse) Reset()         { *m = QueryGetRunnerByIndexResponse{} }
func (m *QueryGetRunnerByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRunnerByIndexResponse) ProtoMessage()    {}
func (*QueryGetRunnerByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{35}
}
func (m *QueryGetRunnerByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRunnerByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRunnerByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRunnerByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRunnerByIndexResponse.Merge(m, src)
}
func (m *QueryGetRunnerByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRunnerByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRunnerByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRunnerByIndexResponse proto.InternalMessageInfo

func (m *QueryGetRunnerByIndexResponse) GetRunnerByIndex() RunnerByIndex {
	if m != nil {
		return m.RunnerByIndex
	}
	return RunnerByIndex{}
}

type QueryAllRunnerByIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRunnerByIndexRequest) Reset()         { *m = QueryAllRunnerByIndexRequest{} }
func (m *QueryAllRunnerByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRunnerByIndexRequest) ProtoMessage()    {}
func (*QueryAllRunnerByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{36}
}
func (m *QueryAllRunnerByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRunnerByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRunnerByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRunnerByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRunnerByIndexRequest.Merge(m, src)
}
func (m *QueryAllRunnerByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRunnerByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRunnerByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRunnerByIndexRequest proto.InternalMessageInfo

func (m *QueryAllRunnerByIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRunnerByIndexResponse struct {
	RunnerByIndex []RunnerByIndex     `protobuf:"bytes,1,rep,name=runnerByIndex,proto3" json:"runnerByIndex"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRunnerByIndexResponse) Reset()         { *m = QueryAllRunnerByIndexResponse{} }
func (m *QueryAllRunnerByIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRunnerByIndexResponse) ProtoMessage()    {}
func (*QueryAllRunnerByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{37}
}
func (m *QueryAllRunnerByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRunnerByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRunnerByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRunnerByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRunnerByIndexResponse.Merge(m, src)
}
func (m *QueryAllRunnerByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRunnerByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRunnerByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRunnerByIndexResponse proto.InternalMessageInfo

func (m *QueryAllRunnerByIndexResponse) GetRunnerByIndex() []RunnerByIndex {
	if m != nil {
		return m.RunnerByIndex
	}
	return nil
}

func (m *QueryAllRunnerByIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRandomRunnerRequest struct {
}

func (m *QueryGetRandomRunnerRequest) Reset()         { *m = QueryGetRandomRunnerRequest{} }
func (m *QueryGetRandomRunnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomRunnerRequest) ProtoMessage()    {}
func (*QueryGetRandomRunnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{38}
}
func (m *QueryGetRandomRunnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomRunnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomRunnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomRunnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomRunnerRequest.Merge(m, src)
}
func (m *QueryGetRandomRunnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomRunnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomRunnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomRunnerRequest proto.InternalMessageInfo

type QueryGetRandomRunnerResponse struct {
	Runner *Runner `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner,omitempty"`
}

func (m *QueryGetRandomRunnerResponse) Reset()         { *m = QueryGetRandomRunnerResponse{} }
func (m *QueryGetRandomRunnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRandomRunnerResponse) ProtoMessage()    {}
func (*QueryGetRandomRunnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9dd27e9dc4e2f4, []int{39}
}
func (m *QueryGetRandomRunnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRandomRunnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRandomRunnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRandomRunnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRandomRunnerResponse.Merge(m, src)
}
func (m *QueryGetRandomRunnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRandomRunnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRandomRunnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRandomRunnerResponse proto.InternalMessageInfo

func (m *QueryGetRandomRunnerResponse) GetRunner() *Runner {
	if m != nil {
		return m.Runner
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "soarchain.poa.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "soarchain.poa.QueryParamsResponse")
	proto.RegisterType((*QueryGetClientRequest)(nil), "soarchain.poa.QueryGetClientRequest")
	proto.RegisterType((*QueryGetClientResponse)(nil), "soarchain.poa.QueryGetClientResponse")
	proto.RegisterType((*QueryAllClientRequest)(nil), "soarchain.poa.QueryAllClientRequest")
	proto.RegisterType((*QueryAllClientResponse)(nil), "soarchain.poa.QueryAllClientResponse")
	proto.RegisterType((*QueryGetChallengerRequest)(nil), "soarchain.poa.QueryGetChallengerRequest")
	proto.RegisterType((*QueryGetChallengerResponse)(nil), "soarchain.poa.QueryGetChallengerResponse")
	proto.RegisterType((*QueryAllChallengerRequest)(nil), "soarchain.poa.QueryAllChallengerRequest")
	proto.RegisterType((*QueryAllChallengerResponse)(nil), "soarchain.poa.QueryAllChallengerResponse")
	proto.RegisterType((*QueryGetRunnerRequest)(nil), "soarchain.poa.QueryGetRunnerRequest")
	proto.RegisterType((*QueryGetRunnerResponse)(nil), "soarchain.poa.QueryGetRunnerResponse")
	proto.RegisterType((*QueryAllRunnerRequest)(nil), "soarchain.poa.QueryAllRunnerRequest")
	proto.RegisterType((*QueryAllRunnerResponse)(nil), "soarchain.poa.QueryAllRunnerResponse")
	proto.RegisterType((*QueryGetGuardRequest)(nil), "soarchain.poa.QueryGetGuardRequest")
	proto.RegisterType((*QueryGetGuardResponse)(nil), "soarchain.poa.QueryGetGuardResponse")
	proto.RegisterType((*QueryAllGuardRequest)(nil), "soarchain.poa.QueryAllGuardRequest")
	proto.RegisterType((*QueryAllGuardResponse)(nil), "soarchain.poa.QueryAllGuardResponse")
	proto.RegisterType((*QueryGetClientByAddressRequest)(nil), "soarchain.poa.QueryGetClientByAddressRequest")
	proto.RegisterType((*QueryGetClientByAddressResponse)(nil), "soarchain.poa.QueryGetClientByAddressResponse")
	proto.RegisterType((*QueryGetChallengerByAddressRequest)(nil), "soarchain.poa.QueryGetChallengerByAddressRequest")
	proto.RegisterType((*QueryGetChallengerByAddressResponse)(nil), "soarchain.poa.QueryGetChallengerByAddressResponse")
	proto.RegisterType((*QueryGetTotalClientsRequest)(nil), "soarchain.poa.QueryGetTotalClientsRequest")
	proto.RegisterType((*QueryGetTotalClientsResponse)(nil), "soarchain.poa.QueryGetTotalClientsResponse")
	proto.RegisterType((*QueryGetTotalChallengersRequest)(nil), "soarchain.poa.QueryGetTotalChallengersRequest")
	proto.RegisterType((*QueryGetTotalChallengersResponse)(nil), "soarchain.poa.QueryGetTotalChallengersResponse")
	proto.RegisterType((*QueryGetTotalRunnersRequest)(nil), "soarchain.poa.QueryGetTotalRunnersRequest")
	proto.RegisterType((*QueryGetTotalRunnersResponse)(nil), "soarchain.poa.QueryGetTotalRunnersResponse")
	proto.RegisterType((*QueryGetChallengerByIndexRequest)(nil), "soarchain.poa.QueryGetChallengerByIndexRequest")
	proto.RegisterType((*QueryGetChallengerByIndexResponse)(nil), "soarchain.poa.QueryGetChallengerByIndexResponse")
	proto.RegisterType((*QueryAllChallengerByIndexRequest)(nil), "soarchain.poa.QueryAllChallengerByIndexRequest")
	proto.RegisterType((*QueryAllChallengerByIndexResponse)(nil), "soarchain.poa.QueryAllChallengerByIndexResponse")
	proto.RegisterType((*QueryGetRandomChallengerRequest)(nil), "soarchain.poa.QueryGetRandomChallengerRequest")
	proto.RegisterType((*QueryGetRandomChallengerResponse)(nil), "soarchain.poa.QueryGetRandomChallengerResponse")
	proto.RegisterType((*QueryGetRunnerByIndexRequest)(nil), "soarchain.poa.QueryGetRunnerByIndexRequest")
	proto.RegisterType((*QueryGetRunnerByIndexResponse)(nil), "soarchain.poa.QueryGetRunnerByIndexResponse")
	proto.RegisterType((*QueryAllRunnerByIndexRequest)(nil), "soarchain.poa.QueryAllRunnerByIndexRequest")
	proto.RegisterType((*QueryAllRunnerByIndexResponse)(nil), "soarchain.poa.QueryAllRunnerByIndexResponse")
	proto.RegisterType((*QueryGetRandomRunnerRequest)(nil), "soarchain.poa.QueryGetRandomRunnerRequest")
	proto.RegisterType((*QueryGetRandomRunnerResponse)(nil), "soarchain.poa.QueryGetRandomRunnerResponse")
}

func init() { proto.RegisterFile("poa/query.proto", fileDescriptor_9a9dd27e9dc4e2f4) }

var fileDescriptor_9a9dd27e9dc4e2f4 = []byte{
	// 1442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xbd, 0x6f, 0x1c, 0x45,
	0x14, 0xf7, 0xe4, 0xb0, 0x21, 0x0f, 0xac, 0x38, 0x93, 0xb3, 0x13, 0xaf, 0xed, 0xb3, 0x3d, 0x76,
	0x8c, 0xe3, 0x38, 0xbb, 0xb6, 0x13, 0x21, 0x48, 0x01, 0x72, 0x10, 0x98, 0x20, 0x45, 0x72, 0x4e,
	0xa9, 0x90, 0xc2, 0xb1, 0xb6, 0x97, 0xcb, 0xa1, 0xf5, 0xee, 0xe5, 0xf6, 0x0c, 0x3e, 0x85, 0x34,
	0x34, 0x34, 0x20, 0x21, 0xbe, 0x0a, 0x24, 0x3a, 0xa0, 0x80, 0x8e, 0x96, 0x8e, 0x2a, 0x65, 0x24,
	0x1a, 0x2a, 0x04, 0x36, 0x7f, 0x08, 0xda, 0x99, 0xb7, 0x1f, 0x33, 0xbb, 0xb3, 0xb7, 0x26, 0x97,
	0xce, 0x37, 0xf3, 0x7b, 0xf3, 0x7e, 0xef, 0xcd, 0x9b, 0xf7, 0xb1, 0x86, 0x33, 0x6d, 0xdf, 0xb6,
	0xee, 0x1f, 0x38, 0x9d, 0x9e, 0xd9, 0xee, 0xf8, 0x5d, 0x9f, 0x8e, 0x06, 0xbe, 0xdd, 0xd9, 0xbd,
	0x67, 0xb7, 0x3c, 0xb3, 0xed, 0xdb, 0x46, 0xb5, 0xe9, 0x37, 0x7d, 0xbe, 0x63, 0x85, 0x7f, 0x09,
	0x90, 0x31, 0xdd, 0xf4, 0xfd, 0xa6, 0xeb, 0x58, 0x76, 0xbb, 0x65, 0xd9, 0x9e, 0xe7, 0x77, 0xed,
	0x6e, 0xcb, 0xf7, 0x02, 0xdc, 0x5d, 0xd9, 0xf5, 0x83, 0x7d, 0x3f, 0xb0, 0x76, 0xec, 0xc0, 0x11,
	0x67, 0x5b, 0x1f, 0xae, 0xef, 0x38, 0x5d, 0x7b, 0xdd, 0x6a, 0xdb, 0xcd, 0x96, 0xc7, 0xc1, 0x88,
	0x1d, 0x0b, 0xf5, 0xb7, 0xed, 0x8e, 0xbd, 0x1f, 0x49, 0x73, 0x46, 0xcd, 0x03, 0xbb, 0xb3, 0x87,
	0x0b, 0xe7, 0xc3, 0x85, 0xae, 0xdf, 0xb5, 0xdd, 0xc6, 0xae, 0xdb, 0x72, 0xbc, 0x6e, 0x84, 0x9c,
	0x4a, 0x6d, 0xdc, 0xb3, 0x5d, 0xd7, 0xf1, 0x9a, 0x4e, 0x27, 0xc8, 0x4a, 0x75, 0x0e, 0x3c, 0x2f,
	0xd9, 0x98, 0x09, 0x37, 0x12, 0x7c, 0x63, 0xa7, 0xd7, 0x68, 0x79, 0x7b, 0xce, 0x21, 0x6e, 0x4f,
	0x86, 0xdb, 0x42, 0x42, 0xdd, 0x1a, 0x4b, 0xb6, 0x70, 0xa5, 0x2a, 0x9f, 0x95, 0xc6, 0x09, 0xaa,
	0x62, 0x85, 0x55, 0x81, 0xde, 0x0e, 0xfd, 0xb0, 0xcd, 0x0d, 0xad, 0x3b, 0xf7, 0x0f, 0x9c, 0xa0,
	0xcb, 0xde, 0x86, 0x73, 0xd2, 0x6a, 0xd0, 0xf6, 0xbd, 0xc0, 0xa1, 0x57, 0x61, 0x44, 0x38, 0xe4,
	0x02, 0x99, 0x23, 0xcb, 0xcf, 0x6f, 0x8c, 0x9b, 0xd2, 0x95, 0x98, 0x02, 0x7e, 0xe3, 0x99, 0x47,
	0x7f, 0xcd, 0x0e, 0xd5, 0x11, 0xca, 0xae, 0xc0, 0x38, 0x3f, 0x6b, 0xcb, 0xe9, 0xbe, 0xce, 0x35,
	0xa3, 0x12, 0x5a, 0x85, 0x61, 0x6e, 0x03, 0x3f, 0xec, 0x74, 0x5d, 0xfc, 0x60, 0xb7, 0x60, 0x42,
	0x85, 0x27, 0xda, 0x05, 0x75, 0x8d, 0x76, 0x01, 0x8f, 0xb4, 0x0b, 0x28, 0x6b, 0xa0, 0xf6, 0x4d,
	0xd7, 0x95, 0xb5, 0xbf, 0x09, 0x90, 0x5c, 0x39, 0x9e, 0xb8, 0x64, 0x8a, 0xf8, 0x30, 0xc3, 0xf8,
	0x30, 0x45, 0xec, 0x61, 0x7c, 0x98, 0xdb, 0x76, 0xd3, 0x41, 0xd9, 0x7a, 0x4a, 0x92, 0x7d, 0x4b,
	0x90, 0x70, 0x4a, 0x43, 0x0e, 0xe1, 0x4a, 0x49, 0xc2, 0x74, 0x4b, 0xe2, 0x75, 0x8a, 0xf3, 0x7a,
	0xb1, 0x2f, 0x2f, 0xa1, 0x51, 0x22, 0xb6, 0x0e, 0x93, 0xb1, 0x23, 0xe3, 0x38, 0x28, 0xf6, 0xfd,
	0x5d, 0x30, 0xf2, 0x44, 0xd0, 0x9c, 0xd7, 0x00, 0x92, 0x80, 0x42, 0x8f, 0x4d, 0xaa, 0x26, 0xc5,
	0x00, 0x34, 0x2b, 0x25, 0xc2, 0x76, 0x91, 0x51, 0xe8, 0xa9, 0x0c, 0xa3, 0x41, 0xdd, 0xc7, 0x4f,
	0x04, 0x8d, 0x50, 0xb4, 0x68, 0x8c, 0xa8, 0x9c, 0xd0, 0x88, 0xc1, 0xdd, 0x4f, 0xea, 0x5d, 0xd4,
	0xf9, 0xcb, 0x2d, 0xfd, 0x2e, 0x22, 0x78, 0x12, 0x66, 0xe2, 0xe9, 0x6b, 0xde, 0x85, 0x80, 0x47,
	0x61, 0x26, 0xa0, 0xe9, 0x77, 0x21, 0x6b, 0x7f, 0x1a, 0xef, 0xa2, 0x80, 0x70, 0xa5, 0x24, 0xe1,
	0xc1, 0xf9, 0x7d, 0x15, 0xaa, 0x91, 0x23, 0xb7, 0xc2, 0x5c, 0x5e, 0xec, 0xf6, 0x9b, 0xc9, 0x2d,
	0x21, 0x1a, 0x8d, 0x58, 0x83, 0x61, 0x5e, 0x0a, 0xd0, 0x45, 0x55, 0xc5, 0x06, 0x0e, 0x46, 0x13,
	0x04, 0x90, 0xbd, 0x8b, 0x8a, 0x37, 0x5d, 0x57, 0x52, 0x3c, 0x28, 0x8f, 0x7f, 0x49, 0x92, 0x3b,
	0xd5, 0x72, 0xad, 0x94, 0xe2, 0x3a, 0x38, 0x6f, 0x5f, 0x87, 0x9a, 0x9c, 0xce, 0x6f, 0xf4, 0x36,
	0xf7, 0xf6, 0x3a, 0x4e, 0x10, 0xd5, 0x1a, 0x7a, 0x01, 0x9e, 0xb5, 0xc5, 0x0a, 0x7a, 0x3e, 0xfa,
	0xc9, 0xb6, 0x61, 0x56, 0x2b, 0x8b, 0x96, 0x5d, 0x29, 0x55, 0x13, 0xe2, 0x6a, 0xf0, 0x2a, 0xb0,
	0x6c, 0x82, 0x3b, 0x01, 0xa3, 0xf7, 0x60, 0xa1, 0x50, 0x1e, 0x59, 0xbd, 0x72, 0xa2, 0x4c, 0x29,
	0xe5, 0xc8, 0x19, 0x98, 0x8a, 0x34, 0xdc, 0x09, 0x5b, 0x04, 0x61, 0x40, 0x5c, 0x98, 0x1d, 0x98,
	0xce, 0xdf, 0x46, 0xcd, 0x6f, 0xc0, 0x0b, 0xe9, 0x75, 0xd4, 0x3d, 0xa5, 0xe8, 0x4e, 0x43, 0xf0,
	0xde, 0x25, 0x31, 0x36, 0x9f, 0x78, 0x5e, 0xac, 0x27, 0x4d, 0x4c, 0xc4, 0xe4, 0x00, 0xe6, 0xf4,
	0x10, 0x64, 0x73, 0x1b, 0xc6, 0xd4, 0x3d, 0x64, 0x34, 0x9b, 0xcb, 0x28, 0x81, 0x21, 0xab, 0x8c,
	0x78, 0xc6, 0x3f, 0x22, 0x57, 0x68, 0xfd, 0x13, 0x6f, 0x2b, 0xfe, 0xc1, 0xf5, 0x22, 0xff, 0x20,
	0x44, 0xf2, 0x0f, 0xae, 0xb1, 0x97, 0x13, 0xe3, 0xd3, 0x71, 0x70, 0x33, 0x4c, 0x19, 0xc5, 0xf9,
	0xa4, 0x07, 0xf3, 0x05, 0x92, 0xc8, 0xf2, 0x0e, 0x9c, 0xdd, 0x55, 0x37, 0x91, 0xea, 0x9c, 0xbe,
	0x56, 0x09, 0x1c, 0xf2, 0xcd, 0x1e, 0xc0, 0x3e, 0x40, 0xd2, 0x52, 0x61, 0x54, 0x48, 0x0f, 0x2a,
	0x17, 0xfd, 0x4e, 0xd0, 0xce, 0x7c, 0x65, 0xc5, 0x76, 0x56, 0x9e, 0xc8, 0xce, 0xc1, 0xe5, 0xae,
	0xd4, 0x2b, 0xa8, 0xdb, 0xde, 0x9e, 0xbf, 0x9f, 0xe9, 0x5a, 0xd8, 0xdd, 0x24, 0x10, 0xb2, 0x90,
	0x27, 0xcf, 0x06, 0xd7, 0x92, 0x70, 0xc6, 0xa2, 0x58, 0x26, 0xc6, 0x5a, 0x30, 0xa3, 0x91, 0x42,
	0x46, 0x6f, 0xc1, 0x68, 0x27, 0xbd, 0x81, 0xa4, 0xa6, 0xf3, 0xeb, 0xb0, 0xe4, 0x6f, 0x59, 0x90,
	0xbd, 0x8f, 0x04, 0xe3, 0x22, 0xff, 0x94, 0xe2, 0xe9, 0x57, 0x82, 0x36, 0x65, 0x15, 0xe9, 0x6d,
	0xaa, 0xfc, 0x2f, 0x9b, 0x06, 0x17, 0x3f, 0xa9, 0x5c, 0x25, 0x82, 0x43, 0xea, 0xb4, 0xd8, 0xad,
	0xd4, 0xe5, 0x4a, 0xdb, 0x49, 0x6d, 0x2b, 0xd1, 0xd7, 0x45, 0x0d, 0xd2, 0xc6, 0x3f, 0x13, 0x30,
	0xcc, 0xcf, 0xa3, 0x1e, 0x8c, 0x88, 0x49, 0x8c, 0xce, 0x2b, 0x22, 0xd9, 0x51, 0xcf, 0x60, 0x45,
	0x10, 0xc1, 0x84, 0xcd, 0x7c, 0xf2, 0xc7, 0xbf, 0x5f, 0x9d, 0x3a, 0x4f, 0xc7, 0xad, 0x18, 0x6b,
	0x25, 0xd3, 0x31, 0xfd, 0x18, 0x46, 0x44, 0xe1, 0xa0, 0x8b, 0x79, 0x87, 0xa9, 0x83, 0x9f, 0x71,
	0xb1, 0x0f, 0x0a, 0xb5, 0x5e, 0xe4, 0x5a, 0x67, 0xe9, 0x8c, 0xa2, 0x55, 0xd4, 0x72, 0xeb, 0x01,
	0x0f, 0xf6, 0x87, 0xf4, 0x23, 0x38, 0x2d, 0x04, 0x37, 0x5d, 0x37, 0x9f, 0x80, 0x3a, 0xfb, 0xe5,
	0x13, 0xc8, 0xcc, 0x6f, 0x5a, 0xb3, 0x71, 0x52, 0xfb, 0x8c, 0x00, 0x24, 0xef, 0x96, 0x2e, 0xeb,
	0xac, 0x52, 0x93, 0x86, 0x71, 0xa9, 0x04, 0x12, 0x29, 0x5c, 0xe2, 0x14, 0x16, 0xe8, 0xbc, 0x4a,
	0x21, 0x86, 0xc6, 0x7e, 0xf8, 0x94, 0xc0, 0x68, 0x72, 0x42, 0xe8, 0x8c, 0x65, 0x9d, 0x99, 0xe5,
	0x18, 0xe5, 0x0e, 0x50, 0x6c, 0x9e, 0x33, 0x9a, 0xa2, 0x93, 0x5a, 0x46, 0x61, 0x3c, 0x88, 0xd8,
	0xd4, 0xc6, 0x83, 0xf4, 0x10, 0xb4, 0xf1, 0x20, 0xbf, 0x07, 0x6d, 0x3c, 0x88, 0xf8, 0x4f, 0xc7,
	0x83, 0x10, 0x2c, 0x8a, 0x87, 0x12, 0x04, 0x32, 0x73, 0x8b, 0x36, 0x1e, 0x70, 0x42, 0x39, 0x84,
	0x61, 0xde, 0x49, 0xd3, 0x05, 0x8d, 0x3d, 0xe9, 0xae, 0xdf, 0x58, 0x2c, 0x06, 0xa1, 0xca, 0x45,
	0xae, 0xb2, 0x46, 0xa7, 0x15, 0x95, 0xbc, 0x4b, 0x8f, 0x4d, 0x0e, 0xe0, 0x39, 0x2e, 0x16, 0x5a,
	0xbc, 0xa0, 0xb1, 0xa5, 0xbf, 0x72, 0x75, 0x6c, 0x60, 0xd3, 0x5c, 0xf9, 0x04, 0xad, 0xe6, 0x29,
	0xa7, 0xbf, 0x10, 0xa0, 0xd9, 0xce, 0x9c, 0x5e, 0x29, 0x7c, 0xdc, 0x6a, 0xaf, 0x6d, 0x98, 0x65,
	0xe1, 0xc8, 0xe9, 0x25, 0xce, 0x69, 0x8d, 0x9a, 0x2a, 0x27, 0xa7, 0x8b, 0xdf, 0xe0, 0x1a, 0x3b,
	0xbd, 0x06, 0xf6, 0xeb, 0xd6, 0x03, 0xfc, 0xe3, 0x21, 0xfd, 0x8d, 0xc0, 0x44, 0x7e, 0xd7, 0x4e,
	0xd7, 0xfb, 0x3e, 0xc7, 0x0c, 0xeb, 0x8d, 0x93, 0x88, 0x20, 0xf3, 0xeb, 0x9c, 0xf9, 0x35, 0xba,
	0x91, 0xc7, 0x5c, 0xfa, 0xe8, 0x97, 0x65, 0xff, 0x39, 0x91, 0xfb, 0x7a, 0xba, 0xa2, 0x21, 0x90,
	0x33, 0x33, 0x18, 0x97, 0x4b, 0x61, 0xfb, 0x04, 0x9c, 0xf4, 0x95, 0x93, 0x7e, 0x4f, 0xb2, 0x9d,
	0x3d, 0x35, 0x0b, 0xf5, 0x64, 0x26, 0x08, 0xc3, 0x2a, 0x8d, 0x47, 0x6e, 0xcb, 0x9c, 0x1b, 0xa3,
	0x73, 0xf9, 0xdc, 0x52, 0x54, 0x62, 0x7f, 0x61, 0xc3, 0x5e, 0xec, 0x2f, 0x79, 0x86, 0x28, 0xf6,
	0x97, 0x32, 0x50, 0xf4, 0xf1, 0x17, 0x7e, 0xdf, 0xa5, 0x3f, 0x13, 0x38, 0x9b, 0xe9, 0x60, 0xa9,
	0x55, 0x22, 0x8a, 0xd2, 0xdd, 0x94, 0xb1, 0x56, 0x5e, 0x00, 0xe9, 0x6d, 0x70, 0x7a, 0xab, 0x74,
	0x45, 0x9b, 0xad, 0xe3, 0x4f, 0xc9, 0x71, 0x36, 0xf9, 0x91, 0x40, 0x35, 0x73, 0x62, 0x98, 0x5a,
	0xac, 0xbe, 0x55, 0xa2, 0x0c, 0xdf, 0xa2, 0x89, 0x80, 0xad, 0x70, 0xbe, 0x8b, 0x94, 0xf5, 0xe7,
	0x4b, 0x7f, 0x20, 0x70, 0x2e, 0xa7, 0xef, 0xd6, 0xc6, 0xa1, 0xa6, 0x87, 0xd7, 0xc6, 0xa1, 0xae,
	0xa1, 0x67, 0xab, 0x9c, 0xe4, 0x12, 0x5d, 0xcc, 0x79, 0xc9, 0x1d, 0x2e, 0x94, 0x0a, 0x46, 0xfa,
	0x1d, 0x81, 0x51, 0xa9, 0xeb, 0xa4, 0x97, 0x0b, 0xeb, 0x9d, 0xe2, 0xc3, 0xd5, 0x72, 0x60, 0xa4,
	0x66, 0x72, 0x6a, 0xcb, 0x74, 0x29, 0xb7, 0x44, 0x65, 0xef, 0xfa, 0x1b, 0x02, 0x63, 0xd2, 0x49,
	0xe1, 0x3d, 0x5f, 0x2e, 0x2c, 0x87, 0x65, 0xf8, 0xe9, 0xba, 0x74, 0xb6, 0xc4, 0xf9, 0xcd, 0xd1,
	0x5a, 0x31, 0x3f, 0xfa, 0x35, 0x81, 0x33, 0x4a, 0x5f, 0xac, 0x7d, 0xc3, 0x39, 0xbd, 0xb5, 0xf6,
	0x0d, 0xe7, 0x35, 0xda, 0xda, 0xbc, 0x92, 0xba, 0x4f, 0x9c, 0x10, 0xac, 0x47, 0x47, 0x35, 0xf2,
	0xf8, 0xa8, 0x46, 0xfe, 0x3e, 0xaa, 0x91, 0x2f, 0x8e, 0x6b, 0x43, 0x8f, 0x8f, 0x6b, 0x43, 0x7f,
	0x1e, 0xd7, 0x86, 0xde, 0x19, 0x4f, 0x44, 0x0f, 0x45, 0x02, 0xe8, 0xb5, 0x9d, 0x60, 0x67, 0x84,
	0xff, 0x97, 0xe5, 0xea, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xca, 0xb1, 0x9b, 0xcd, 0x1a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Client by index.
	Client(ctx context.Context, in *QueryGetClientRequest, opts ...grpc.CallOption) (*QueryGetClientResponse, error)
	// Queries a list of Client items.
	ClientAll(ctx context.Context, in *QueryAllClientRequest, opts ...grpc.CallOption) (*QueryAllClientResponse, error)
	// Queries a Challenger by index.
	Challenger(ctx context.Context, in *QueryGetChallengerRequest, opts ...grpc.CallOption) (*QueryGetChallengerResponse, error)
	// Queries a list of Challenger items.
	ChallengerAll(ctx context.Context, in *QueryAllChallengerRequest, opts ...grpc.CallOption) (*QueryAllChallengerResponse, error)
	// Queries a Runner by index.
	Runner(ctx context.Context, in *QueryGetRunnerRequest, opts ...grpc.CallOption) (*QueryGetRunnerResponse, error)
	// Queries a list of Runner items.
	RunnerAll(ctx context.Context, in *QueryAllRunnerRequest, opts ...grpc.CallOption) (*QueryAllRunnerResponse, error)
	// Queries a Guard by index.
	Guard(ctx context.Context, in *QueryGetGuardRequest, opts ...grpc.CallOption) (*QueryGetGuardResponse, error)
	// Queries a list of Guard items.
	GuardAll(ctx context.Context, in *QueryAllGuardRequest, opts ...grpc.CallOption) (*QueryAllGuardResponse, error)
	// Queries a list of GetClientByAddress items.
	GetClientByAddress(ctx context.Context, in *QueryGetClientByAddressRequest, opts ...grpc.CallOption) (*QueryGetClientByAddressResponse, error)
	// Queries a list of GetChallengerByAddress items.
	GetChallengerByAddress(ctx context.Context, in *QueryGetChallengerByAddressRequest, opts ...grpc.CallOption) (*QueryGetChallengerByAddressResponse, error)
	// Queries a TotalClients by index.
	TotalClients(ctx context.Context, in *QueryGetTotalClientsRequest, opts ...grpc.CallOption) (*QueryGetTotalClientsResponse, error)
	// Queries a TotalChallengers by index.
	TotalChallengers(ctx context.Context, in *QueryGetTotalChallengersRequest, opts ...grpc.CallOption) (*QueryGetTotalChallengersResponse, error)
	// Queries a TotalRunners by index.
	TotalRunners(ctx context.Context, in *QueryGetTotalRunnersRequest, opts ...grpc.CallOption) (*QueryGetTotalRunnersResponse, error)
	// Queries a ChallengerByIndex by index.
	ChallengerByIndex(ctx context.Context, in *QueryGetChallengerByIndexRequest, opts ...grpc.CallOption) (*QueryGetChallengerByIndexResponse, error)
	// Queries a list of ChallengerByIndex items.
	ChallengerByIndexAll(ctx context.Context, in *QueryAllChallengerByIndexRequest, opts ...grpc.CallOption) (*QueryAllChallengerByIndexResponse, error)
	// Queries a list of GetRandomChallenger items.
	GetRandomChallenger(ctx context.Context, in *QueryGetRandomChallengerRequest, opts ...grpc.CallOption) (*QueryGetRandomChallengerResponse, error)
	// Queries a RunnerByIndex by index.
	RunnerByIndex(ctx context.Context, in *QueryGetRunnerByIndexRequest, opts ...grpc.CallOption) (*QueryGetRunnerByIndexResponse, error)
	// Queries a list of RunnerByIndex items.
	RunnerByIndexAll(ctx context.Context, in *QueryAllRunnerByIndexRequest, opts ...grpc.CallOption) (*QueryAllRunnerByIndexResponse, error)
	// Queries a list of GetRandomRunner items.
	GetRandomRunner(ctx context.Context, in *QueryGetRandomRunnerRequest, opts ...grpc.CallOption) (*QueryGetRandomRunnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Client(ctx context.Context, in *QueryGetClientRequest, opts ...grpc.CallOption) (*QueryGetClientResponse, error) {
	out := new(QueryGetClientResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClientAll(ctx context.Context, in *QueryAllClientRequest, opts ...grpc.CallOption) (*QueryAllClientResponse, error) {
	out := new(QueryAllClientResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/ClientAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Challenger(ctx context.Context, in *QueryGetChallengerRequest, opts ...grpc.CallOption) (*QueryGetChallengerResponse, error) {
	out := new(QueryGetChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Challenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChallengerAll(ctx context.Context, in *QueryAllChallengerRequest, opts ...grpc.CallOption) (*QueryAllChallengerResponse, error) {
	out := new(QueryAllChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/ChallengerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Runner(ctx context.Context, in *QueryGetRunnerRequest, opts ...grpc.CallOption) (*QueryGetRunnerResponse, error) {
	out := new(QueryGetRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Runner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RunnerAll(ctx context.Context, in *QueryAllRunnerRequest, opts ...grpc.CallOption) (*QueryAllRunnerResponse, error) {
	out := new(QueryAllRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/RunnerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Guard(ctx context.Context, in *QueryGetGuardRequest, opts ...grpc.CallOption) (*QueryGetGuardResponse, error) {
	out := new(QueryGetGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/Guard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardAll(ctx context.Context, in *QueryAllGuardRequest, opts ...grpc.CallOption) (*QueryAllGuardResponse, error) {
	out := new(QueryAllGuardResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GuardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetClientByAddress(ctx context.Context, in *QueryGetClientByAddressRequest, opts ...grpc.CallOption) (*QueryGetClientByAddressResponse, error) {
	out := new(QueryGetClientByAddressResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetClientByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChallengerByAddress(ctx context.Context, in *QueryGetChallengerByAddressRequest, opts ...grpc.CallOption) (*QueryGetChallengerByAddressResponse, error) {
	out := new(QueryGetChallengerByAddressResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetChallengerByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalClients(ctx context.Context, in *QueryGetTotalClientsRequest, opts ...grpc.CallOption) (*QueryGetTotalClientsResponse, error) {
	out := new(QueryGetTotalClientsResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/TotalClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalChallengers(ctx context.Context, in *QueryGetTotalChallengersRequest, opts ...grpc.CallOption) (*QueryGetTotalChallengersResponse, error) {
	out := new(QueryGetTotalChallengersResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/TotalChallengers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalRunners(ctx context.Context, in *QueryGetTotalRunnersRequest, opts ...grpc.CallOption) (*QueryGetTotalRunnersResponse, error) {
	out := new(QueryGetTotalRunnersResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/TotalRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChallengerByIndex(ctx context.Context, in *QueryGetChallengerByIndexRequest, opts ...grpc.CallOption) (*QueryGetChallengerByIndexResponse, error) {
	out := new(QueryGetChallengerByIndexResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/ChallengerByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChallengerByIndexAll(ctx context.Context, in *QueryAllChallengerByIndexRequest, opts ...grpc.CallOption) (*QueryAllChallengerByIndexResponse, error) {
	out := new(QueryAllChallengerByIndexResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/ChallengerByIndexAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRandomChallenger(ctx context.Context, in *QueryGetRandomChallengerRequest, opts ...grpc.CallOption) (*QueryGetRandomChallengerResponse, error) {
	out := new(QueryGetRandomChallengerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetRandomChallenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RunnerByIndex(ctx context.Context, in *QueryGetRunnerByIndexRequest, opts ...grpc.CallOption) (*QueryGetRunnerByIndexResponse, error) {
	out := new(QueryGetRunnerByIndexResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/RunnerByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RunnerByIndexAll(ctx context.Context, in *QueryAllRunnerByIndexRequest, opts ...grpc.CallOption) (*QueryAllRunnerByIndexResponse, error) {
	out := new(QueryAllRunnerByIndexResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/RunnerByIndexAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRandomRunner(ctx context.Context, in *QueryGetRandomRunnerRequest, opts ...grpc.CallOption) (*QueryGetRandomRunnerResponse, error) {
	out := new(QueryGetRandomRunnerResponse)
	err := c.cc.Invoke(ctx, "/soarchain.poa.Query/GetRandomRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Client by index.
	Client(context.Context, *QueryGetClientRequest) (*QueryGetClientResponse, error)
	// Queries a list of Client items.
	ClientAll(context.Context, *QueryAllClientRequest) (*QueryAllClientResponse, error)
	// Queries a Challenger by index.
	Challenger(context.Context, *QueryGetChallengerRequest) (*QueryGetChallengerResponse, error)
	// Queries a list of Challenger items.
	ChallengerAll(context.Context, *QueryAllChallengerRequest) (*QueryAllChallengerResponse, error)
	// Queries a Runner by index.
	Runner(context.Context, *QueryGetRunnerRequest) (*QueryGetRunnerResponse, error)
	// Queries a list of Runner items.
	RunnerAll(context.Context, *QueryAllRunnerRequest) (*QueryAllRunnerResponse, error)
	// Queries a Guard by index.
	Guard(context.Context, *QueryGetGuardRequest) (*QueryGetGuardResponse, error)
	// Queries a list of Guard items.
	GuardAll(context.Context, *QueryAllGuardRequest) (*QueryAllGuardResponse, error)
	// Queries a list of GetClientByAddress items.
	GetClientByAddress(context.Context, *QueryGetClientByAddressRequest) (*QueryGetClientByAddressResponse, error)
	// Queries a list of GetChallengerByAddress items.
	GetChallengerByAddress(context.Context, *QueryGetChallengerByAddressRequest) (*QueryGetChallengerByAddressResponse, error)
	// Queries a TotalClients by index.
	TotalClients(context.Context, *QueryGetTotalClientsRequest) (*QueryGetTotalClientsResponse, error)
	// Queries a TotalChallengers by index.
	TotalChallengers(context.Context, *QueryGetTotalChallengersRequest) (*QueryGetTotalChallengersResponse, error)
	// Queries a TotalRunners by index.
	TotalRunners(context.Context, *QueryGetTotalRunnersRequest) (*QueryGetTotalRunnersResponse, error)
	// Queries a ChallengerByIndex by index.
	ChallengerByIndex(context.Context, *QueryGetChallengerByIndexRequest) (*QueryGetChallengerByIndexResponse, error)
	// Queries a list of ChallengerByIndex items.
	ChallengerByIndexAll(context.Context, *QueryAllChallengerByIndexRequest) (*QueryAllChallengerByIndexResponse, error)
	// Queries a list of GetRandomChallenger items.
	GetRandomChallenger(context.Context, *QueryGetRandomChallengerRequest) (*QueryGetRandomChallengerResponse, error)
	// Queries a RunnerByIndex by index.
	RunnerByIndex(context.Context, *QueryGetRunnerByIndexRequest) (*QueryGetRunnerByIndexResponse, error)
	// Queries a list of RunnerByIndex items.
	RunnerByIndexAll(context.Context, *QueryAllRunnerByIndexRequest) (*QueryAllRunnerByIndexResponse, error)
	// Queries a list of GetRandomRunner items.
	GetRandomRunner(context.Context, *QueryGetRandomRunnerRequest) (*QueryGetRandomRunnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Client(ctx context.Context, req *QueryGetClientRequest) (*QueryGetClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Client not implemented")
}
func (*UnimplementedQueryServer) ClientAll(ctx context.Context, req *QueryAllClientRequest) (*QueryAllClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientAll not implemented")
}
func (*UnimplementedQueryServer) Challenger(ctx context.Context, req *QueryGetChallengerRequest) (*QueryGetChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenger not implemented")
}
func (*UnimplementedQueryServer) ChallengerAll(ctx context.Context, req *QueryAllChallengerRequest) (*QueryAllChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengerAll not implemented")
}
func (*UnimplementedQueryServer) Runner(ctx context.Context, req *QueryGetRunnerRequest) (*QueryGetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Runner not implemented")
}
func (*UnimplementedQueryServer) RunnerAll(ctx context.Context, req *QueryAllRunnerRequest) (*QueryAllRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerAll not implemented")
}
func (*UnimplementedQueryServer) Guard(ctx context.Context, req *QueryGetGuardRequest) (*QueryGetGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guard not implemented")
}
func (*UnimplementedQueryServer) GuardAll(ctx context.Context, req *QueryAllGuardRequest) (*QueryAllGuardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardAll not implemented")
}
func (*UnimplementedQueryServer) GetClientByAddress(ctx context.Context, req *QueryGetClientByAddressRequest) (*QueryGetClientByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientByAddress not implemented")
}
func (*UnimplementedQueryServer) GetChallengerByAddress(ctx context.Context, req *QueryGetChallengerByAddressRequest) (*QueryGetChallengerByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengerByAddress not implemented")
}
func (*UnimplementedQueryServer) TotalClients(ctx context.Context, req *QueryGetTotalClientsRequest) (*QueryGetTotalClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalClients not implemented")
}
func (*UnimplementedQueryServer) TotalChallengers(ctx context.Context, req *QueryGetTotalChallengersRequest) (*QueryGetTotalChallengersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalChallengers not implemented")
}
func (*UnimplementedQueryServer) TotalRunners(ctx context.Context, req *QueryGetTotalRunnersRequest) (*QueryGetTotalRunnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalRunners not implemented")
}
func (*UnimplementedQueryServer) ChallengerByIndex(ctx context.Context, req *QueryGetChallengerByIndexRequest) (*QueryGetChallengerByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengerByIndex not implemented")
}
func (*UnimplementedQueryServer) ChallengerByIndexAll(ctx context.Context, req *QueryAllChallengerByIndexRequest) (*QueryAllChallengerByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengerByIndexAll not implemented")
}
func (*UnimplementedQueryServer) GetRandomChallenger(ctx context.Context, req *QueryGetRandomChallengerRequest) (*QueryGetRandomChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomChallenger not implemented")
}
func (*UnimplementedQueryServer) RunnerByIndex(ctx context.Context, req *QueryGetRunnerByIndexRequest) (*QueryGetRunnerByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerByIndex not implemented")
}
func (*UnimplementedQueryServer) RunnerByIndexAll(ctx context.Context, req *QueryAllRunnerByIndexRequest) (*QueryAllRunnerByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunnerByIndexAll not implemented")
}
func (*UnimplementedQueryServer) GetRandomRunner(ctx context.Context, req *QueryGetRandomRunnerRequest) (*QueryGetRandomRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomRunner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Client",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Client(ctx, req.(*QueryGetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClientAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClientAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/ClientAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClientAll(ctx, req.(*QueryAllClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Challenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChallengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Challenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Challenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Challenger(ctx, req.(*QueryGetChallengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChallengerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChallengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChallengerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/ChallengerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChallengerAll(ctx, req.(*QueryAllChallengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Runner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Runner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Runner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Runner(ctx, req.(*QueryGetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RunnerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RunnerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/RunnerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RunnerAll(ctx, req.(*QueryAllRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Guard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Guard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/Guard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Guard(ctx, req.(*QueryGetGuardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GuardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardAll(ctx, req.(*QueryAllGuardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetClientByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClientByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetClientByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetClientByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetClientByAddress(ctx, req.(*QueryGetClientByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChallengerByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChallengerByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChallengerByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetChallengerByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChallengerByAddress(ctx, req.(*QueryGetChallengerByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTotalClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/TotalClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalClients(ctx, req.(*QueryGetTotalClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalChallengers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTotalChallengersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalChallengers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/TotalChallengers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalChallengers(ctx, req.(*QueryGetTotalChallengersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTotalRunnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/TotalRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalRunners(ctx, req.(*QueryGetTotalRunnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChallengerByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChallengerByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChallengerByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/ChallengerByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChallengerByIndex(ctx, req.(*QueryGetChallengerByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChallengerByIndexAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChallengerByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChallengerByIndexAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/ChallengerByIndexAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChallengerByIndexAll(ctx, req.(*QueryAllChallengerByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRandomChallenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRandomChallengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRandomChallenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetRandomChallenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRandomChallenger(ctx, req.(*QueryGetRandomChallengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RunnerByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRunnerByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RunnerByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/RunnerByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RunnerByIndex(ctx, req.(*QueryGetRunnerByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RunnerByIndexAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRunnerByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RunnerByIndexAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/RunnerByIndexAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RunnerByIndexAll(ctx, req.(*QueryAllRunnerByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRandomRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRandomRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRandomRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soarchain.poa.Query/GetRandomRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRandomRunner(ctx, req.(*QueryGetRandomRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soarchain.poa.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Client",
			Handler:    _Query_Client_Handler,
		},
		{
			MethodName: "ClientAll",
			Handler:    _Query_ClientAll_Handler,
		},
		{
			MethodName: "Challenger",
			Handler:    _Query_Challenger_Handler,
		},
		{
			MethodName: "ChallengerAll",
			Handler:    _Query_ChallengerAll_Handler,
		},
		{
			MethodName: "Runner",
			Handler:    _Query_Runner_Handler,
		},
		{
			MethodName: "RunnerAll",
			Handler:    _Query_RunnerAll_Handler,
		},
		{
			MethodName: "Guard",
			Handler:    _Query_Guard_Handler,
		},
		{
			MethodName: "GuardAll",
			Handler:    _Query_GuardAll_Handler,
		},
		{
			MethodName: "GetClientByAddress",
			Handler:    _Query_GetClientByAddress_Handler,
		},
		{
			MethodName: "GetChallengerByAddress",
			Handler:    _Query_GetChallengerByAddress_Handler,
		},
		{
			MethodName: "TotalClients",
			Handler:    _Query_TotalClients_Handler,
		},
		{
			MethodName: "TotalChallengers",
			Handler:    _Query_TotalChallengers_Handler,
		},
		{
			MethodName: "TotalRunners",
			Handler:    _Query_TotalRunners_Handler,
		},
		{
			MethodName: "ChallengerByIndex",
			Handler:    _Query_ChallengerByIndex_Handler,
		},
		{
			MethodName: "ChallengerByIndexAll",
			Handler:    _Query_ChallengerByIndexAll_Handler,
		},
		{
			MethodName: "GetRandomChallenger",
			Handler:    _Query_GetRandomChallenger_Handler,
		},
		{
			MethodName: "RunnerByIndex",
			Handler:    _Query_RunnerByIndex_Handler,
		},
		{
			MethodName: "RunnerByIndexAll",
			Handler:    _Query_RunnerByIndexAll_Handler,
		},
		{
			MethodName: "GetRandomRunner",
			Handler:    _Query_GetRandomRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poa/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Client) > 0 {
		for iNdEx := len(m.Client) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Client[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Challenger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChallengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChallengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChallengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Challenger) > 0 {
		for iNdEx := len(m.Challenger) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Challenger[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Runner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRunnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRunnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRunnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Runner) > 0 {
		for iNdEx := len(m.Runner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Runner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Guard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Guard) > 0 {
		for iNdEx := len(m.Guard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenger != nil {
		{
			size, err := m.Challenger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalClientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalClientsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalClientsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalClientsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalClients.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalChallengersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalChallengersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalChallengersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalChallengersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalChallengersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalChallengersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalChallengers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalRunnersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalRunnersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalRunnersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTotalRunnersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTotalRunnersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTotalRunnersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalRunners.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChallengerByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChallengerByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChallengerByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChallengerByIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllChallengerByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChallengerByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChallengerByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChallengerByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChallengerByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChallengerByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChallengerByIndex) > 0 {
		for iNdEx := len(m.ChallengerByIndex) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengerByIndex[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomChallengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomChallengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomChallengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Challenger != nil {
		{
			size, err := m.Challenger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRunnerByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRunnerByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRunnerByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RunnerByIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRunnerByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRunnerByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRunnerByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRunnerByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRunnerByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRunnerByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RunnerByIndex) > 0 {
		for iNdEx := len(m.RunnerByIndex) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RunnerByIndex[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomRunnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomRunnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomRunnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRandomRunnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRandomRunnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRandomRunnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Runner != nil {
		{
			size, err := m.Runner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Client.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Client) > 0 {
		for _, e := range m.Client {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Challenger.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChallengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Challenger) > 0 {
		for _, e := range m.Challenger {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Runner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRunnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Runner) > 0 {
		for _, e := range m.Runner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Guard.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGuardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGuardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Guard) > 0 {
		for _, e := range m.Guard {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenger != nil {
		l = m.Challenger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTotalClientsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTotalClientsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalClients.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTotalChallengersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTotalChallengersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalChallengers.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTotalRunnersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTotalRunnersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalRunners.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChallengerByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChallengerByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChallengerByIndex.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllChallengerByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChallengerByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChallengerByIndex) > 0 {
		for _, e := range m.ChallengerByIndex {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRandomChallengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRandomChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenger != nil {
		l = m.Challenger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRunnerByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RunnerByIndex.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRunnerByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRunnerByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RunnerByIndex) > 0 {
		for _, e := range m.RunnerByIndex {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRandomRunnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRandomRunnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Runner != nil {
		l = m.Runner.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client, Client{})
			if err := m.Client[len(m.Client)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Challenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChallengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChallengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChallengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = append(m.Challenger, Challenger{})
			if err := m.Challenger[len(m.Challenger)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Runner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRunnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRunnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRunnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runner = append(m.Runner, Runner{})
			if err := m.Runner[len(m.Runner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Guard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guard = append(m.Guard, Guard{})
			if err := m.Guard[len(m.Guard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenger == nil {
				m.Challenger = &Challenger{}
			}
			if err := m.Challenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalClientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalClientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalClientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalClients.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalChallengersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalChallengersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalChallengersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalChallengersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalChallengersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalChallengersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChallengers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalChallengers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalRunnersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalRunnersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalRunnersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTotalRunnersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTotalRunnersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTotalRunnersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRunners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRunners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChallengerByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChallengerByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChallengerByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerByIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChallengerByIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChallengerByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChallengerByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChallengerByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChallengerByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChallengerByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChallengerByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerByIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengerByIndex = append(m.ChallengerByIndex, ChallengerByIndex{})
			if err := m.ChallengerByIndex[len(m.ChallengerByIndex)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomChallengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomChallengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomChallengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Challenger == nil {
				m.Challenger = &Challenger{}
			}
			if err := m.Challenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRunnerByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRunnerByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRunnerByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerByIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RunnerByIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRunnerByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRunnerByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRunnerByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRunnerByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRunnerByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRunnerByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerByIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunnerByIndex = append(m.RunnerByIndex, RunnerByIndex{})
			if err := m.RunnerByIndex[len(m.RunnerByIndex)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomRunnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomRunnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomRunnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRandomRunnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRandomRunnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRandomRunnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Runner == nil {
				m.Runner = &Runner{}
			}
			if err := m.Runner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
