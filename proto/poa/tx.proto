syntax = "proto3";
package soarchain.poa;

import "poa/challenger.proto";

// this line is used by starport scaffolding # proto/tx/import
import "poa/runner.proto";

option go_package = "soarchain/x/poa/types";

// Msg defines the Msg service.
service Msg {
  rpc GenClient(MsgGenClient) returns (MsgGenClientResponse);
  rpc ChallengeService(MsgChallengeService) returns (MsgChallengeServiceResponse);
  rpc UnregisterClient(MsgUnregisterClient) returns (MsgUnregisterClientResponse);
  rpc UnregisterChallenger(MsgUnregisterChallenger) returns (MsgUnregisterChallengerResponse);
  rpc UnregisterRunner(MsgUnregisterRunner) returns (MsgUnregisterRunnerResponse);
  rpc RunnerChallenge(MsgRunnerChallenge) returns (MsgRunnerChallengeResponse);
  rpc SelectRandomChallenger(MsgSelectRandomChallenger) returns (MsgSelectRandomChallengerResponse);
  rpc SelectRandomRunner(MsgSelectRandomRunner) returns (MsgSelectRandomRunnerResponse);
  rpc ClaimMotusRewards(MsgClaimMotusRewards) returns (MsgClaimMotusRewardsResponse);
  rpc ClaimRunnerRewards(MsgClaimRunnerRewards) returns (MsgClaimRunnerRewardsResponse);
  rpc RegisterFactoryKey(MsgRegisterFactoryKey) returns (MsgRegisterFactoryKeyResponse);
  rpc GenRunner(MsgGenRunner) returns (MsgGenRunnerResponse);
  rpc GenChallenger(MsgGenChallenger) returns (MsgGenChallengerResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgGenClient {
  string creator = 1;
  string certificate = 2;
  string signature = 3;
}

message MsgGenClientResponse {
}

message MsgChallengeService {
  string creator = 1;
  string clientPubkey = 2;
  string clientCommunicationMode = 3;
  string challengeResult = 4;

}

message MsgChallengeServiceResponse {
}

message MsgUnregisterClient {
  string creator = 1;
  string pubkey = 2;
}

message MsgUnregisterClientResponse {
}

message MsgUnregisterChallenger {
  string creator = 1;
  string challengerAddress = 2;
}

message MsgUnregisterChallengerResponse {
}


message MsgGenRunner{
  string creator = 1; 
  string runnerStake = 2;
  string runnerIp = 3;
  string certificate = 4;
  string signature = 5;
}

message MsgGenRunnerResponse{

}

message MsgGenChallenger{
  string creator = 1;
  string ChallengerPubKey = 2;
  string ChallengerAddr = 3;
  string ChallengerStake = 4;
  string ChallengerIp = 5;
  string Challengertype = 6;
  string certificate = 7;
  string signature = 8;
}

message MsgGenChallengerResponse{

}


message MsgUnregisterRunner {
  string creator = 1;
  string runnerAddress = 2;
}

message MsgUnregisterRunnerResponse {
}

message MsgRunnerChallenge {
  string creator = 1;
  string runnerAddress = 2;
  repeated string clientPubkeys = 3;
}

message MsgRunnerChallengeResponse {
}



message MsgSelectRandomChallenger {
  string creator = 1;
}

message MsgSelectRandomChallengerResponse {
  Challenger randomChallenger = 1;
}

message MsgSelectRandomRunner {
  string creator = 1;
}

message MsgSelectRandomRunnerResponse {
  Runner randomRunner = 1;
}


message MsgClaimMotusRewards {
  string creator = 1;
  string amount = 2;
}

message MsgClaimMotusRewardsResponse {
}

message MsgClaimRunnerRewards {
  string creator = 1;
  string amount = 2;
}

message MsgClaimRunnerRewardsResponse {
}

message MsgRegisterFactoryKey {
  string creator = 1;
  string factoryCert = 2;
}

message MsgRegisterFactoryKeyResponse {
}

// this line is used by starport scaffolding # proto/tx/message
